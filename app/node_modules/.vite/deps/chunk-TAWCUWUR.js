import {
  AtomicReadyWalletRejectedUpgradeError,
  AtomicityNotSupportedError,
  BaseError,
  BaseError2,
  BundleTooLargeError,
  ChainDisconnectedError,
  DuplicateIdError,
  ExecutionRevertedError,
  FeeCapTooHighError,
  HttpRequestError,
  InternalRpcError,
  InvalidAddressError,
  InvalidChainIdError,
  InvalidInputRpcError,
  InvalidLegacyVError,
  InvalidParamsRpcError,
  InvalidRequestRpcError,
  InvalidSerializableTransactionError,
  InvalidStorageKeySizeError,
  JsonRpcVersionUnsupportedError,
  LimitExceededRpcError,
  LruMap as LruMap4,
  MethodNotFoundRpcError,
  MethodNotSupportedRpcError,
  ParseRpcError,
  ProviderDisconnectedError,
  ResourceNotFoundRpcError,
  ResourceUnavailableRpcError,
  RpcRequestError,
  SwitchChainError,
  TimeoutError,
  TipAboveFeeCapError,
  TransactionRejectedRpcError,
  UnauthorizedProviderError,
  UnknownBundleIdError,
  UnknownRpcError,
  UnsupportedChainIdError,
  UnsupportedNonOptionalCapabilityError,
  UnsupportedProviderMethodError,
  UserRejectedRequestError,
  bytesToHex,
  concat,
  concatHex,
  createBatchScheduler,
  createCursor,
  defineFormatter as defineFormatter4,
  formatUnits,
  from,
  fromBoolean,
  fromBytes,
  fromNumber,
  fromString,
  fromString2,
  hexToBytes,
  hexToNumber as hexToNumber4,
  isAddress,
  isHex as isHex2,
  maxUint256,
  numberToHex as numberToHex4,
  padLeft,
  padRight,
  size,
  size2,
  slice,
  stringToHex,
  stringify,
  toBytes,
  toHex as toHex2,
  trim
} from "./chunk-DVUCGVIP.js";
import {
  css,
  unsafeCSS
} from "./chunk-SWUIY5A2.js";
import {
  HashMD as HashMD3
} from "./chunk-G3HWZMYQ.js";
import {
  LruMap as LruMap2,
  checksumAddress,
  defineFormatter as defineFormatter2,
  hexToBigInt,
  hexToNumber as hexToNumber2,
  isHex,
  keccak256,
  numberToHex as numberToHex2,
  toHex
} from "./chunk-FWGYYPXN.js";
import {
  rotl as rotl3,
  wrapConstructor as wrapConstructor2
} from "./chunk-SKGQHNU3.js";
import {
  HashMD as HashMD4
} from "./chunk-CMB4GG2E.js";
import {
  LruMap as LruMap3,
  defineFormatter as defineFormatter3,
  hexToNumber as hexToNumber3,
  numberToHex as numberToHex3
} from "./chunk-DEJ4ONY3.js";
import {
  rotl as rotl4,
  wrapConstructor as wrapConstructor3
} from "./chunk-UWDOMHWA.js";
import {
  require_elliptic
} from "./chunk-YYCYUMIM.js";
import {
  HashMD as HashMD2
} from "./chunk-237FAZ6Z.js";
import {
  LruMap,
  defineFormatter,
  hexToNumber,
  numberToHex
} from "./chunk-3DZP7IKP.js";
import {
  rotl as rotl2,
  wrapConstructor
} from "./chunk-D4SSSIW7.js";
import {
  init_tslib_es6,
  tslib_es6_exports
} from "./chunk-54344CYW.js";
import {
  require_events
} from "./chunk-2BLCN3QT.js";
import {
  esm_default
} from "./chunk-OAUNBI7H.js";
import {
  init_sha256,
  sha256
} from "./chunk-ME3XQULL.js";
import {
  init_sha3,
  keccak_256
} from "./chunk-YWEENUGM.js";
import {
  Chi,
  HashMD,
  Maj,
  init_md
} from "./chunk-DFP7IRCZ.js";
import {
  clean,
  createHasher,
  init_utils,
  rotl
} from "./chunk-OXK6D7YU.js";
import {
  __commonJS,
  __export,
  __reExport,
  __toCommonJS,
  __toESM
} from "./chunk-MVEJMUOB.js";

// ../node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "../node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e3();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e3 = 6e4, n5 = 36e5, r3 = "millisecond", i5 = "second", s4 = "minute", u4 = "hour", a3 = "day", o6 = "week", c8 = "month", f10 = "quarter", h6 = "year", d6 = "date", l8 = "Invalid Date", $4 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y7 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M7 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e4 = ["th", "st", "nd", "rd"], n6 = t3 % 100;
        return "[" + t3 + (e4[(n6 - 20) % 10] || e4[n6] || e4[0]) + "]";
      } }, m4 = function(t3, e4, n6) {
        var r4 = String(t3);
        return !r4 || r4.length >= e4 ? t3 : "" + Array(e4 + 1 - r4.length).join(n6) + t3;
      }, v7 = { s: m4, z: function(t3) {
        var e4 = -t3.utcOffset(), n6 = Math.abs(e4), r4 = Math.floor(n6 / 60), i6 = n6 % 60;
        return (e4 <= 0 ? "+" : "-") + m4(r4, 2, "0") + ":" + m4(i6, 2, "0");
      }, m: function t3(e4, n6) {
        if (e4.date() < n6.date()) return -t3(n6, e4);
        var r4 = 12 * (n6.year() - e4.year()) + (n6.month() - e4.month()), i6 = e4.clone().add(r4, c8), s5 = n6 - i6 < 0, u5 = e4.clone().add(r4 + (s5 ? -1 : 1), c8);
        return +(-(r4 + (n6 - i6) / (s5 ? i6 - u5 : u5 - i6)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c8, y: h6, w: o6, d: a3, D: d6, h: u4, m: s4, s: i5, ms: r3, Q: f10 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g5 = "en", D3 = {};
      D3[g5] = M7;
      var p6 = "$isDayjsObject", S5 = function(t3) {
        return t3 instanceof _4 || !(!t3 || !t3[p6]);
      }, w6 = function t3(e4, n6, r4) {
        var i6;
        if (!e4) return g5;
        if ("string" == typeof e4) {
          var s5 = e4.toLowerCase();
          D3[s5] && (i6 = s5), n6 && (D3[s5] = n6, i6 = s5);
          var u5 = e4.split("-");
          if (!i6 && u5.length > 1) return t3(u5[0]);
        } else {
          var a4 = e4.name;
          D3[a4] = e4, i6 = a4;
        }
        return !r4 && i6 && (g5 = i6), i6 || !r4 && g5;
      }, O7 = function(t3, e4) {
        if (S5(t3)) return t3.clone();
        var n6 = "object" == typeof e4 ? e4 : {};
        return n6.date = t3, n6.args = arguments, new _4(n6);
      }, b6 = v7;
      b6.l = w6, b6.i = S5, b6.w = function(t3, e4) {
        return O7(t3, { locale: e4.$L, utc: e4.$u, x: e4.$x, $offset: e4.$offset });
      };
      var _4 = function() {
        function M8(t3) {
          this.$L = w6(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p6] = true;
        }
        var m5 = M8.prototype;
        return m5.parse = function(t3) {
          this.$d = function(t4) {
            var e4 = t4.date, n6 = t4.utc;
            if (null === e4) return /* @__PURE__ */ new Date(NaN);
            if (b6.u(e4)) return /* @__PURE__ */ new Date();
            if (e4 instanceof Date) return new Date(e4);
            if ("string" == typeof e4 && !/Z$/i.test(e4)) {
              var r4 = e4.match($4);
              if (r4) {
                var i6 = r4[2] - 1 || 0, s5 = (r4[7] || "0").substring(0, 3);
                return n6 ? new Date(Date.UTC(r4[1], i6, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s5)) : new Date(r4[1], i6, r4[3] || 1, r4[4] || 0, r4[5] || 0, r4[6] || 0, s5);
              }
            }
            return new Date(e4);
          }(t3), this.init();
        }, m5.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m5.$utils = function() {
          return b6;
        }, m5.isValid = function() {
          return !(this.$d.toString() === l8);
        }, m5.isSame = function(t3, e4) {
          var n6 = O7(t3);
          return this.startOf(e4) <= n6 && n6 <= this.endOf(e4);
        }, m5.isAfter = function(t3, e4) {
          return O7(t3) < this.startOf(e4);
        }, m5.isBefore = function(t3, e4) {
          return this.endOf(e4) < O7(t3);
        }, m5.$g = function(t3, e4, n6) {
          return b6.u(t3) ? this[e4] : this.set(n6, t3);
        }, m5.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m5.valueOf = function() {
          return this.$d.getTime();
        }, m5.startOf = function(t3, e4) {
          var n6 = this, r4 = !!b6.u(e4) || e4, f11 = b6.p(t3), l9 = function(t4, e5) {
            var i6 = b6.w(n6.$u ? Date.UTC(n6.$y, e5, t4) : new Date(n6.$y, e5, t4), n6);
            return r4 ? i6 : i6.endOf(a3);
          }, $5 = function(t4, e5) {
            return b6.w(n6.toDate()[t4].apply(n6.toDate("s"), (r4 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e5)), n6);
          }, y8 = this.$W, M9 = this.$M, m6 = this.$D, v8 = "set" + (this.$u ? "UTC" : "");
          switch (f11) {
            case h6:
              return r4 ? l9(1, 0) : l9(31, 11);
            case c8:
              return r4 ? l9(1, M9) : l9(0, M9 + 1);
            case o6:
              var g6 = this.$locale().weekStart || 0, D4 = (y8 < g6 ? y8 + 7 : y8) - g6;
              return l9(r4 ? m6 - D4 : m6 + (6 - D4), M9);
            case a3:
            case d6:
              return $5(v8 + "Hours", 0);
            case u4:
              return $5(v8 + "Minutes", 1);
            case s4:
              return $5(v8 + "Seconds", 2);
            case i5:
              return $5(v8 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m5.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m5.$set = function(t3, e4) {
          var n6, o7 = b6.p(t3), f11 = "set" + (this.$u ? "UTC" : ""), l9 = (n6 = {}, n6[a3] = f11 + "Date", n6[d6] = f11 + "Date", n6[c8] = f11 + "Month", n6[h6] = f11 + "FullYear", n6[u4] = f11 + "Hours", n6[s4] = f11 + "Minutes", n6[i5] = f11 + "Seconds", n6[r3] = f11 + "Milliseconds", n6)[o7], $5 = o7 === a3 ? this.$D + (e4 - this.$W) : e4;
          if (o7 === c8 || o7 === h6) {
            var y8 = this.clone().set(d6, 1);
            y8.$d[l9]($5), y8.init(), this.$d = y8.set(d6, Math.min(this.$D, y8.daysInMonth())).$d;
          } else l9 && this.$d[l9]($5);
          return this.init(), this;
        }, m5.set = function(t3, e4) {
          return this.clone().$set(t3, e4);
        }, m5.get = function(t3) {
          return this[b6.p(t3)]();
        }, m5.add = function(r4, f11) {
          var d7, l9 = this;
          r4 = Number(r4);
          var $5 = b6.p(f11), y8 = function(t3) {
            var e4 = O7(l9);
            return b6.w(e4.date(e4.date() + Math.round(t3 * r4)), l9);
          };
          if ($5 === c8) return this.set(c8, this.$M + r4);
          if ($5 === h6) return this.set(h6, this.$y + r4);
          if ($5 === a3) return y8(1);
          if ($5 === o6) return y8(7);
          var M9 = (d7 = {}, d7[s4] = e3, d7[u4] = n5, d7[i5] = t2, d7)[$5] || 1, m6 = this.$d.getTime() + r4 * M9;
          return b6.w(m6, this);
        }, m5.subtract = function(t3, e4) {
          return this.add(-1 * t3, e4);
        }, m5.format = function(t3) {
          var e4 = this, n6 = this.$locale();
          if (!this.isValid()) return n6.invalidDate || l8;
          var r4 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i6 = b6.z(this), s5 = this.$H, u5 = this.$m, a4 = this.$M, o7 = n6.weekdays, c9 = n6.months, f11 = n6.meridiem, h7 = function(t4, n7, i7, s6) {
            return t4 && (t4[n7] || t4(e4, r4)) || i7[n7].slice(0, s6);
          }, d7 = function(t4) {
            return b6.s(s5 % 12 || 12, t4, "0");
          }, $5 = f11 || function(t4, e5, n7) {
            var r5 = t4 < 12 ? "AM" : "PM";
            return n7 ? r5.toLowerCase() : r5;
          };
          return r4.replace(y7, function(t4, r5) {
            return r5 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e4.$y).slice(-2);
                case "YYYY":
                  return b6.s(e4.$y, 4, "0");
                case "M":
                  return a4 + 1;
                case "MM":
                  return b6.s(a4 + 1, 2, "0");
                case "MMM":
                  return h7(n6.monthsShort, a4, c9, 3);
                case "MMMM":
                  return h7(c9, a4);
                case "D":
                  return e4.$D;
                case "DD":
                  return b6.s(e4.$D, 2, "0");
                case "d":
                  return String(e4.$W);
                case "dd":
                  return h7(n6.weekdaysMin, e4.$W, o7, 2);
                case "ddd":
                  return h7(n6.weekdaysShort, e4.$W, o7, 3);
                case "dddd":
                  return o7[e4.$W];
                case "H":
                  return String(s5);
                case "HH":
                  return b6.s(s5, 2, "0");
                case "h":
                  return d7(1);
                case "hh":
                  return d7(2);
                case "a":
                  return $5(s5, u5, true);
                case "A":
                  return $5(s5, u5, false);
                case "m":
                  return String(u5);
                case "mm":
                  return b6.s(u5, 2, "0");
                case "s":
                  return String(e4.$s);
                case "ss":
                  return b6.s(e4.$s, 2, "0");
                case "SSS":
                  return b6.s(e4.$ms, 3, "0");
                case "Z":
                  return i6;
              }
              return null;
            }(t4) || i6.replace(":", "");
          });
        }, m5.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m5.diff = function(r4, d7, l9) {
          var $5, y8 = this, M9 = b6.p(d7), m6 = O7(r4), v8 = (m6.utcOffset() - this.utcOffset()) * e3, g6 = this - m6, D4 = function() {
            return b6.m(y8, m6);
          };
          switch (M9) {
            case h6:
              $5 = D4() / 12;
              break;
            case c8:
              $5 = D4();
              break;
            case f10:
              $5 = D4() / 3;
              break;
            case o6:
              $5 = (g6 - v8) / 6048e5;
              break;
            case a3:
              $5 = (g6 - v8) / 864e5;
              break;
            case u4:
              $5 = g6 / n5;
              break;
            case s4:
              $5 = g6 / e3;
              break;
            case i5:
              $5 = g6 / t2;
              break;
            default:
              $5 = g6;
          }
          return l9 ? $5 : b6.a($5);
        }, m5.daysInMonth = function() {
          return this.endOf(c8).$D;
        }, m5.$locale = function() {
          return D3[this.$L];
        }, m5.locale = function(t3, e4) {
          if (!t3) return this.$L;
          var n6 = this.clone(), r4 = w6(t3, e4, true);
          return r4 && (n6.$L = r4), n6;
        }, m5.clone = function() {
          return b6.w(this.$d, this);
        }, m5.toDate = function() {
          return new Date(this.valueOf());
        }, m5.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m5.toISOString = function() {
          return this.$d.toISOString();
        }, m5.toString = function() {
          return this.$d.toUTCString();
        }, M8;
      }(), k7 = _4.prototype;
      return O7.prototype = k7, [["$ms", r3], ["$s", i5], ["$m", s4], ["$H", u4], ["$W", a3], ["$M", c8], ["$y", h6], ["$D", d6]].forEach(function(t3) {
        k7[t3[1]] = function(e4) {
          return this.$g(e4, t3[0], t3[1]);
        };
      }), O7.extend = function(t3, e4) {
        return t3.$i || (t3(e4, _4, O7), t3.$i = true), O7;
      }, O7.locale = w6, O7.isDayjs = S5, O7.unix = function(t3) {
        return O7(1e3 * t3);
      }, O7.en = D3[g5], O7.Ls = D3, O7.p = {}, O7;
    });
  }
});

// ../node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "../node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e3, n5) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n5() : "function" == typeof define && define.amd ? define(n5) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_locale_en = n5();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e3) {
        var n5 = ["th", "st", "nd", "rd"], t2 = e3 % 100;
        return "[" + e3 + (n5[(t2 - 20) % 10] || n5[t2] || n5[0]) + "]";
      } };
    });
  }
});

// ../node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "../node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r3, e3) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e3() : "function" == typeof define && define.amd ? define(e3) : (r3 = "undefined" != typeof globalThis ? globalThis : r3 || self).dayjs_plugin_relativeTime = e3();
    }(exports, function() {
      "use strict";
      return function(r3, e3, t2) {
        r3 = r3 || {};
        var n5 = e3.prototype, o6 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i5(r4, e4, t3, o7) {
          return n5.fromToBase(r4, e4, t3, o7);
        }
        t2.en.relativeTime = o6, n5.fromToBase = function(e4, n6, i6, d7, u4) {
          for (var f10, a3, s4, l8 = i6.$locale().relativeTime || o6, h6 = r3.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m4 = h6.length, c8 = 0; c8 < m4; c8 += 1) {
            var y7 = h6[c8];
            y7.d && (f10 = d7 ? t2(e4).diff(i6, y7.d, true) : i6.diff(e4, y7.d, true));
            var p6 = (r3.rounding || Math.round)(Math.abs(f10));
            if (s4 = f10 > 0, p6 <= y7.r || !y7.r) {
              p6 <= 1 && c8 > 0 && (y7 = h6[c8 - 1]);
              var v7 = l8[y7.l];
              u4 && (p6 = u4("" + p6)), a3 = "string" == typeof v7 ? v7.replace("%d", p6) : v7(p6, n6, y7.l, s4);
              break;
            }
          }
          if (n6) return a3;
          var M7 = s4 ? l8.future : l8.past;
          return "function" == typeof M7 ? M7(a3) : M7.replace("%s", a3);
        }, n5.to = function(r4, e4) {
          return i5(r4, e4, this, true);
        }, n5.from = function(r4, e4) {
          return i5(r4, e4, this);
        };
        var d6 = function(r4) {
          return r4.$u ? t2.utc() : t2();
        };
        n5.toNow = function(r4) {
          return this.to(d6(this), r4);
        }, n5.fromNow = function(r4) {
          return this.from(d6(this), r4);
        };
      };
    });
  }
});

// ../node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "../node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e3, n5) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n5() : "function" == typeof define && define.amd ? define(n5) : (e3 = "undefined" != typeof globalThis ? globalThis : e3 || self).dayjs_plugin_updateLocale = n5();
    }(exports, function() {
      "use strict";
      return function(e3, n5, t2) {
        t2.updateLocale = function(e4, n6) {
          var o6 = t2.Ls[e4];
          if (o6) return (n6 ? Object.keys(n6) : []).forEach(function(e5) {
            o6[e5] = n6[e5];
          }), o6;
        };
      };
    });
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/utils/delay.js
var require_delay = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/utils/delay.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.delay = void 0;
    function delay(timeout) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve(true);
        }, timeout);
      });
    }
    exports.delay = delay;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/constants/misc.js
var require_misc = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/constants/misc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;
    exports.ONE_HUNDRED = 100;
    exports.ONE_THOUSAND = 1e3;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/constants/time.js
var require_time = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/constants/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;
    exports.ONE_SECOND = 1;
    exports.FIVE_SECONDS = 5;
    exports.TEN_SECONDS = 10;
    exports.THIRTY_SECONDS = 30;
    exports.SIXTY_SECONDS = 60;
    exports.ONE_MINUTE = exports.SIXTY_SECONDS;
    exports.FIVE_MINUTES = exports.ONE_MINUTE * 5;
    exports.TEN_MINUTES = exports.ONE_MINUTE * 10;
    exports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;
    exports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;
    exports.ONE_HOUR = exports.SIXTY_MINUTES;
    exports.THREE_HOURS = exports.ONE_HOUR * 3;
    exports.SIX_HOURS = exports.ONE_HOUR * 6;
    exports.TWELVE_HOURS = exports.ONE_HOUR * 12;
    exports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;
    exports.ONE_DAY = exports.TWENTY_FOUR_HOURS;
    exports.THREE_DAYS = exports.ONE_DAY * 3;
    exports.FIVE_DAYS = exports.ONE_DAY * 5;
    exports.SEVEN_DAYS = exports.ONE_DAY * 7;
    exports.THIRTY_DAYS = exports.ONE_DAY * 30;
    exports.ONE_WEEK = exports.SEVEN_DAYS;
    exports.TWO_WEEKS = exports.ONE_WEEK * 2;
    exports.THREE_WEEKS = exports.ONE_WEEK * 3;
    exports.FOUR_WEEKS = exports.ONE_WEEK * 4;
    exports.ONE_YEAR = exports.ONE_DAY * 365;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/constants/index.js
var require_constants = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_misc(), exports);
    tslib_1.__exportStar(require_time(), exports);
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/utils/convert.js
var require_convert = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/utils/convert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fromMiliseconds = exports.toMiliseconds = void 0;
    var constants_1 = require_constants();
    function toMiliseconds(seconds) {
      return seconds * constants_1.ONE_THOUSAND;
    }
    exports.toMiliseconds = toMiliseconds;
    function fromMiliseconds(miliseconds) {
      return Math.floor(miliseconds / constants_1.ONE_THOUSAND);
    }
    exports.fromMiliseconds = fromMiliseconds;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/utils/index.js
var require_utils = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_delay(), exports);
    tslib_1.__exportStar(require_convert(), exports);
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/watch.js
var require_watch = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Watch = void 0;
    var Watch = class {
      constructor() {
        this.timestamps = /* @__PURE__ */ new Map();
      }
      start(label) {
        if (this.timestamps.has(label)) {
          throw new Error(`Watch already started for label: ${label}`);
        }
        this.timestamps.set(label, { started: Date.now() });
      }
      stop(label) {
        const timestamp = this.get(label);
        if (typeof timestamp.elapsed !== "undefined") {
          throw new Error(`Watch already stopped for label: ${label}`);
        }
        const elapsed = Date.now() - timestamp.started;
        this.timestamps.set(label, { started: timestamp.started, elapsed });
      }
      get(label) {
        const timestamp = this.timestamps.get(label);
        if (typeof timestamp === "undefined") {
          throw new Error(`No timestamp found for label: ${label}`);
        }
        return timestamp;
      }
      elapsed(label) {
        const timestamp = this.get(label);
        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;
        return elapsed;
      }
    };
    exports.Watch = Watch;
    exports.default = Watch;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/types/watch.js
var require_watch2 = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/types/watch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IWatch = void 0;
    var IWatch = class {
    };
    exports.IWatch = IWatch;
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/types/index.js
var require_types = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/types/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_watch2(), exports);
  }
});

// ../node_modules/@walletconnect/time/dist/cjs/index.js
var require_cjs = __commonJS({
  "../node_modules/@walletconnect/time/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_utils(), exports);
    tslib_1.__exportStar(require_watch(), exports);
    tslib_1.__exportStar(require_types(), exports);
    tslib_1.__exportStar(require_constants(), exports);
  }
});

// ../node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "../node_modules/quick-format-unescaped/index.js"(exports, module) {
    "use strict";
    function tryStringify(o6) {
      try {
        return JSON.stringify(o6);
      } catch (e3) {
        return '"[Circular]"';
      }
    }
    module.exports = format;
    function format(f10, args, opts) {
      var ss2 = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f10 === "object" && f10 !== null) {
        var len = args.length + offset;
        if (len === 1) return f10;
        var objects = new Array(len);
        objects[0] = ss2(f10);
        for (var index2 = 1; index2 < len; index2++) {
          objects[index2] = ss2(args[index2]);
        }
        return objects.join(" ");
      }
      if (typeof f10 !== "string") {
        return f10;
      }
      var argLen = args.length;
      if (argLen === 0) return f10;
      var str = "";
      var a3 = 1 - offset;
      var lastPos = -1;
      var flen = f10 && f10.length || 0;
      for (var i5 = 0; i5 < flen; ) {
        if (f10.charCodeAt(i5) === 37 && i5 + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f10.charCodeAt(i5 + 1)) {
            case 100:
            // 'd'
            case 102:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i5)
                str += f10.slice(lastPos, i5);
              str += Number(args[a3]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 105:
              if (a3 >= argLen)
                break;
              if (args[a3] == null) break;
              if (lastPos < i5)
                str += f10.slice(lastPos, i5);
              str += Math.floor(Number(args[a3]));
              lastPos = i5 + 2;
              i5++;
              break;
            case 79:
            // 'O'
            case 111:
            // 'o'
            case 106:
              if (a3 >= argLen)
                break;
              if (args[a3] === void 0) break;
              if (lastPos < i5)
                str += f10.slice(lastPos, i5);
              var type = typeof args[a3];
              if (type === "string") {
                str += "'" + args[a3] + "'";
                lastPos = i5 + 2;
                i5++;
                break;
              }
              if (type === "function") {
                str += args[a3].name || "<anonymous>";
                lastPos = i5 + 2;
                i5++;
                break;
              }
              str += ss2(args[a3]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 115:
              if (a3 >= argLen)
                break;
              if (lastPos < i5)
                str += f10.slice(lastPos, i5);
              str += String(args[a3]);
              lastPos = i5 + 2;
              i5++;
              break;
            case 37:
              if (lastPos < i5)
                str += f10.slice(lastPos, i5);
              str += "%";
              lastPos = i5 + 2;
              i5++;
              a3--;
              break;
          }
          ++a3;
        }
        ++i5;
      }
      if (lastPos === -1)
        return f10;
      else if (lastPos < flen) {
        str += f10.slice(lastPos);
      }
      return str;
    }
  }
});

// ../node_modules/pino/browser.js
var require_browser = __commonJS({
  "../node_modules/pino/browser.js"(exports, module) {
    "use strict";
    var format = require_quick_format_unescaped();
    module.exports = pino;
    var _console = pfGlobalThisOrFallback().console || {};
    var stdSerializers = {
      mapHttpRequest: mock,
      mapHttpResponse: mock,
      wrapRequestSerializer: passthrough,
      wrapResponseSerializer: passthrough,
      wrapErrorSerializer: passthrough,
      req: mock,
      res: mock,
      err: asErrValue
    };
    function shouldSerialize(serialize, serializers) {
      if (Array.isArray(serialize)) {
        const hasToFilter = serialize.filter(function(k7) {
          return k7 !== "!stdSerializers.err";
        });
        return hasToFilter;
      } else if (serialize === true) {
        return Object.keys(serializers);
      }
      return false;
    }
    function pino(opts) {
      opts = opts || {};
      opts.browser = opts.browser || {};
      const transmit2 = opts.browser.transmit;
      if (transmit2 && typeof transmit2.send !== "function") {
        throw Error("pino: transmit option must have a send function");
      }
      const proto = opts.browser.write || _console;
      if (opts.browser.write) opts.browser.asObject = true;
      const serializers = opts.serializers || {};
      const serialize = shouldSerialize(opts.browser.serialize, serializers);
      let stdErrSerialize = opts.browser.serialize;
      if (Array.isArray(opts.browser.serialize) && opts.browser.serialize.indexOf("!stdSerializers.err") > -1) stdErrSerialize = false;
      const levels = ["error", "fatal", "warn", "info", "debug", "trace"];
      if (typeof proto === "function") {
        proto.error = proto.fatal = proto.warn = proto.info = proto.debug = proto.trace = proto;
      }
      if (opts.enabled === false) opts.level = "silent";
      const level = opts.level || "info";
      const logger = Object.create(proto);
      if (!logger.log) logger.log = noop;
      Object.defineProperty(logger, "levelVal", {
        get: getLevelVal
      });
      Object.defineProperty(logger, "level", {
        get: getLevel,
        set: setLevel
      });
      const setOpts = {
        transmit: transmit2,
        serialize,
        asObject: opts.browser.asObject,
        levels,
        timestamp: getTimeFunction(opts)
      };
      logger.levels = pino.levels;
      logger.level = level;
      logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;
      logger.serializers = serializers;
      logger._serialize = serialize;
      logger._stdErrSerialize = stdErrSerialize;
      logger.child = child;
      if (transmit2) logger._logEvent = createLogEventShape();
      function getLevelVal() {
        return this.level === "silent" ? Infinity : this.levels.values[this.level];
      }
      function getLevel() {
        return this._level;
      }
      function setLevel(level2) {
        if (level2 !== "silent" && !this.levels.values[level2]) {
          throw Error("unknown level " + level2);
        }
        this._level = level2;
        set2(setOpts, logger, "error", "log");
        set2(setOpts, logger, "fatal", "error");
        set2(setOpts, logger, "warn", "error");
        set2(setOpts, logger, "info", "log");
        set2(setOpts, logger, "debug", "log");
        set2(setOpts, logger, "trace", "log");
      }
      function child(bindings, childOptions) {
        if (!bindings) {
          throw new Error("missing bindings for child Pino");
        }
        childOptions = childOptions || {};
        if (serialize && bindings.serializers) {
          childOptions.serializers = bindings.serializers;
        }
        const childOptionsSerializers = childOptions.serializers;
        if (serialize && childOptionsSerializers) {
          var childSerializers = Object.assign({}, serializers, childOptionsSerializers);
          var childSerialize = opts.browser.serialize === true ? Object.keys(childSerializers) : serialize;
          delete bindings.serializers;
          applySerializers([bindings], childSerialize, childSerializers, this._stdErrSerialize);
        }
        function Child(parent) {
          this._childLevel = (parent._childLevel | 0) + 1;
          this.error = bind(parent, bindings, "error");
          this.fatal = bind(parent, bindings, "fatal");
          this.warn = bind(parent, bindings, "warn");
          this.info = bind(parent, bindings, "info");
          this.debug = bind(parent, bindings, "debug");
          this.trace = bind(parent, bindings, "trace");
          if (childSerializers) {
            this.serializers = childSerializers;
            this._serialize = childSerialize;
          }
          if (transmit2) {
            this._logEvent = createLogEventShape(
              [].concat(parent._logEvent.bindings, bindings)
            );
          }
        }
        Child.prototype = this;
        return new Child(this);
      }
      return logger;
    }
    pino.levels = {
      values: {
        fatal: 60,
        error: 50,
        warn: 40,
        info: 30,
        debug: 20,
        trace: 10
      },
      labels: {
        10: "trace",
        20: "debug",
        30: "info",
        40: "warn",
        50: "error",
        60: "fatal"
      }
    };
    pino.stdSerializers = stdSerializers;
    pino.stdTimeFunctions = Object.assign({}, { nullTime, epochTime, unixTime, isoTime });
    function set2(opts, logger, level, fallback5) {
      const proto = Object.getPrototypeOf(logger);
      logger[level] = logger.levelVal > logger.levels.values[level] ? noop : proto[level] ? proto[level] : _console[level] || _console[fallback5] || noop;
      wrap(opts, logger, level);
    }
    function wrap(opts, logger, level) {
      if (!opts.transmit && logger[level] === noop) return;
      logger[level] = /* @__PURE__ */ function(write) {
        return function LOG() {
          const ts2 = opts.timestamp();
          const args = new Array(arguments.length);
          const proto = Object.getPrototypeOf && Object.getPrototypeOf(this) === _console ? _console : this;
          for (var i5 = 0; i5 < args.length; i5++) args[i5] = arguments[i5];
          if (opts.serialize && !opts.asObject) {
            applySerializers(args, this._serialize, this.serializers, this._stdErrSerialize);
          }
          if (opts.asObject) write.call(proto, asObject(this, level, args, ts2));
          else write.apply(proto, args);
          if (opts.transmit) {
            const transmitLevel = opts.transmit.level || logger.level;
            const transmitValue = pino.levels.values[transmitLevel];
            const methodValue = pino.levels.values[level];
            if (methodValue < transmitValue) return;
            transmit(this, {
              ts: ts2,
              methodLevel: level,
              methodValue,
              transmitLevel,
              transmitValue: pino.levels.values[opts.transmit.level || logger.level],
              send: opts.transmit.send,
              val: logger.levelVal
            }, args);
          }
        };
      }(logger[level]);
    }
    function asObject(logger, level, args, ts2) {
      if (logger._serialize) applySerializers(args, logger._serialize, logger.serializers, logger._stdErrSerialize);
      const argsCloned = args.slice();
      let msg = argsCloned[0];
      const o6 = {};
      if (ts2) {
        o6.time = ts2;
      }
      o6.level = pino.levels.values[level];
      let lvl = (logger._childLevel | 0) + 1;
      if (lvl < 1) lvl = 1;
      if (msg !== null && typeof msg === "object") {
        while (lvl-- && typeof argsCloned[0] === "object") {
          Object.assign(o6, argsCloned.shift());
        }
        msg = argsCloned.length ? format(argsCloned.shift(), argsCloned) : void 0;
      } else if (typeof msg === "string") msg = format(argsCloned.shift(), argsCloned);
      if (msg !== void 0) o6.msg = msg;
      return o6;
    }
    function applySerializers(args, serialize, serializers, stdErrSerialize) {
      for (const i5 in args) {
        if (stdErrSerialize && args[i5] instanceof Error) {
          args[i5] = pino.stdSerializers.err(args[i5]);
        } else if (typeof args[i5] === "object" && !Array.isArray(args[i5])) {
          for (const k7 in args[i5]) {
            if (serialize && serialize.indexOf(k7) > -1 && k7 in serializers) {
              args[i5][k7] = serializers[k7](args[i5][k7]);
            }
          }
        }
      }
    }
    function bind(parent, bindings, level) {
      return function() {
        const args = new Array(1 + arguments.length);
        args[0] = bindings;
        for (var i5 = 1; i5 < args.length; i5++) {
          args[i5] = arguments[i5 - 1];
        }
        return parent[level].apply(this, args);
      };
    }
    function transmit(logger, opts, args) {
      const send = opts.send;
      const ts2 = opts.ts;
      const methodLevel = opts.methodLevel;
      const methodValue = opts.methodValue;
      const val = opts.val;
      const bindings = logger._logEvent.bindings;
      applySerializers(
        args,
        logger._serialize || Object.keys(logger.serializers),
        logger.serializers,
        logger._stdErrSerialize === void 0 ? true : logger._stdErrSerialize
      );
      logger._logEvent.ts = ts2;
      logger._logEvent.messages = args.filter(function(arg) {
        return bindings.indexOf(arg) === -1;
      });
      logger._logEvent.level.label = methodLevel;
      logger._logEvent.level.value = methodValue;
      send(methodLevel, logger._logEvent, val);
      logger._logEvent = createLogEventShape(bindings);
    }
    function createLogEventShape(bindings) {
      return {
        ts: 0,
        messages: [],
        bindings: bindings || [],
        level: { label: "", value: 0 }
      };
    }
    function asErrValue(err) {
      const obj = {
        type: err.constructor.name,
        msg: err.message,
        stack: err.stack
      };
      for (const key in err) {
        if (obj[key] === void 0) {
          obj[key] = err[key];
        }
      }
      return obj;
    }
    function getTimeFunction(opts) {
      if (typeof opts.timestamp === "function") {
        return opts.timestamp;
      }
      if (opts.timestamp === false) {
        return nullTime;
      }
      return epochTime;
    }
    function mock() {
      return {};
    }
    function passthrough(a3) {
      return a3;
    }
    function noop() {
    }
    function nullTime() {
      return false;
    }
    function epochTime() {
      return Date.now();
    }
    function unixTime() {
      return Math.round(Date.now() / 1e3);
    }
    function isoTime() {
      return new Date(Date.now()).toISOString();
    }
    function pfGlobalThisOrFallback() {
      function defd(o6) {
        return typeof o6 !== "undefined" && o6;
      }
      try {
        if (typeof globalThis !== "undefined") return globalThis;
        Object.defineProperty(Object.prototype, "globalThis", {
          get: function() {
            delete Object.prototype.globalThis;
            return this.globalThis = this;
          },
          configurable: true
        });
        return globalThis;
      } catch (e3) {
        return defd(self) || defd(window) || defd(this) || {};
      }
    }
  }
});

// ../node_modules/@walletconnect/window-getters/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "../node_modules/@walletconnect/window-getters/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;
    function getFromWindow(name2) {
      let res = void 0;
      if (typeof window !== "undefined" && typeof window[name2] !== "undefined") {
        res = window[name2];
      }
      return res;
    }
    exports.getFromWindow = getFromWindow;
    function getFromWindowOrThrow(name2) {
      const res = getFromWindow(name2);
      if (!res) {
        throw new Error(`${name2} is not defined in Window`);
      }
      return res;
    }
    exports.getFromWindowOrThrow = getFromWindowOrThrow;
    function getDocumentOrThrow() {
      return getFromWindowOrThrow("document");
    }
    exports.getDocumentOrThrow = getDocumentOrThrow;
    function getDocument() {
      return getFromWindow("document");
    }
    exports.getDocument = getDocument;
    function getNavigatorOrThrow() {
      return getFromWindowOrThrow("navigator");
    }
    exports.getNavigatorOrThrow = getNavigatorOrThrow;
    function getNavigator() {
      return getFromWindow("navigator");
    }
    exports.getNavigator = getNavigator;
    function getLocationOrThrow() {
      return getFromWindowOrThrow("location");
    }
    exports.getLocationOrThrow = getLocationOrThrow;
    function getLocation() {
      return getFromWindow("location");
    }
    exports.getLocation = getLocation;
    function getCryptoOrThrow() {
      return getFromWindowOrThrow("crypto");
    }
    exports.getCryptoOrThrow = getCryptoOrThrow;
    function getCrypto() {
      return getFromWindow("crypto");
    }
    exports.getCrypto = getCrypto;
    function getLocalStorageOrThrow() {
      return getFromWindowOrThrow("localStorage");
    }
    exports.getLocalStorageOrThrow = getLocalStorageOrThrow;
    function getLocalStorage() {
      return getFromWindow("localStorage");
    }
    exports.getLocalStorage = getLocalStorage;
  }
});

// ../node_modules/@walletconnect/window-metadata/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "../node_modules/@walletconnect/window-metadata/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWindowMetadata = void 0;
    var window_getters_1 = require_cjs2();
    function getWindowMetadata() {
      let doc;
      let loc;
      try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
      } catch (e3) {
        return null;
      }
      function getIcons() {
        const links = doc.getElementsByTagName("link");
        const icons2 = [];
        for (let i5 = 0; i5 < links.length; i5++) {
          const link = links[i5];
          const rel = link.getAttribute("rel");
          if (rel) {
            if (rel.toLowerCase().indexOf("icon") > -1) {
              const href = link.getAttribute("href");
              if (href) {
                if (href.toLowerCase().indexOf("https:") === -1 && href.toLowerCase().indexOf("http:") === -1 && href.indexOf("//") !== 0) {
                  let absoluteHref = loc.protocol + "//" + loc.host;
                  if (href.indexOf("/") === 0) {
                    absoluteHref += href;
                  } else {
                    const path = loc.pathname.split("/");
                    path.pop();
                    const finalPath = path.join("/");
                    absoluteHref += finalPath + "/" + href;
                  }
                  icons2.push(absoluteHref);
                } else if (href.indexOf("//") === 0) {
                  const absoluteUrl = loc.protocol + href;
                  icons2.push(absoluteUrl);
                } else {
                  icons2.push(href);
                }
              }
            }
          }
        }
        return icons2;
      }
      function getWindowMetadataOfAny(...args) {
        const metaTags = doc.getElementsByTagName("meta");
        for (let i5 = 0; i5 < metaTags.length; i5++) {
          const tag = metaTags[i5];
          const attributes = ["itemprop", "property", "name"].map((target) => tag.getAttribute(target)).filter((attr) => {
            if (attr) {
              return args.includes(attr);
            }
            return false;
          });
          if (attributes.length && attributes) {
            const content = tag.getAttribute("content");
            if (content) {
              return content;
            }
          }
        }
        return "";
      }
      function getName() {
        let name3 = getWindowMetadataOfAny("name", "og:site_name", "og:title", "twitter:title");
        if (!name3) {
          name3 = doc.title;
        }
        return name3;
      }
      function getDescription() {
        const description2 = getWindowMetadataOfAny("description", "og:description", "twitter:description", "keywords");
        return description2;
      }
      const name2 = getName();
      const description = getDescription();
      const url = loc.origin;
      const icons = getIcons();
      const meta = {
        description,
        url,
        icons,
        name: name2
      };
      return meta;
    }
    exports.getWindowMetadata = getWindowMetadata;
  }
});

// ../node_modules/@walletconnect/environment/dist/cjs/crypto.js
var require_crypto = __commonJS({
  "../node_modules/@walletconnect/environment/dist/cjs/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;
    function getBrowerCrypto() {
      return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
    }
    exports.getBrowerCrypto = getBrowerCrypto;
    function getSubtleCrypto() {
      const browserCrypto = getBrowerCrypto();
      return browserCrypto.subtle || browserCrypto.webkitSubtle;
    }
    exports.getSubtleCrypto = getSubtleCrypto;
    function isBrowserCryptoAvailable() {
      return !!getBrowerCrypto() && !!getSubtleCrypto();
    }
    exports.isBrowserCryptoAvailable = isBrowserCryptoAvailable;
  }
});

// ../node_modules/@walletconnect/environment/dist/cjs/env.js
var require_env = __commonJS({
  "../node_modules/@walletconnect/environment/dist/cjs/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isBrowser = exports.isNode = exports.isReactNative = void 0;
    function isReactNative() {
      return typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative";
    }
    exports.isReactNative = isReactNative;
    function isNode2() {
      return typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    }
    exports.isNode = isNode2;
    function isBrowser() {
      return !isReactNative() && !isNode2();
    }
    exports.isBrowser = isBrowser;
  }
});

// ../node_modules/@walletconnect/environment/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "../node_modules/@walletconnect/environment/dist/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_crypto(), exports);
    tslib_1.__exportStar(require_env(), exports);
  }
});

// ../node_modules/ws/browser.js
var require_browser2 = __commonJS({
  "../node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// ../node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "../node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F6() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F6.prototype = __global__;
      return new F6();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g5 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g5,
          iterable: "Symbol" in g5 && "iterator" in Symbol,
          blob: "FileReader" in g5 && "Blob" in g5 && function() {
            try {
              new Blob();
              return true;
            } catch (e3) {
              return false;
            }
          }(),
          formData: "FormData" in g5,
          arrayBuffer: "ArrayBuffer" in g5
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name2) {
          if (typeof name2 !== "string") {
            name2 = String(name2);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
            throw new TypeError('Invalid character in header field name: "' + name2 + '"');
          }
          return name2.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers(headers) {
          this.map = {};
          if (headers instanceof Headers) {
            headers.forEach(function(value, name2) {
              this.append(name2, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name2) {
              this.append(name2, headers[name2]);
            }, this);
          }
        }
        Headers.prototype.append = function(name2, value) {
          name2 = normalizeName(name2);
          value = normalizeValue(value);
          var oldValue = this.map[name2];
          this.map[name2] = oldValue ? oldValue + ", " + value : value;
        };
        Headers.prototype["delete"] = function(name2) {
          delete this.map[normalizeName(name2)];
        };
        Headers.prototype.get = function(name2) {
          name2 = normalizeName(name2);
          return this.has(name2) ? this.map[name2] : null;
        };
        Headers.prototype.has = function(name2) {
          return this.map.hasOwnProperty(normalizeName(name2));
        };
        Headers.prototype.set = function(name2, value) {
          this.map[normalizeName(name2)] = normalizeValue(value);
        };
        Headers.prototype.forEach = function(callback, thisArg) {
          for (var name2 in this.map) {
            if (this.map.hasOwnProperty(name2)) {
              callback.call(thisArg, this.map[name2], name2, this);
            }
          }
        };
        Headers.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push(name2);
          });
          return iteratorFor(items);
        };
        Headers.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name2) {
            items.push([name2, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i5 = 0; i5 < view.length; i5++) {
            chars[i5] = String.fromCharCode(view[i5]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode10);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request2(input, options) {
          if (!(this instanceof Request2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request2) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g5) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request2.prototype.clone = function() {
          return new Request2(this, { body: this._bodyInit });
        };
        function decode10(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split4 = bytes.split("=");
              var name2 = split4.shift().replace(/\+/g, " ");
              var value = split4.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name2), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request2.prototype);
        function Response2(bodyInit, options) {
          if (!(this instanceof Response2)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response2.prototype);
        Response2.prototype.clone = function() {
          return new Response2(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };
        Response2.error = function() {
          var response = new Response2(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response2.redirect = function(url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response2(null, { status, headers: { location: url } });
        };
        exports2.DOMException = g5.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name2) {
            this.message = message;
            this.name = name2;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request2(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response2(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g5.location.href ? g5.location.href : url;
              } catch (e3) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers || g5.Headers && init.headers instanceof g5.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name2) {
                names.push(normalizeName(name2));
                xhr.setRequestHeader(name2, normalizeValue(init.headers[name2]));
              });
              request.headers.forEach(function(value, name2) {
                if (names.indexOf(name2) === -1) {
                  xhr.setRequestHeader(name2, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name2) {
                xhr.setRequestHeader(name2, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g5.fetch) {
          g5.fetch = fetch2;
          g5.Headers = Headers;
          g5.Request = Request2;
          g5.Response = Response2;
        }
        exports2.Headers = Headers;
        exports2.Request = Request2;
        exports2.Response = Response2;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil = {
  WC_NAME_SUFFIX: ".reown.id",
  WC_NAME_SUFFIX_LEGACY: ".wcn.id",
  BLOCKCHAIN_API_RPC_URL: "https://rpc.walletconnect.org",
  PULSE_API_URL: "https://pulse.walletconnect.org",
  W3M_API_URL: "https://api.web3modal.org",
  CONNECTOR_ID: {
    WALLET_CONNECT: "walletConnect",
    INJECTED: "injected",
    WALLET_STANDARD: "announced",
    COINBASE: "coinbaseWallet",
    COINBASE_SDK: "coinbaseWalletSDK",
    SAFE: "safe",
    LEDGER: "ledger",
    OKX: "okx",
    EIP6963: "eip6963",
    AUTH: "ID_AUTH"
  },
  CONNECTOR_NAMES: {
    AUTH: "Auth"
  },
  AUTH_CONNECTOR_SUPPORTED_CHAINS: ["eip155", "solana"],
  LIMITS: {
    PENDING_TRANSACTIONS: 99
  },
  CHAIN: {
    EVM: "eip155",
    SOLANA: "solana",
    POLKADOT: "polkadot",
    BITCOIN: "bip122"
  },
  CHAIN_NAME_MAP: {
    eip155: "EVM Networks",
    solana: "Solana",
    polkadot: "Polkadot",
    bip122: "Bitcoin"
  },
  ADAPTER_TYPES: {
    BITCOIN: "bitcoin",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5"
  },
  USDT_CONTRACT_ADDRESSES: [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
    "0x919C1c267BC06a7039e03fcc2eF738525769109c",
    "0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e",
    "0x55d398326f99059fF775485246999027B3197955",
    "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
  ],
  HTTP_STATUS_CODES: {
    SERVICE_UNAVAILABLE: 503,
    FORBIDDEN: 403
  },
  UNSUPPORTED_NETWORK_NAME: "Unknown Network"
};

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/DateUtil.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_en = __toESM(require_en(), 1);
var import_relativeTime = __toESM(require_relativeTime(), 1);
var import_updateLocale = __toESM(require_updateLocale(), 1);
import_dayjs.default.extend(import_relativeTime.default);
import_dayjs.default.extend(import_updateLocale.default);
var localeObject = {
  ...import_en.default,
  name: "en-web3-modal",
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%d sec",
    m: "1 min",
    mm: "%d min",
    h: "1 hr",
    hh: "%d hrs",
    d: "1 d",
    dd: "%d d",
    M: "1 mo",
    MM: "%d mo",
    y: "1 yr",
    yy: "%d yr"
  }
};
import_dayjs.default.locale("en-web3-modal", localeObject);

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil = {
  caipNetworkIdToNumber(caipnetworkId) {
    return caipnetworkId ? Number(caipnetworkId.split(":")[1]) : void 0;
  },
  parseEvmChainId(chainId) {
    return typeof chainId === "string" ? this.caipNetworkIdToNumber(chainId) : chainId;
  },
  getNetworksByNamespace(networks, namespace) {
    return (networks == null ? void 0 : networks.filter((network) => network.chainNamespace === namespace)) || [];
  },
  getFirstNetworkByNamespace(networks, namespace) {
    return this.getNetworksByNamespace(networks, namespace)[0];
  }
};

// ../node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n5) {
    var x8 = this;
    if (!(x8 instanceof Big2)) return n5 === UNDEFINED ? _Big_() : new Big2(n5);
    if (n5 instanceof Big2) {
      x8.s = n5.s;
      x8.e = n5.e;
      x8.c = n5.c.slice();
    } else {
      if (typeof n5 !== "string") {
        if (Big2.strict === true && typeof n5 !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n5 = n5 === 0 && 1 / n5 < 0 ? "-0" : String(n5);
      }
      parse(x8, n5);
    }
    x8.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse(x8, n5) {
  var e3, i5, nl;
  if (!NUMERIC.test(n5)) {
    throw Error(INVALID + "number");
  }
  x8.s = n5.charAt(0) == "-" ? (n5 = n5.slice(1), -1) : 1;
  if ((e3 = n5.indexOf(".")) > -1) n5 = n5.replace(".", "");
  if ((i5 = n5.search(/e/i)) > 0) {
    if (e3 < 0) e3 = i5;
    e3 += +n5.slice(i5 + 1);
    n5 = n5.substring(0, i5);
  } else if (e3 < 0) {
    e3 = n5.length;
  }
  nl = n5.length;
  for (i5 = 0; i5 < nl && n5.charAt(i5) == "0"; ) ++i5;
  if (i5 == nl) {
    x8.c = [x8.e = 0];
  } else {
    for (; nl > 0 && n5.charAt(--nl) == "0"; ) ;
    x8.e = e3 - i5 - 1;
    x8.c = [];
    for (e3 = 0; i5 <= nl; ) x8.c[e3++] = +n5.charAt(i5++);
  }
  return x8;
}
function round(x8, sd, rm, more) {
  var xc = x8.c;
  if (rm === UNDEFINED) rm = x8.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
    xc.length = 1;
    if (more) {
      x8.e = x8.e - sd + 1;
      xc[0] = 1;
    } else {
      xc[0] = x8.e = 0;
    }
  } else if (sd < xc.length) {
    more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
    xc.length = sd;
    if (more) {
      for (; ++xc[--sd] > 9; ) {
        xc[sd] = 0;
        if (sd === 0) {
          ++x8.e;
          xc.unshift(1);
          break;
        }
      }
    }
    for (sd = xc.length; !xc[--sd]; ) xc.pop();
  }
  return x8;
}
function stringify2(x8, doExponential, isNonzero) {
  var e3 = x8.e, s4 = x8.c.join(""), n5 = s4.length;
  if (doExponential) {
    s4 = s4.charAt(0) + (n5 > 1 ? "." + s4.slice(1) : "") + (e3 < 0 ? "e" : "e+") + e3;
  } else if (e3 < 0) {
    for (; ++e3; ) s4 = "0" + s4;
    s4 = "0." + s4;
  } else if (e3 > 0) {
    if (++e3 > n5) {
      for (e3 -= n5; e3--; ) s4 += "0";
    } else if (e3 < n5) {
      s4 = s4.slice(0, e3) + "." + s4.slice(e3);
    }
  } else if (n5 > 1) {
    s4 = s4.charAt(0) + "." + s4.slice(1);
  }
  return x8.s < 0 && isNonzero ? "-" + s4 : s4;
}
P.abs = function() {
  var x8 = new this.constructor(this);
  x8.s = 1;
  return x8;
};
P.cmp = function(y7) {
  var isneg, x8 = this, xc = x8.c, yc = (y7 = new x8.constructor(y7)).c, i5 = x8.s, j4 = y7.s, k7 = x8.e, l8 = y7.e;
  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j4 : i5;
  if (i5 != j4) return i5;
  isneg = i5 < 0;
  if (k7 != l8) return k7 > l8 ^ isneg ? 1 : -1;
  j4 = (k7 = xc.length) < (l8 = yc.length) ? k7 : l8;
  for (i5 = -1; ++i5 < j4; ) {
    if (xc[i5] != yc[i5]) return xc[i5] > yc[i5] ^ isneg ? 1 : -1;
  }
  return k7 == l8 ? 0 : k7 > l8 ^ isneg ? 1 : -1;
};
P.div = function(y7) {
  var x8 = this, Big2 = x8.constructor, a3 = x8.c, b6 = (y7 = new Big2(y7)).c, k7 = x8.s == y7.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b6[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a3[0]) {
    y7.s = k7;
    y7.c = [y7.e = 0];
    return y7;
  }
  var bl, bt5, n5, cmp, ri3, bz = b6.slice(), ai3 = bl = b6.length, al = a3.length, r3 = a3.slice(0, bl), rl = r3.length, q3 = y7, qc = q3.c = [], qi3 = 0, p6 = dp + (q3.e = x8.e - y7.e) + 1;
  q3.s = k7;
  k7 = p6 < 0 ? 0 : p6;
  bz.unshift(0);
  for (; rl++ < bl; ) r3.push(0);
  do {
    for (n5 = 0; n5 < 10; n5++) {
      if (bl != (rl = r3.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri3 = -1, cmp = 0; ++ri3 < bl; ) {
          if (b6[ri3] != r3[ri3]) {
            cmp = b6[ri3] > r3[ri3] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt5 = rl == bl ? b6 : bz; rl; ) {
          if (r3[--rl] < bt5[rl]) {
            ri3 = rl;
            for (; ri3 && !r3[--ri3]; ) r3[ri3] = 9;
            --r3[ri3];
            r3[rl] += 10;
          }
          r3[rl] -= bt5[rl];
        }
        for (; !r3[0]; ) r3.shift();
      } else {
        break;
      }
    }
    qc[qi3++] = cmp ? n5 : ++n5;
    if (r3[0] && cmp) r3[rl] = a3[ai3] || 0;
    else r3 = [a3[ai3]];
  } while ((ai3++ < al || r3[0] !== UNDEFINED) && k7--);
  if (!qc[0] && qi3 != 1) {
    qc.shift();
    q3.e--;
    p6--;
  }
  if (qi3 > p6) round(q3, p6, Big2.RM, r3[0] !== UNDEFINED);
  return q3;
};
P.eq = function(y7) {
  return this.cmp(y7) === 0;
};
P.gt = function(y7) {
  return this.cmp(y7) > 0;
};
P.gte = function(y7) {
  return this.cmp(y7) > -1;
};
P.lt = function(y7) {
  return this.cmp(y7) < 0;
};
P.lte = function(y7) {
  return this.cmp(y7) < 1;
};
P.minus = P.sub = function(y7) {
  var i5, j4, t2, xlty, x8 = this, Big2 = x8.constructor, a3 = x8.s, b6 = (y7 = new Big2(y7)).s;
  if (a3 != b6) {
    y7.s = -b6;
    return x8.plus(y7);
  }
  var xc = x8.c.slice(), xe6 = x8.e, yc = y7.c, ye4 = y7.e;
  if (!xc[0] || !yc[0]) {
    if (yc[0]) {
      y7.s = -b6;
    } else if (xc[0]) {
      y7 = new Big2(x8);
    } else {
      y7.s = 1;
    }
    return y7;
  }
  if (a3 = xe6 - ye4) {
    if (xlty = a3 < 0) {
      a3 = -a3;
      t2 = xc;
    } else {
      ye4 = xe6;
      t2 = yc;
    }
    t2.reverse();
    for (b6 = a3; b6--; ) t2.push(0);
    t2.reverse();
  } else {
    j4 = ((xlty = xc.length < yc.length) ? xc : yc).length;
    for (a3 = b6 = 0; b6 < j4; b6++) {
      if (xc[b6] != yc[b6]) {
        xlty = xc[b6] < yc[b6];
        break;
      }
    }
  }
  if (xlty) {
    t2 = xc;
    xc = yc;
    yc = t2;
    y7.s = -y7.s;
  }
  if ((b6 = (j4 = yc.length) - (i5 = xc.length)) > 0) for (; b6--; ) xc[i5++] = 0;
  for (b6 = i5; j4 > a3; ) {
    if (xc[--j4] < yc[j4]) {
      for (i5 = j4; i5 && !xc[--i5]; ) xc[i5] = 9;
      --xc[i5];
      xc[j4] += 10;
    }
    xc[j4] -= yc[j4];
  }
  for (; xc[--b6] === 0; ) xc.pop();
  for (; xc[0] === 0; ) {
    xc.shift();
    --ye4;
  }
  if (!xc[0]) {
    y7.s = 1;
    xc = [ye4 = 0];
  }
  y7.c = xc;
  y7.e = ye4;
  return y7;
};
P.mod = function(y7) {
  var ygtx, x8 = this, Big2 = x8.constructor, a3 = x8.s, b6 = (y7 = new Big2(y7)).s;
  if (!y7.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x8.s = y7.s = 1;
  ygtx = y7.cmp(x8) == 1;
  x8.s = a3;
  y7.s = b6;
  if (ygtx) return new Big2(x8);
  a3 = Big2.DP;
  b6 = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x8 = x8.div(y7);
  Big2.DP = a3;
  Big2.RM = b6;
  return this.minus(x8.times(y7));
};
P.neg = function() {
  var x8 = new this.constructor(this);
  x8.s = -x8.s;
  return x8;
};
P.plus = P.add = function(y7) {
  var e3, k7, t2, x8 = this, Big2 = x8.constructor;
  y7 = new Big2(y7);
  if (x8.s != y7.s) {
    y7.s = -y7.s;
    return x8.minus(y7);
  }
  var xe6 = x8.e, xc = x8.c, ye4 = y7.e, yc = y7.c;
  if (!xc[0] || !yc[0]) {
    if (!yc[0]) {
      if (xc[0]) {
        y7 = new Big2(x8);
      } else {
        y7.s = x8.s;
      }
    }
    return y7;
  }
  xc = xc.slice();
  if (e3 = xe6 - ye4) {
    if (e3 > 0) {
      ye4 = xe6;
      t2 = yc;
    } else {
      e3 = -e3;
      t2 = xc;
    }
    t2.reverse();
    for (; e3--; ) t2.push(0);
    t2.reverse();
  }
  if (xc.length - yc.length < 0) {
    t2 = yc;
    yc = xc;
    xc = t2;
  }
  e3 = yc.length;
  for (k7 = 0; e3; xc[e3] %= 10) k7 = (xc[--e3] = xc[e3] + yc[e3] + k7) / 10 | 0;
  if (k7) {
    xc.unshift(k7);
    ++ye4;
  }
  for (e3 = xc.length; xc[--e3] === 0; ) xc.pop();
  y7.c = xc;
  y7.e = ye4;
  return y7;
};
P.pow = function(n5) {
  var x8 = this, one = new x8.constructor("1"), y7 = one, isneg = n5 < 0;
  if (n5 !== ~~n5 || n5 < -MAX_POWER || n5 > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg) n5 = -n5;
  for (; ; ) {
    if (n5 & 1) y7 = y7.times(x8);
    n5 >>= 1;
    if (!n5) break;
    x8 = x8.times(x8);
  }
  return isneg ? one.div(y7) : y7;
};
P.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round(new this.constructor(this), sd, rm);
};
P.round = function(dp, rm) {
  if (dp === UNDEFINED) dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function() {
  var r3, c8, t2, x8 = this, Big2 = x8.constructor, s4 = x8.s, e3 = x8.e, half = new Big2("0.5");
  if (!x8.c[0]) return new Big2(x8);
  if (s4 < 0) {
    throw Error(NAME + "No square root");
  }
  s4 = Math.sqrt(+stringify2(x8, true, true));
  if (s4 === 0 || s4 === 1 / 0) {
    c8 = x8.c.join("");
    if (!(c8.length + e3 & 1)) c8 += "0";
    s4 = Math.sqrt(c8);
    e3 = ((e3 + 1) / 2 | 0) - (e3 < 0 || e3 & 1);
    r3 = new Big2((s4 == 1 / 0 ? "5e" : (s4 = s4.toExponential()).slice(0, s4.indexOf("e") + 1)) + e3);
  } else {
    r3 = new Big2(s4 + "");
  }
  e3 = r3.e + (Big2.DP += 4);
  do {
    t2 = r3;
    r3 = half.times(t2.plus(x8.div(t2)));
  } while (t2.c.slice(0, e3).join("") !== r3.c.slice(0, e3).join(""));
  return round(r3, (Big2.DP -= 4) + r3.e + 1, Big2.RM);
};
P.times = P.mul = function(y7) {
  var c8, x8 = this, Big2 = x8.constructor, xc = x8.c, yc = (y7 = new Big2(y7)).c, a3 = xc.length, b6 = yc.length, i5 = x8.e, j4 = y7.e;
  y7.s = x8.s == y7.s ? 1 : -1;
  if (!xc[0] || !yc[0]) {
    y7.c = [y7.e = 0];
    return y7;
  }
  y7.e = i5 + j4;
  if (a3 < b6) {
    c8 = xc;
    xc = yc;
    yc = c8;
    j4 = a3;
    a3 = b6;
    b6 = j4;
  }
  for (c8 = new Array(j4 = a3 + b6); j4--; ) c8[j4] = 0;
  for (i5 = b6; i5--; ) {
    b6 = 0;
    for (j4 = a3 + i5; j4 > i5; ) {
      b6 = c8[j4] + yc[i5] * xc[j4 - i5 - 1] + b6;
      c8[j4--] = b6 % 10;
      b6 = b6 / 10 | 0;
    }
    c8[j4] = b6;
  }
  if (b6) ++y7.e;
  else c8.shift();
  for (i5 = c8.length; !c8[--i5]; ) c8.pop();
  y7.c = c8;
  return y7;
};
P.toExponential = function(dp, rm) {
  var x8 = this, n5 = x8.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x8 = round(new x8.constructor(x8), ++dp, rm);
    for (; x8.c.length < dp; ) x8.c.push(0);
  }
  return stringify2(x8, true, !!n5);
};
P.toFixed = function(dp, rm) {
  var x8 = this, n5 = x8.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x8 = round(new x8.constructor(x8), dp + x8.e + 1, rm);
    for (dp = dp + x8.e + 1; x8.c.length < dp; ) x8.c.push(0);
  }
  return stringify2(x8, false, !!n5);
};
P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
  var x8 = this, Big2 = x8.constructor;
  return stringify2(x8, x8.e <= Big2.NE || x8.e >= Big2.PE, !!x8.c[0]);
};
P.toNumber = function() {
  var n5 = +stringify2(this, true, true);
  if (this.constructor.strict === true && !this.eq(n5.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n5;
};
P.toPrecision = function(sd, rm) {
  var x8 = this, Big2 = x8.constructor, n5 = x8.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x8 = round(new Big2(x8), sd, rm);
    for (; x8.c.length < sd; ) x8.c.push(0);
  }
  return stringify2(x8, sd <= x8.e || x8.e <= Big2.NE || x8.e >= Big2.PE, !!n5);
};
P.valueOf = function() {
  var x8 = this, Big2 = x8.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify2(x8, x8.e <= Big2.NE || x8.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/NumberUtil.js
var NumberUtil = {
  bigNumber(value) {
    if (!value) {
      return new big_default(0);
    }
    return new big_default(value);
  },
  multiply(a3, b6) {
    if (a3 === void 0 || b6 === void 0) {
      return new big_default(0);
    }
    const aBigNumber = new big_default(a3);
    const bBigNumber = new big_default(b6);
    return aBigNumber.times(bBigNumber);
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  },
  parseLocalStringToNumber(value) {
    if (value === void 0) {
      return 0;
    }
    return parseFloat(value.replace(/,/gu, ""));
  }
};

// ../node_modules/@reown/appkit-common/dist/esm/src/contracts/erc20.js
var erc20ABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// ../node_modules/@reown/appkit-common/dist/esm/src/contracts/swap.js
var swapABI = [
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    outputs: [{ type: "bool" }]
  }
];

// ../node_modules/@reown/appkit-common/dist/esm/src/contracts/usdt.js
var usdtABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: []
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/ContractUtil.js
var ContractUtil = {
  getERC20Abi: (tokenAddress) => {
    if (ConstantsUtil.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)) {
      return usdtABI;
    }
    return erc20ABI;
  },
  getSwapAbi: () => swapABI
};

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/EmitterUtil.js
var Emitter = class _Emitter {
  on(eventName, callback) {
    var _a;
    if (!_Emitter.eventListeners.has(eventName)) {
      _Emitter.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    (_a = _Emitter.eventListeners.get(eventName)) == null ? void 0 : _a.add(callback);
  }
  off(eventName, callback) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  emit(eventName, data) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  clear(eventName) {
    _Emitter.eventListeners.delete(eventName);
  }
  clearAll() {
    _Emitter.eventListeners.clear();
  }
};
Emitter.eventListeners = /* @__PURE__ */ new Map();

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/ParseUtil.js
var ParseUtil = {
  validateCaipAddress(address) {
    var _a;
    if (((_a = address.split(":")) == null ? void 0 : _a.length) !== 3) {
      throw new Error("Invalid CAIP Address");
    }
    return address;
  },
  parseCaipAddress(caipAddress) {
    const parts = caipAddress.split(":");
    if (parts.length !== 3) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    const [chainNamespace, chainId, address] = parts;
    if (!chainNamespace || !chainId || !address) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    return {
      chainNamespace,
      chainId,
      address
    };
  },
  parseCaipNetworkId(caipNetworkId) {
    const parts = caipNetworkId.split(":");
    if (parts.length !== 2) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    const [chainNamespace, chainId] = parts;
    if (!chainNamespace || !chainId) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    return {
      chainNamespace,
      chainId
    };
  }
};

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js
var SafeLocalStorageKeys = {
  WALLET_ID: "@appkit/wallet_id",
  WALLET_NAME: "@appkit/wallet_name",
  SOLANA_WALLET: "@appkit/solana_wallet",
  SOLANA_CAIP_CHAIN: "@appkit/solana_caip_chain",
  ACTIVE_CAIP_NETWORK_ID: "@appkit/active_caip_network_id",
  CONNECTED_SOCIAL: "@appkit/connected_social",
  CONNECTED_SOCIAL_USERNAME: "@appkit-wallet/SOCIAL_USERNAME",
  RECENT_WALLETS: "@appkit/recent_wallets",
  DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
  ACTIVE_NAMESPACE: "@appkit/active_namespace",
  CONNECTED_NAMESPACES: "@appkit/connected_namespaces",
  CONNECTION_STATUS: "@appkit/connection_status",
  SIWX_AUTH_TOKEN: "@appkit/siwx-auth-token",
  SIWX_NONCE_TOKEN: "@appkit/siwx-nonce-token",
  TELEGRAM_SOCIAL_PROVIDER: "@appkit/social_provider",
  NATIVE_BALANCE_CACHE: "@appkit/native_balance_cache",
  PORTFOLIO_CACHE: "@appkit/portfolio_cache",
  ENS_CACHE: "@appkit/ens_cache",
  IDENTITY_CACHE: "@appkit/identity_cache"
};
function getSafeConnectorIdKey(namespace) {
  if (!namespace) {
    throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");
  }
  return `@appkit/${namespace}:connected_connector_id`;
}
var SafeLocalStorage = {
  setItem(key, value) {
    if (isSafe() && value !== void 0) {
      localStorage.setItem(key, value);
    }
  },
  getItem(key) {
    if (isSafe()) {
      return localStorage.getItem(key) || void 0;
    }
    return void 0;
  },
  removeItem(key) {
    if (isSafe()) {
      localStorage.removeItem(key);
    }
  },
  clear() {
    if (isSafe()) {
      localStorage.clear();
    }
  }
};
function isSafe() {
  return typeof window !== "undefined" && typeof localStorage !== "undefined";
}

// ../node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js
function getW3mThemeVariables(themeVariables, themeType) {
  if (themeType === "light") {
    return {
      "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(231, 100%, 70%, 1)",
      "--w3m-background": "#fff"
    };
  }
  return {
    "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(230, 100%, 67%, 1)",
    "--w3m-background": "#121313"
  };
}

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js
var StorageUtil = {
  // Cache expiry in milliseconds
  cacheExpiry: {
    portfolio: 3e4,
    nativeBalance: 3e4,
    ens: 3e5,
    identity: 3e5
  },
  isCacheExpired(timestamp, cacheExpiry) {
    return Date.now() - timestamp > cacheExpiry;
  },
  getActiveNetworkProps() {
    const namespace = StorageUtil.getActiveNamespace();
    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();
    const stringChainId = caipNetworkId ? caipNetworkId.split(":")[1] : void 0;
    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : void 0;
    return {
      namespace,
      caipNetworkId,
      chainId
    };
  },
  setWalletConnectDeepLink({ name: name2, href }) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({ href, name: name2 }));
    } catch {
      console.info("Unable to set WalletConnect deep link");
    }
  },
  getWalletConnectDeepLink() {
    try {
      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info("Unable to get WalletConnect deep link");
    }
    return void 0;
  },
  deleteWalletConnectDeepLink() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
    } catch {
      console.info("Unable to delete WalletConnect deep link");
    }
  },
  setActiveNamespace(namespace) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);
    } catch {
      console.info("Unable to set active namespace");
    }
  },
  setActiveCaipNetworkId(caipNetworkId) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);
      StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0]);
    } catch {
      console.info("Unable to set active caip network id");
    }
  },
  getActiveCaipNetworkId() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to get active caip network id");
      return void 0;
    }
  },
  deleteActiveCaipNetworkId() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to delete active caip network id");
    }
  },
  deleteConnectedConnectorId(namespace) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.removeItem(key);
    } catch {
      console.info("Unable to delete connected connector id");
    }
  },
  setAppKitRecent(wallet) {
    try {
      const recentWallets = StorageUtil.getRecentWallets();
      const exists = recentWallets.find((w6) => w6.id === wallet.id);
      if (!exists) {
        recentWallets.unshift(wallet);
        if (recentWallets.length > 2) {
          recentWallets.pop();
        }
        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));
      }
    } catch {
      console.info("Unable to set AppKit recent");
    }
  },
  getRecentWallets() {
    try {
      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info("Unable to get AppKit recent");
    }
    return [];
  },
  setConnectedConnectorId(namespace, connectorId) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.setItem(key, connectorId);
    } catch {
      console.info("Unable to set Connected Connector Id");
    }
  },
  getActiveNamespace() {
    try {
      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);
      return activeNamespace;
    } catch {
      console.info("Unable to get active namespace");
    }
    return void 0;
  },
  getConnectedConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    try {
      const key = getSafeConnectorIdKey(namespace);
      return SafeLocalStorage.getItem(key);
    } catch (e3) {
      console.info("Unable to get connected connector id in namespace ", namespace);
    }
    return void 0;
  },
  setConnectedSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);
    } catch {
      console.info("Unable to set connected social provider");
    }
  },
  getConnectedSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to get connected social provider");
    }
    return void 0;
  },
  deleteConnectedSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to delete connected social provider");
    }
  },
  getConnectedSocialUsername() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);
    } catch {
      console.info("Unable to get connected social username");
    }
    return void 0;
  },
  getStoredActiveCaipNetworkId() {
    var _a;
    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    const networkId = (_a = storedCaipNetworkId == null ? void 0 : storedCaipNetworkId.split(":")) == null ? void 0 : _a[1];
    return networkId;
  },
  setConnectionStatus(status) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);
    } catch {
      console.info("Unable to set connection status");
    }
  },
  getConnectionStatus() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);
    } catch {
      return void 0;
    }
  },
  getConnectedNamespaces() {
    try {
      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);
      if (!(namespaces == null ? void 0 : namespaces.length)) {
        return [];
      }
      return namespaces.split(",");
    } catch {
      return [];
    }
  },
  setConnectedNamespaces(namespaces) {
    try {
      const uniqueNamespaces = Array.from(new Set(namespaces));
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(","));
    } catch {
      console.info("Unable to set namespaces in storage");
    }
  },
  addConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      if (!namespaces.includes(namespace)) {
        namespaces.push(namespace);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to add connected namespace");
    }
  },
  removeConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      const index2 = namespaces.indexOf(namespace);
      if (index2 > -1) {
        namespaces.splice(index2, 1);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to remove connected namespace");
    }
  },
  getTelegramSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to get telegram social provider");
      return null;
    }
  },
  setTelegramSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);
    } catch {
      console.info("Unable to set telegram social provider");
    }
  },
  removeTelegramSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to remove telegram social provider");
    }
  },
  getBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      const balanceCache = cache[caipAddress];
      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {
        return balanceCache.balance;
      }
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateBalanceCache(params) {
    try {
      const cache = StorageUtil.getBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getNativeBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromNativeBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getNativeBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      const nativeBalanceCache = cache[caipAddress];
      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {
        return nativeBalanceCache;
      }
      console.info("Discarding cache for address", caipAddress);
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateNativeBalanceCache(params) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getEnsCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get ens name cache");
    }
    return cache;
  },
  getEnsFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      const ensCache = cache[address];
      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {
        return ensCache.ens;
      }
      StorageUtil.removeEnsFromCache(address);
    } catch {
      console.info("Unable to get ens name from cache", address);
    }
    return void 0;
  },
  updateEnsCache(params) {
    try {
      const cache = StorageUtil.getEnsCache();
      cache[params.address] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update ens name cache", params);
    }
  },
  removeEnsFromCache(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove ens name from cache", address);
    }
  },
  getIdentityCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get identity cache");
    }
    return cache;
  },
  getIdentityFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      const identityCache = cache[address];
      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {
        return identityCache.identity;
      }
      StorageUtil.removeIdentityFromCache(address);
    } catch {
      console.info("Unable to get identity from cache", address);
    }
    return void 0;
  },
  updateIdentityCache(params) {
    try {
      const cache = StorageUtil.getIdentityCache();
      cache[params.address] = {
        identity: params.identity,
        timestamp: params.timestamp
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update identity cache", params);
    }
  },
  removeIdentityFromCache(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove identity from cache", address);
    }
  },
  clearAddressCache() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);
    } catch {
      console.info("Unable to clear address cache");
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js
var SECURE_SITE = (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
);
var ONRAMP_PROVIDERS = [
  {
    label: "Coinbase",
    name: "coinbase",
    feeRange: "1-2%",
    url: "",
    supportedChains: ["eip155"]
  },
  {
    label: "Meld.io",
    name: "meld",
    feeRange: "1-2%",
    url: "https://meldcrypto.com",
    supportedChains: ["eip155", "solana"]
  }
];
var ConstantsUtil2 = {
  FOUR_MINUTES_MS: 24e4,
  TEN_SEC_MS: 1e4,
  FIVE_SEC_MS: 5e3,
  THREE_SEC_MS: 3e3,
  ONE_SEC_MS: 1e3,
  SECURE_SITE,
  SECURE_SITE_DASHBOARD: `${SECURE_SITE}/dashboard`,
  SECURE_SITE_FAVICON: `${SECURE_SITE}/images/favicon.png`,
  RESTRICTED_TIMEZONES: [
    "ASIA/SHANGHAI",
    "ASIA/URUMQI",
    "ASIA/CHONGQING",
    "ASIA/HARBIN",
    "ASIA/KASHGAR",
    "ASIA/MACAU",
    "ASIA/HONG_KONG",
    "ASIA/MACAO",
    "ASIA/BEIJING",
    "ASIA/HARBIN"
  ],
  /**
   * Network name to Coinbase Pay SDK chain name map object
   * @see supported chain names on Coinbase for Pay SDK: https://github.com/coinbase/cbpay-js/blob/d4bda2c05c4d5917c8db6a05476b603546046394/src/types/onramp.ts
   */
  WC_COINBASE_PAY_SDK_CHAINS: [
    "ethereum",
    "arbitrum",
    "polygon",
    "berachain",
    "avalanche-c-chain",
    "optimism",
    "celo",
    "base"
  ],
  WC_COINBASE_PAY_SDK_FALLBACK_CHAIN: "ethereum",
  WC_COINBASE_PAY_SDK_CHAIN_NAME_MAP: {
    Ethereum: "ethereum",
    "Arbitrum One": "arbitrum",
    Polygon: "polygon",
    Berachain: "berachain",
    Avalanche: "avalanche-c-chain",
    "OP Mainnet": "optimism",
    Celo: "celo",
    Base: "base"
  },
  WC_COINBASE_ONRAMP_APP_ID: "bf18c88d-495a-463b-b249-0b9d3656cf5e",
  SWAP_SUGGESTED_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP"
  ],
  SWAP_POPULAR_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP",
    "METAL",
    "DAI",
    "CHAMP",
    "WOLF",
    "SALE",
    "BAL",
    "BUSD",
    "MUST",
    "BTCpx",
    "ROUTE",
    "HEX",
    "WELT",
    "amDAI",
    "VSQ",
    "VISION",
    "AURUM",
    "pSP",
    "SNX",
    "VC",
    "LINK",
    "CHP",
    "amUSDT",
    "SPHERE",
    "FOX",
    "GIDDY",
    "GFC",
    "OMEN",
    "OX_OLD",
    "DE",
    "WNT"
  ],
  BALANCE_SUPPORTED_CHAINS: ["eip155", "solana"],
  SWAP_SUPPORTED_NETWORKS: [
    // Ethereum'
    "eip155:1",
    // Arbitrum One'
    "eip155:42161",
    // Optimism'
    "eip155:10",
    // ZKSync Era'
    "eip155:324",
    // Base'
    "eip155:8453",
    // BNB Smart Chain'
    "eip155:56",
    // Polygon'
    "eip155:137",
    // Gnosis'
    "eip155:100",
    // Avalanche'
    "eip155:43114",
    // Fantom'
    "eip155:250",
    // Klaytn'
    "eip155:8217",
    // Aurora
    "eip155:1313161554"
  ],
  NAMES_SUPPORTED_CHAIN_NAMESPACES: ["eip155"],
  ONRAMP_SUPPORTED_CHAIN_NAMESPACES: ["eip155", "solana"],
  ACTIVITY_ENABLED_CHAIN_NAMESPACES: ["eip155", "solana"],
  NATIVE_TOKEN_ADDRESS: {
    eip155: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    solana: "So11111111111111111111111111111111111111111",
    polkadot: "0x",
    bip122: "0x"
  },
  CONVERT_SLIPPAGE_TOLERANCE: 1,
  CONNECT_LABELS: {
    MOBILE: "Open and continue in a new browser tab"
  },
  DEFAULT_FEATURES: {
    swaps: true,
    onramp: true,
    receive: true,
    send: true,
    email: true,
    emailShowWallets: true,
    socials: [
      "google",
      "x",
      "discord",
      "farcaster",
      "github",
      "apple",
      "facebook"
    ],
    connectorTypeOrder: [
      "walletConnect",
      "recent",
      "injected",
      "featured",
      "custom",
      "external",
      "recommended"
    ],
    history: true,
    analytics: true,
    allWallets: true,
    legalCheckbox: false,
    smartSessions: false,
    collapseWallets: false,
    walletFeaturesOrder: ["onramp", "swaps", "receive", "send"],
    connectMethodsOrder: void 0
  },
  DEFAULT_ACCOUNT_TYPES: {
    bip122: "payment",
    eip155: "smartAccount",
    polkadot: "eoa",
    solana: "eoa"
  },
  ADAPTER_TYPES: {
    UNIVERSAL: "universal",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5",
    BITCOIN: "bitcoin"
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js
var CoreHelperUtil = {
  isMobile() {
    var _a;
    if (this.isClient()) {
      return Boolean(((_a = window == null ? void 0 : window.matchMedia("(pointer:coarse)")) == null ? void 0 : _a.matches) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));
    }
    return false;
  },
  checkCaipNetwork(network, networkName = "") {
    return network == null ? void 0 : network.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase());
  },
  isAndroid() {
    if (!this.isMobile()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return CoreHelperUtil.isMobile() && ua.includes("android");
  },
  isIos() {
    if (!this.isMobile()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("iphone") || ua.includes("ipad");
  },
  isSafari() {
    if (!this.isClient()) {
      return false;
    }
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("safari");
  },
  isClient() {
    return typeof window !== "undefined";
  },
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= ConstantsUtil2.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry, differenceMs = ConstantsUtil2.ONE_SEC_MS) {
    return Date.now() - lastRetry >= differenceMs;
  },
  copyToClopboard(text) {
    navigator.clipboard.writeText(text);
  },
  isIframe() {
    try {
      return (window == null ? void 0 : window.self) !== (window == null ? void 0 : window.top);
    } catch (e3) {
      return false;
    }
  },
  getPairingExpiry() {
    return Date.now() + ConstantsUtil2.FOUR_MINUTES_MS;
  },
  getNetworkId(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[1];
  },
  getPlainAddress(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[2];
  },
  async wait(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debounce(func, timeout = 500) {
    let timer = void 0;
    return (...args) => {
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
  },
  formatNativeUrl(appUrl, wcUri) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.includes("://")) {
      safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    if (this.isTelegram() && this.isAndroid()) {
      wcUri = encodeURIComponent(wcUri);
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  getOpenTargetForPlatform(target) {
    if (target === "popupWindow") {
      return target;
    }
    if (this.isTelegram()) {
      if (StorageUtil.getTelegramSocialProvider()) {
        return "_top";
      }
      return "_blank";
    }
    return target;
  },
  openHref(href, target, features) {
    window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  returnOpenHref(href, target, features) {
    return window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  isTelegram() {
    return typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.TelegramWebviewProxyProto));
  },
  async preloadImage(src2) {
    const imagePromise = new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = resolve;
      image.onerror = reject;
      image.crossOrigin = "anonymous";
      image.src = src2;
    });
    return Promise.race([imagePromise, CoreHelperUtil.wait(2e3)]);
  },
  formatBalance(balance, symbol) {
    let formattedBalance = "0.000";
    if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        const formattedValue = Math.floor(number * 1e3) / 1e3;
        if (formattedValue) {
          formattedBalance = formattedValue.toString();
        }
      }
    }
    return `${formattedBalance}${symbol ? ` ${symbol}` : ""}`;
  },
  formatBalance2(balance, symbol) {
    var _a;
    let formattedBalance = void 0;
    if (balance === "0") {
      formattedBalance = "0";
    } else if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        formattedBalance = (_a = number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)) == null ? void 0 : _a[0];
      }
    }
    return {
      value: formattedBalance ?? "0",
      rest: formattedBalance === "0" ? "000" : "",
      symbol
    };
  },
  getApiUrl() {
    return ConstantsUtil.W3M_API_URL;
  },
  getBlockchainApiUrl() {
    return ConstantsUtil.BLOCKCHAIN_API_RPC_URL;
  },
  getAnalyticsUrl() {
    return ConstantsUtil.PULSE_API_URL;
  },
  getUUID() {
    if (crypto == null ? void 0 : crypto.randomUUID) {
      return crypto.randomUUID();
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (c8) => {
      const r3 = Math.random() * 16 | 0;
      const v7 = c8 === "x" ? r3 : r3 & 3 | 8;
      return v7.toString(16);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  parseError(error) {
    var _a, _b;
    if (typeof error === "string") {
      return error;
    } else if (typeof ((_b = (_a = error == null ? void 0 : error.issues) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) === "string") {
      return error.issues[0].message;
    } else if (error instanceof Error) {
      return error.message;
    }
    return "Unknown error";
  },
  sortRequestedNetworks(approvedIds, requestedNetworks = []) {
    const approvedIndexMap = {};
    if (requestedNetworks && approvedIds) {
      approvedIds.forEach((id, index2) => {
        approvedIndexMap[id] = index2;
      });
      requestedNetworks.sort((a3, b6) => {
        const indexA = approvedIndexMap[a3.id];
        const indexB = approvedIndexMap[b6.id];
        if (indexA !== void 0 && indexB !== void 0) {
          return indexA - indexB;
        } else if (indexA !== void 0) {
          return -1;
        } else if (indexB !== void 0) {
          return 1;
        }
        return 0;
      });
    }
    return requestedNetworks;
  },
  calculateBalance(array) {
    let sum = 0;
    for (const item of array) {
      sum += item.value ?? 0;
    }
    return sum;
  },
  formatTokenBalance(number) {
    const roundedNumber = number.toFixed(2);
    const [dollars, pennies] = roundedNumber.split(".");
    return { dollars, pennies };
  },
  isAddress(address, chain = "eip155") {
    switch (chain) {
      case "eip155":
        if (!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)) {
          return false;
        } else if (/^(?:0x)?[0-9a-f]{40}$/iu.test(address) || /^(?:0x)?[0-9A-F]{40}$/iu.test(address)) {
          return true;
        }
        return false;
      case "solana":
        return /[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);
      default:
        return false;
    }
  },
  uniqueBy(arr, key) {
    const set2 = /* @__PURE__ */ new Set();
    return arr.filter((item) => {
      const keyValue = item[key];
      if (set2.has(keyValue)) {
        return false;
      }
      set2.add(keyValue);
      return true;
    });
  },
  generateSdkVersion(adapters, platform, version5) {
    const hasNoAdapters = adapters.length === 0;
    const adapterNames = hasNoAdapters ? ConstantsUtil2.ADAPTER_TYPES.UNIVERSAL : adapters.map((adapter) => adapter.adapterType).join(",");
    return `${platform}-${adapterNames}-${version5}`;
  },
  // eslint-disable-next-line max-params
  createAccount(namespace, address, type, publicKey, path) {
    return {
      namespace,
      address,
      type,
      publicKey,
      path
    };
  },
  isCaipAddress(address) {
    if (typeof address !== "string") {
      return false;
    }
    const sections = address.split(":");
    const namespace = sections[0];
    return sections.filter(Boolean).length === 3 && namespace in ConstantsUtil.CHAIN_NAME_MAP;
  },
  isMac() {
    const ua = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua.includes("macintosh") && !ua.includes("safari");
  },
  formatTelegramSocialLoginUrl(url) {
    const valueToInject = `--${encodeURIComponent(window == null ? void 0 : window.location.href)}`;
    const paramToInject = "state=";
    const parsedUrl = new URL(url);
    if (parsedUrl.host === "auth.magic.link") {
      const providerParam = "provider_authorization_url=";
      const providerUrl = url.substring(url.indexOf(providerParam) + providerParam.length);
      const resultUrl = this.injectIntoUrl(decodeURIComponent(providerUrl), paramToInject, valueToInject);
      return url.replace(providerUrl, encodeURIComponent(resultUrl));
    }
    return this.injectIntoUrl(url, paramToInject, valueToInject);
  },
  injectIntoUrl(url, key, appendString) {
    const keyIndex = url.indexOf(key);
    if (keyIndex === -1) {
      throw new Error(`${key} parameter not found in the URL: ${url}`);
    }
    const keyEndIndex = url.indexOf("&", keyIndex);
    const keyLength = key.length;
    const keyParamEnd = keyEndIndex !== -1 ? keyEndIndex : url.length;
    const beforeKeyValue = url.substring(0, keyIndex + keyLength);
    const currentKeyValue = url.substring(keyIndex + keyLength, keyParamEnd);
    const afterKeyValue = url.substring(keyEndIndex);
    const newKeyValue = currentKeyValue + appendString;
    const newUrl = beforeKeyValue + newKeyValue + afterKeyValue;
    return newUrl;
  }
};

// ../node_modules/proxy-compare/dist/index.modern.js
var e = Symbol();
var t = Symbol();
var s = Object.getPrototypeOf;
var c = /* @__PURE__ */ new WeakMap();
var l = (e3) => e3 && (c.has(e3) ? c.get(e3) : s(e3) === Object.prototype || s(e3) === Array.prototype);
var y = (e3) => l(e3) && e3[t] || null;
var h = (e3, t2 = true) => {
  c.set(e3, t2);
};

// ../node_modules/valtio/esm/vanilla.mjs
var isObject = (x8) => typeof x8 === "object" && x8 !== null;
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x8) => isObject(x8) && !refSet.has(x8) && (Array.isArray(x8) || !(Symbol.iterator in x8)) && !(x8 instanceof WeakMap) && !(x8 instanceof WeakSet) && !(x8 instanceof Error) && !(x8 instanceof Number) && !(x8 instanceof Date) && !(x8 instanceof String) && !(x8 instanceof RegExp) && !(x8 instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
  switch (promise.status) {
    case "fulfilled":
      return promise.value;
    case "rejected":
      throw promise.reason;
    default:
      throw promise;
  }
}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version5, handlePromise = defaultHandlePromise) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version5) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  h(snap, true);
  snapCache.set(target, [version5, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const { enumerable } = Reflect.getOwnPropertyDescriptor(
      target,
      key
    );
    const desc = {
      value,
      enumerable,
      // This is intentional to avoid copying with proxy-compare.
      // It's still non-writable, so it avoids assigning a value.
      configurable: true
    };
    if (refSet.has(value)) {
      h(value, false);
    } else if (value instanceof Promise) {
      delete desc.value;
      desc.get = () => handlePromise(value);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshot(
        target2,
        ensureVersion(),
        handlePromise
      );
    }
    Object.defineProperty(snap, key, desc);
  });
  return Object.preventExtensions(snap);
}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version5 = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version5 !== nextVersion) {
      version5 = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version5) {
          version5 = propVersion;
        }
      });
    }
    return version5;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propProxyState) => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
      throw new Error("prop listener already exists");
    }
    if (listeners.size) {
      const remove = propProxyState[3](createPropListener(prop));
      propProxyStates.set(prop, [propProxyState, remove]);
    } else {
      propProxyStates.set(prop, [propProxyState]);
    }
  };
  const removePropListener = (prop) => {
    var _a;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a = entry[1]) == null ? void 0 : _a.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      removePropListener(prop);
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value, receiver) {
      const hasPrevValue = Reflect.has(target, prop);
      const prevValue = Reflect.get(target, prop, receiver);
      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
        return true;
      }
      removePropListener(prop);
      if (isObject(value)) {
        value = y(value) || value;
      }
      let nextValue = value;
      if (value instanceof Promise) {
        value.then((v7) => {
          value.status = "fulfilled";
          value.value = v7;
          notifyUpdate(["resolve", [prop], v7]);
        }).catch((e3) => {
          value.status = "rejected";
          value.reason = e3;
          notifyUpdate(["reject", [prop], e3]);
        });
      } else {
        if (!proxyStateMap.has(value) && canProxy(value)) {
          nextValue = proxyFunction(value);
        }
        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
        if (childProxyState) {
          addPropListener(prop, childProxyState);
        }
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  const proxyState = [
    baseObject,
    ensureVersion,
    createSnapshot,
    addListener
  ];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      initialObject,
      key
    );
    if ("value" in desc) {
      proxyObject[key] = initialObject[key];
      delete desc.value;
      delete desc.writable;
    }
    Object.defineProperty(baseObject, key, desc);
  });
  return proxyObject;
}) => [
  // public functions
  proxyFunction,
  // shared state
  proxyStateMap,
  refSet,
  // internal things
  objectIs,
  newProxy,
  canProxy,
  defaultHandlePromise,
  snapCache,
  createSnapshot,
  proxyCache,
  versionHolder
];
var [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
  return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[3];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}
function snapshot(proxyObject, handlePromise) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  const [target, ensureVersion, createSnapshot] = proxyState;
  return createSnapshot(target, ensureVersion(), handlePromise);
}
function ref(obj) {
  refSet.add(obj);
  return obj;
}

// ../node_modules/valtio/esm/vanilla/utils.mjs
function subscribeKey(proxyObject, key, callback, notifyInSync) {
  let prevValue = proxyObject[key];
  return subscribe(
    proxyObject,
    () => {
      const nextValue = proxyObject[key];
      if (!Object.is(prevValue, nextValue)) {
        callback(prevValue = nextValue);
      }
    },
    notifyInSync
  );
}
var DEVTOOLS = Symbol();
function proxyMap(entries2) {
  const map = proxy({
    data: Array.from(entries2 || []),
    has(key) {
      return this.data.some((p6) => p6[0] === key);
    },
    set(key, value) {
      const record = this.data.find((p6) => p6[0] === key);
      if (record) {
        record[1] = value;
      } else {
        this.data.push([key, value]);
      }
      return this;
    },
    get(key) {
      var _a;
      return (_a = this.data.find((p6) => p6[0] === key)) == null ? void 0 : _a[1];
    },
    delete(key) {
      const index2 = this.data.findIndex((p6) => p6[0] === key);
      if (index2 === -1) {
        return false;
      }
      this.data.splice(index2, 1);
      return true;
    },
    clear() {
      this.data.splice(0);
    },
    get size() {
      return this.data.length;
    },
    toJSON() {
      return new Map(this.data);
    },
    forEach(cb) {
      this.data.forEach((p6) => {
        cb(p6[1], p6[0], this);
      });
    },
    keys() {
      return this.data.map((p6) => p6[0]).values();
    },
    values() {
      return this.data.map((p6) => p6[1]).values();
    },
    entries() {
      return new Map(this.data).entries();
    },
    get [Symbol.toStringTag]() {
      return "Map";
    },
    [Symbol.iterator]() {
      return this.entries();
    }
  });
  Object.defineProperties(map, {
    data: {
      enumerable: false
    },
    size: {
      enumerable: false
    },
    toJSON: {
      enumerable: false
    }
  });
  Object.seal(map);
  return map;
}

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/OptionsUtil.js
var OptionsUtil = {
  getFeatureValue(key, features) {
    const optionValue = features == null ? void 0 : features[key];
    if (optionValue === void 0) {
      return ConstantsUtil2.DEFAULT_FEATURES[key];
    }
    return optionValue;
  },
  filterSocialsByPlatform(socials) {
    if (!socials || !socials.length) {
      return socials;
    }
    if (CoreHelperUtil.isTelegram()) {
      if (CoreHelperUtil.isIos()) {
        return socials.filter((s4) => s4 !== "google");
      }
      if (CoreHelperUtil.isMac()) {
        return socials.filter((s4) => s4 !== "x");
      }
      if (CoreHelperUtil.isAndroid()) {
        return socials.filter((s4) => !["facebook", "x"].includes(s4));
      }
    }
    return socials;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js
var state = proxy({
  features: ConstantsUtil2.DEFAULT_FEATURES,
  projectId: "",
  sdkType: "appkit",
  sdkVersion: "html-wagmi-undefined",
  defaultAccountTypes: ConstantsUtil2.DEFAULT_ACCOUNT_TYPES,
  enableNetworkSwitch: true
});
var OptionsController = {
  state,
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setOptions(options) {
    Object.assign(state, options);
  },
  setFeatures(features) {
    if (!features) {
      return;
    }
    if (!state.features) {
      state.features = ConstantsUtil2.DEFAULT_FEATURES;
    }
    const newFeatures = { ...state.features, ...features };
    state.features = newFeatures;
    if (state.features.socials) {
      state.features.socials = OptionsUtil.filterSocialsByPlatform(state.features.socials);
    }
  },
  setProjectId(projectId) {
    state.projectId = projectId;
  },
  setCustomRpcUrls(customRpcUrls) {
    state.customRpcUrls = customRpcUrls;
  },
  setAllWallets(allWallets) {
    state.allWallets = allWallets;
  },
  setIncludeWalletIds(includeWalletIds) {
    state.includeWalletIds = includeWalletIds;
  },
  setExcludeWalletIds(excludeWalletIds) {
    state.excludeWalletIds = excludeWalletIds;
  },
  setFeaturedWalletIds(featuredWalletIds) {
    state.featuredWalletIds = featuredWalletIds;
  },
  setTokens(tokens) {
    state.tokens = tokens;
  },
  setTermsConditionsUrl(termsConditionsUrl) {
    state.termsConditionsUrl = termsConditionsUrl;
  },
  setPrivacyPolicyUrl(privacyPolicyUrl) {
    state.privacyPolicyUrl = privacyPolicyUrl;
  },
  setCustomWallets(customWallets) {
    state.customWallets = customWallets;
  },
  setIsSiweEnabled(isSiweEnabled) {
    state.isSiweEnabled = isSiweEnabled;
  },
  setIsUniversalProvider(isUniversalProvider) {
    state.isUniversalProvider = isUniversalProvider;
  },
  setSdkVersion(sdkVersion) {
    state.sdkVersion = sdkVersion;
  },
  setMetadata(metadata) {
    state.metadata = metadata;
  },
  setDisableAppend(disableAppend) {
    state.disableAppend = disableAppend;
  },
  setEIP6963Enabled(enableEIP6963) {
    state.enableEIP6963 = enableEIP6963;
  },
  setDebug(debug) {
    state.debug = debug;
  },
  setEnableWalletConnect(enableWalletConnect) {
    state.enableWalletConnect = enableWalletConnect;
  },
  setEnableWalletGuide(enableWalletGuide) {
    state.enableWalletGuide = enableWalletGuide;
  },
  setEnableAuthLogger(enableAuthLogger) {
    state.enableAuthLogger = enableAuthLogger;
  },
  setEnableWallets(enableWallets) {
    state.enableWallets = enableWallets;
  },
  setHasMultipleAddresses(hasMultipleAddresses) {
    state.hasMultipleAddresses = hasMultipleAddresses;
  },
  setSIWX(siwx) {
    state.siwx = siwx;
  },
  setConnectMethodsOrder(connectMethodsOrder) {
    state.features = {
      ...state.features,
      connectMethodsOrder
    };
  },
  setWalletFeaturesOrder(walletFeaturesOrder) {
    state.features = {
      ...state.features,
      walletFeaturesOrder
    };
  },
  setSocialsOrder(socialsOrder) {
    state.features = {
      ...state.features,
      socials: socialsOrder
    };
  },
  setCollapseWallets(collapseWallets) {
    state.features = {
      ...state.features,
      collapseWallets
    };
  },
  setEnableEmbedded(enableEmbedded) {
    state.enableEmbedded = enableEmbedded;
  },
  setAllowUnsupportedChain(allowUnsupportedChain) {
    state.allowUnsupportedChain = allowUnsupportedChain;
  },
  setManualWCControl(manualWCControl) {
    state.manualWCControl = manualWCControl;
  },
  setEnableNetworkSwitch(enableNetworkSwitch) {
    state.enableNetworkSwitch = enableNetworkSwitch;
  },
  setDefaultAccountTypes(defaultAccountType = {}) {
    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {
      if (accountType) {
        state.defaultAccountTypes[namespace] = accountType;
      }
    });
  },
  setUniversalProviderConfigOverride(universalProviderConfigOverride) {
    state.universalProviderConfigOverride = universalProviderConfigOverride;
  },
  getUniversalProviderConfigOverride() {
    return state.universalProviderConfigOverride;
  },
  getSnapshot() {
    return snapshot(state);
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js
var state2 = proxy({
  walletImages: {},
  networkImages: {},
  chainImages: {},
  connectorImages: {},
  tokenImages: {},
  currencyImages: {}
});
var AssetController = {
  state: state2,
  subscribeNetworkImages(callback) {
    return subscribe(state2.networkImages, () => callback(state2.networkImages));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  subscribe(callback) {
    return subscribe(state2, () => callback(state2));
  },
  setWalletImage(key, value) {
    state2.walletImages[key] = value;
  },
  setNetworkImage(key, value) {
    state2.networkImages[key] = value;
  },
  setChainImage(key, value) {
    state2.chainImages[key] = value;
  },
  setConnectorImage(key, value) {
    state2.connectorImages = { ...state2.connectorImages, [key]: value };
  },
  setTokenImage(key, value) {
    state2.tokenImages[key] = value;
  },
  setCurrencyImage(key, value) {
    state2.currencyImages[key] = value;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js
var namespaceImageIds = {
  // Ethereum
  eip155: "ba0ba0cd-17c6-4806-ad93-f9d174f17900",
  // Solana
  solana: "a1b58899-f671-4276-6a5e-56ca5bd59700",
  // Polkadot
  polkadot: "",
  // Bitcoin
  bip122: "0b4838db-0161-4ffe-022d-532bf03dba00"
};
var state3 = proxy({
  networkImagePromises: {}
});
var AssetUtil = {
  async fetchWalletImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    await ApiController._fetchWalletImage(imageId);
    return this.getWalletImageById(imageId);
  },
  async fetchNetworkImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    const existingImage = this.getNetworkImageById(imageId);
    if (existingImage) {
      return existingImage;
    }
    if (!state3.networkImagePromises[imageId]) {
      state3.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);
    }
    await state3.networkImagePromises[imageId];
    return this.getNetworkImageById(imageId);
  },
  getWalletImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.walletImages[imageId];
  },
  getWalletImage(wallet) {
    if (wallet == null ? void 0 : wallet.image_url) {
      return wallet == null ? void 0 : wallet.image_url;
    }
    if (wallet == null ? void 0 : wallet.image_id) {
      return AssetController.state.walletImages[wallet.image_id];
    }
    return void 0;
  },
  getNetworkImage(network) {
    var _a, _b, _c;
    if ((_a = network == null ? void 0 : network.assets) == null ? void 0 : _a.imageUrl) {
      return (_b = network == null ? void 0 : network.assets) == null ? void 0 : _b.imageUrl;
    }
    if ((_c = network == null ? void 0 : network.assets) == null ? void 0 : _c.imageId) {
      return AssetController.state.networkImages[network.assets.imageId];
    }
    return void 0;
  },
  getNetworkImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.networkImages[imageId];
  },
  getConnectorImage(connector) {
    if (connector == null ? void 0 : connector.imageUrl) {
      return connector.imageUrl;
    }
    if (connector == null ? void 0 : connector.imageId) {
      return AssetController.state.connectorImages[connector.imageId];
    }
    return void 0;
  },
  getChainImage(chain) {
    return AssetController.state.networkImages[namespaceImageIds[chain]];
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js
async function fetchData(...args) {
  const response = await fetch(...args);
  if (!response.ok) {
    const err = new Error(`HTTP status code: ${response.status}`, {
      cause: response
    });
    throw err;
  }
  return response;
}
var FetchUtil = class {
  constructor({ baseUrl: baseUrl4, clientId }) {
    this.baseUrl = baseUrl4;
    this.clientId = clientId;
  }
  async get({ headers, signal, cache, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal, cache });
    return response.json();
  }
  async getBlob({ headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal });
    return response.blob();
  }
  async post({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "POST",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async put({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "PUT",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async delete({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "DELETE",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  createUrl({ path, params }) {
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    if (this.clientId) {
      url.searchParams.append("clientId", this.clientId);
    }
    return url;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js
var MobileWalletUtil = {
  /**
   * Handles mobile wallet redirection for wallets that have Universal Links.
   *
   * @param {Object} properties - The properties object.
   * @param {string} properties.name - The name of the wallet.
   */
  handleSolanaDeeplinkRedirect(name2) {
    if (ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA) {
      const href = window.location.href;
      const encodedHref = encodeURIComponent(href);
      if (name2 === "Phantom" && !("phantom" in window)) {
        const protocol = href.startsWith("https") ? "https" : "http";
        const host = href.split("/")[2];
        const encodedRef = encodeURIComponent(`${protocol}://${host}`);
        window.location.href = `https://phantom.app/ul/browse/${encodedHref}?ref=${encodedRef}`;
      }
      if (name2 === "Coinbase Wallet" && !("coinbaseSolana" in window)) {
        window.location.href = `https://go.cb-w.com/dapp?cb_url=${encodedHref}`;
      }
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js
var DEFAULT_STATE = Object.freeze({
  message: "",
  variant: "success",
  svg: void 0,
  open: false,
  autoClose: true
});
var state4 = proxy({
  ...DEFAULT_STATE
});
var SnackController = {
  state: state4,
  subscribeKey(key, callback) {
    return subscribeKey(state4, key, callback);
  },
  showLoading(message, options = {}) {
    this._showMessage({ message, variant: "loading", ...options });
  },
  showSuccess(message) {
    this._showMessage({ message, variant: "success" });
  },
  showSvg(message, svg) {
    this._showMessage({ message, svg });
  },
  showError(message) {
    const errorMessage = CoreHelperUtil.parseError(message);
    this._showMessage({ message: errorMessage, variant: "error" });
  },
  hide() {
    state4.message = DEFAULT_STATE.message;
    state4.variant = DEFAULT_STATE.variant;
    state4.svg = DEFAULT_STATE.svg;
    state4.open = DEFAULT_STATE.open;
    state4.autoClose = DEFAULT_STATE.autoClose;
  },
  _showMessage({ message, svg, variant = "success", autoClose = DEFAULT_STATE.autoClose }) {
    if (state4.open) {
      state4.open = false;
      setTimeout(() => {
        state4.message = message;
        state4.variant = variant;
        state4.svg = svg;
        state4.open = true;
        state4.autoClose = autoClose;
      }, 150);
    } else {
      state4.message = message;
      state4.variant = variant;
      state4.svg = svg;
      state4.open = true;
      state4.autoClose = autoClose;
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js
var DEFAULT_OPTIONS = {
  purchaseCurrencies: [
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "USD Coin",
      symbol: "USDC",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    },
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "Ether",
      symbol: "ETH",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    }
  ],
  paymentCurrencies: [
    {
      id: "USD",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    },
    {
      id: "EUR",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    }
  ]
};
var baseUrl = CoreHelperUtil.getBlockchainApiUrl();
var state5 = proxy({
  clientId: null,
  api: new FetchUtil({ baseUrl, clientId: null }),
  supportedChains: { http: [], ws: [] }
});
var BlockchainApiController = {
  state: state5,
  async get(request) {
    const { st: st5, sv } = BlockchainApiController.getSdkProperties();
    const projectId = OptionsController.state.projectId;
    const params = {
      ...request.params || {},
      st: st5,
      sv,
      projectId
    };
    return state5.api.get({
      ...request,
      params
    });
  },
  getSdkProperties() {
    const { sdkType, sdkVersion } = OptionsController.state;
    return {
      st: sdkType || "unknown",
      sv: sdkVersion || "unknown"
    };
  },
  async isNetworkSupported(networkId) {
    if (!networkId) {
      return false;
    }
    try {
      if (!state5.supportedChains.http.length) {
        await BlockchainApiController.getSupportedNetworks();
      }
    } catch (e3) {
      return false;
    }
    return state5.supportedChains.http.includes(networkId);
  },
  async getSupportedNetworks() {
    const supportedChains = await BlockchainApiController.get({
      path: "v1/supported-chains"
    });
    state5.supportedChains = supportedChains;
    return supportedChains;
  },
  async fetchIdentity({ address, caipNetworkId }) {
    const isSupported = await BlockchainApiController.isNetworkSupported(caipNetworkId);
    if (!isSupported) {
      return { avatar: "", name: "" };
    }
    const identityCache = StorageUtil.getIdentityFromCacheForAddress(address);
    if (identityCache) {
      return identityCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/identity/${address}`,
      params: {
        sender: ChainController.state.activeCaipAddress ? CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) : void 0
      }
    });
    StorageUtil.updateIdentityCache({
      address,
      identity: result,
      timestamp: Date.now()
    });
    return result;
  },
  async fetchTransactions({ account, cursor, onramp, signal, cache, chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { data: [], next: void 0 };
    }
    return BlockchainApiController.get({
      path: `/v1/account/${account}/history`,
      params: {
        cursor,
        onramp,
        chainId
      },
      signal,
      cache
    });
  },
  async fetchSwapQuote({ amount, userAddress, from: from23, to: to3, gasPrice }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { quotes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/quotes`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        amount,
        userAddress,
        from: from23,
        to: to3,
        gasPrice
      }
    });
  },
  async fetchSwapTokens({ chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { tokens: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/tokens`,
      params: { chainId }
    });
  },
  async fetchTokenPrice({ addresses }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { fungibles: [] };
    }
    return state5.api.post({
      path: "/v1/fungible/price",
      body: {
        currency: "usd",
        addresses,
        projectId: OptionsController.state.projectId
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchSwapAllowance({ tokenAddress, userAddress }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { allowance: "0" };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/allowance`,
      params: {
        tokenAddress,
        userAddress
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchGasPrice({ chainId }) {
    var _a;
    const { st: st5, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Gas Price");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/gas-price`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        chainId,
        st: st5,
        sv
      }
    });
  },
  async generateSwapCalldata({ amount, from: from23, to: to3, userAddress, disableEstimate }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return state5.api.post({
      path: "/v1/convert/build-transaction",
      headers: {
        "Content-Type": "application/json"
      },
      body: {
        amount,
        eip155: {
          slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE
        },
        projectId: OptionsController.state.projectId,
        from: from23,
        to: to3,
        userAddress,
        disableEstimate
      }
    });
  },
  async generateApproveCalldata({ from: from23, to: to3, userAddress }) {
    var _a;
    const { st: st5, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/build-approve`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        userAddress,
        from: from23,
        to: to3,
        st: st5,
        sv
      }
    });
  },
  async getBalance(address, chainId, forceUpdate) {
    var _a;
    const { st: st5, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      SnackController.showError("Token Balance Unavailable");
      return { balances: [] };
    }
    const caipAddress = `${chainId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance;
    }
    const balance = await BlockchainApiController.get({
      path: `/v1/account/${address}/balance`,
      params: {
        currency: "usd",
        chainId,
        forceUpdate,
        st: st5,
        sv
      }
    });
    StorageUtil.updateBalanceCache({
      caipAddress,
      balance,
      timestamp: Date.now()
    });
    return balance;
  },
  async lookupEnsName(name2) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { addresses: {}, attributes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/account/${name2}`,
      params: { apiVersion: "2" }
    });
  },
  async reverseLookupEnsName({ address }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/profile/reverse/${address}`,
      params: {
        sender: AccountController.state.address,
        apiVersion: "2"
      }
    });
  },
  async getEnsNameSuggestions(name2) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { suggestions: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/suggestions/${name2}`,
      params: { zone: "reown.id" }
    });
  },
  async registerEnsName({ coinType, address, message, signature }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state5.api.post({
      path: `/v1/profile/account`,
      body: { coin_type: coinType, address, message, signature },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async generateOnRampURL({ destinationWallets, partnerUserId, defaultNetwork, purchaseAmount, paymentAmount }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return "";
    }
    const response = await state5.api.post({
      path: `/v1/generators/onrampurl`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        destinationWallets,
        defaultNetwork,
        partnerUserId,
        defaultExperience: "buy",
        presetCryptoAmount: purchaseAmount,
        presetFiatAmount: paymentAmount
      }
    });
    return response.url;
  },
  async getOnrampOptions() {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { paymentCurrencies: [], purchaseCurrencies: [] };
    }
    try {
      const response = await BlockchainApiController.get({
        path: `/v1/onramp/options`
      });
      return response;
    } catch (e3) {
      return DEFAULT_OPTIONS;
    }
  },
  async getOnrampQuote({ purchaseCurrency, paymentCurrency, amount, network }) {
    var _a;
    try {
      const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
      if (!isSupported) {
        return null;
      }
      const response = await state5.api.post({
        path: `/v1/onramp/quote`,
        params: {
          projectId: OptionsController.state.projectId
        },
        body: {
          purchaseCurrency,
          paymentCurrency,
          amount,
          network
        }
      });
      return response;
    } catch (e3) {
      return {
        coinbaseFee: { amount, currency: paymentCurrency.id },
        networkFee: { amount, currency: paymentCurrency.id },
        paymentSubtotal: { amount, currency: paymentCurrency.id },
        paymentTotal: { amount, currency: paymentCurrency.id },
        purchaseAmount: { amount, currency: paymentCurrency.id },
        quoteId: "mocked-quote-id"
      };
    }
  },
  async getSmartSessions(caipAddress) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/sessions/${caipAddress}`
    });
  },
  async revokeSmartSession(address, pci, signature) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state5.api.post({
      path: `/v1/sessions/${address}/revoke`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        pci,
        signature
      }
    });
  },
  setClientId(clientId) {
    state5.clientId = clientId;
    state5.api = new FetchUtil({ baseUrl, clientId });
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js
var state6 = proxy({
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: []
});
var AccountController = {
  state: state6,
  replaceState(newState) {
    if (!newState) {
      return;
    }
    Object.assign(state6, ref(newState));
  },
  subscribe(callback) {
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        return callback(accountState2);
      }
      return void 0;
    });
  },
  subscribeKey(property, callback, chain) {
    let prev = void 0;
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        const nextValue = accountState2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    }, chain);
  },
  setStatus(status, chain) {
    ChainController.setAccountProp("status", status, chain);
  },
  getCaipAddress(chain) {
    return ChainController.getAccountProp("caipAddress", chain);
  },
  setCaipAddress(caipAddress, chain) {
    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (chain === ChainController.state.activeChain) {
      ChainController.state.activeCaipAddress = caipAddress;
    }
    ChainController.setAccountProp("caipAddress", caipAddress, chain);
    ChainController.setAccountProp("address", newAddress, chain);
  },
  setBalance(balance, balanceSymbol, chain) {
    ChainController.setAccountProp("balance", balance, chain);
    ChainController.setAccountProp("balanceSymbol", balanceSymbol, chain);
  },
  setProfileName(profileName, chain) {
    ChainController.setAccountProp("profileName", profileName, chain);
  },
  setProfileImage(profileImage, chain) {
    ChainController.setAccountProp("profileImage", profileImage, chain);
  },
  setUser(user, chain) {
    ChainController.setAccountProp("user", user, chain);
  },
  setAddressExplorerUrl(explorerUrl, chain) {
    ChainController.setAccountProp("addressExplorerUrl", explorerUrl, chain);
  },
  setSmartAccountDeployed(isDeployed, chain) {
    ChainController.setAccountProp("smartAccountDeployed", isDeployed, chain);
  },
  setCurrentTab(currentTab) {
    ChainController.setAccountProp("currentTab", currentTab, ChainController.state.activeChain);
  },
  setTokenBalance(tokenBalance, chain) {
    if (tokenBalance) {
      ChainController.setAccountProp("tokenBalance", tokenBalance, chain);
    }
  },
  setShouldUpdateToAddress(address, chain) {
    ChainController.setAccountProp("shouldUpdateToAddress", address, chain);
  },
  setAllAccounts(accounts, namespace) {
    ChainController.setAccountProp("allAccounts", accounts, namespace);
  },
  addAddressLabel(address, label, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.set(address, label);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  removeAddressLabel(address, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.delete(address);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  setConnectedWalletInfo(connectedWalletInfo, chain) {
    ChainController.setAccountProp("connectedWalletInfo", connectedWalletInfo, chain, false);
  },
  setPreferredAccountType(preferredAccountType, chain) {
    ChainController.setAccountProp("preferredAccountType", preferredAccountType, chain);
  },
  setSocialProvider(socialProvider, chain) {
    if (socialProvider) {
      ChainController.setAccountProp("socialProvider", socialProvider, chain);
    }
  },
  setSocialWindow(socialWindow, chain) {
    ChainController.setAccountProp("socialWindow", socialWindow ? ref(socialWindow) : void 0, chain);
  },
  setFarcasterUrl(farcasterUrl, chain) {
    ChainController.setAccountProp("farcasterUrl", farcasterUrl, chain);
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state6.balanceLoading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state6.lastRetry && !CoreHelperUtil.isAllowedRetry(state6.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state6.balanceLoading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const response = await BlockchainApiController.getBalance(address, chainId);
        const filteredBalances = response.balances.filter((balance) => balance.quantity.decimals !== "0");
        this.setTokenBalance(filteredBalances, chain);
        state6.lastRetry = void 0;
        state6.balanceLoading = false;
        return filteredBalances;
      }
    } catch (error) {
      state6.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state6.balanceLoading = false;
    }
    return [];
  },
  resetAccount(chain) {
    ChainController.resetAccount(chain);
  }
};

// ../node_modules/@walletconnect/core/dist/index.es.js
var import_events7 = __toESM(require_events());

// ../node_modules/@walletconnect/heartbeat/dist/index.es.js
var import_events = __toESM(require_events());
var import_time = __toESM(require_cjs());

// ../node_modules/@walletconnect/events/dist/esm/events.js
var IEvents = class {
};

// ../node_modules/@walletconnect/heartbeat/dist/index.es.js
var n = class extends IEvents {
  constructor(e3) {
    super();
  }
};
var s2 = import_time.FIVE_SECONDS;
var r = { pulse: "heartbeat_pulse" };
var i2 = class _i2 extends n {
  constructor(e3) {
    super(e3), this.events = new import_events.EventEmitter(), this.interval = s2, this.interval = (e3 == null ? void 0 : e3.interval) || s2;
  }
  static async init(e3) {
    const t2 = new _i2(e3);
    return await t2.init(), t2;
  }
  async init() {
    await this.initialize();
  }
  stop() {
    clearInterval(this.intervalRef);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async initialize() {
    this.intervalRef = setInterval(() => this.pulse(), (0, import_time.toMiliseconds)(this.interval));
  }
  pulse() {
    this.events.emit(r.pulse);
  }
};

// ../node_modules/destr/dist/index.mjs
var suspectProtoRx = /"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/;
var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
var JsonSigRx = /^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/;
function jsonParseTransform(key, value) {
  if (key === "__proto__" || key === "constructor" && value && typeof value === "object" && "prototype" in value) {
    warnKeyDropped(key);
    return;
  }
  return value;
}
function warnKeyDropped(key) {
  console.warn(`[destr] Dropping "${key}" key to prevent prototype pollution.`);
}
function destr(value, options = {}) {
  if (typeof value !== "string") {
    return value;
  }
  if (value[0] === '"' && value[value.length - 1] === '"' && value.indexOf("\\") === -1) {
    return value.slice(1, -1);
  }
  const _value = value.trim();
  if (_value.length <= 9) {
    switch (_value.toLowerCase()) {
      case "true": {
        return true;
      }
      case "false": {
        return false;
      }
      case "undefined": {
        return void 0;
      }
      case "null": {
        return null;
      }
      case "nan": {
        return Number.NaN;
      }
      case "infinity": {
        return Number.POSITIVE_INFINITY;
      }
      case "-infinity": {
        return Number.NEGATIVE_INFINITY;
      }
    }
  }
  if (!JsonSigRx.test(value)) {
    if (options.strict) {
      throw new SyntaxError("[destr] Invalid JSON");
    }
    return value;
  }
  try {
    if (suspectProtoRx.test(value) || suspectConstructorRx.test(value)) {
      if (options.strict) {
        throw new Error("[destr] Possible prototype pollution");
      }
      return JSON.parse(value, jsonParseTransform);
    }
    return JSON.parse(value);
  } catch (error) {
    if (options.strict) {
      throw error;
    }
    return value;
  }
}

// ../node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs
function wrapToPromise(value) {
  if (!value || typeof value.then !== "function") {
    return Promise.resolve(value);
  }
  return value;
}
function asyncCall(function_, ...arguments_) {
  try {
    return wrapToPromise(function_(...arguments_));
  } catch (error) {
    return Promise.reject(error);
  }
}
function isPrimitive(value) {
  const type = typeof value;
  return value === null || type !== "object" && type !== "function";
}
function isPureObject(value) {
  const proto = Object.getPrototypeOf(value);
  return !proto || proto.isPrototypeOf(Object);
}
function stringify3(value) {
  if (isPrimitive(value)) {
    return String(value);
  }
  if (isPureObject(value) || Array.isArray(value)) {
    return JSON.stringify(value);
  }
  if (typeof value.toJSON === "function") {
    return stringify3(value.toJSON());
  }
  throw new Error("[unstorage] Cannot stringify value!");
}
var BASE64_PREFIX = "base64:";
function serializeRaw(value) {
  if (typeof value === "string") {
    return value;
  }
  return BASE64_PREFIX + base64Encode(value);
}
function deserializeRaw(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (!value.startsWith(BASE64_PREFIX)) {
    return value;
  }
  return base64Decode(value.slice(BASE64_PREFIX.length));
}
function base64Decode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input, "base64");
  }
  return Uint8Array.from(
    globalThis.atob(input),
    (c8) => c8.codePointAt(0)
  );
}
function base64Encode(input) {
  if (globalThis.Buffer) {
    return Buffer.from(input).toString("base64");
  }
  return globalThis.btoa(String.fromCodePoint(...input));
}
function normalizeKey(key) {
  var _a;
  if (!key) {
    return "";
  }
  return ((_a = key.split("?")[0]) == null ? void 0 : _a.replace(/[/\\]/g, ":").replace(/:+/g, ":").replace(/^:|:$/g, "")) || "";
}
function joinKeys(...keys2) {
  return normalizeKey(keys2.join(":"));
}
function normalizeBaseKey(base3) {
  base3 = normalizeKey(base3);
  return base3 ? base3 + ":" : "";
}
function filterKeyByDepth(key, depth) {
  if (depth === void 0) {
    return true;
  }
  let substrCount = 0;
  let index2 = key.indexOf(":");
  while (index2 > -1) {
    substrCount++;
    index2 = key.indexOf(":", index2 + 1);
  }
  return substrCount <= depth;
}
function filterKeyByBase(key, base3) {
  if (base3) {
    return key.startsWith(base3) && key[key.length - 1] !== "$";
  }
  return key[key.length - 1] !== "$";
}

// ../node_modules/unstorage/dist/index.mjs
function defineDriver(factory) {
  return factory;
}
var DRIVER_NAME = "memory";
var memory = defineDriver(() => {
  const data = /* @__PURE__ */ new Map();
  return {
    name: DRIVER_NAME,
    getInstance: () => data,
    hasItem(key) {
      return data.has(key);
    },
    getItem(key) {
      return data.get(key) ?? null;
    },
    getItemRaw(key) {
      return data.get(key) ?? null;
    },
    setItem(key, value) {
      data.set(key, value);
    },
    setItemRaw(key, value) {
      data.set(key, value);
    },
    removeItem(key) {
      data.delete(key);
    },
    getKeys() {
      return [...data.keys()];
    },
    clear() {
      data.clear();
    },
    dispose() {
      data.clear();
    }
  };
});
function createStorage(options = {}) {
  const context = {
    mounts: { "": options.driver || memory() },
    mountpoints: [""],
    watching: false,
    watchListeners: [],
    unwatch: {}
  };
  const getMount = (key) => {
    for (const base3 of context.mountpoints) {
      if (key.startsWith(base3)) {
        return {
          base: base3,
          relativeKey: key.slice(base3.length),
          driver: context.mounts[base3]
        };
      }
    }
    return {
      base: "",
      relativeKey: key,
      driver: context.mounts[""]
    };
  };
  const getMounts = (base3, includeParent) => {
    return context.mountpoints.filter(
      (mountpoint) => mountpoint.startsWith(base3) || includeParent && base3.startsWith(mountpoint)
    ).map((mountpoint) => ({
      relativeBase: base3.length > mountpoint.length ? base3.slice(mountpoint.length) : void 0,
      mountpoint,
      driver: context.mounts[mountpoint]
    }));
  };
  const onChange = (event, key) => {
    if (!context.watching) {
      return;
    }
    key = normalizeKey(key);
    for (const listener of context.watchListeners) {
      listener(event, key);
    }
  };
  const startWatch = async () => {
    if (context.watching) {
      return;
    }
    context.watching = true;
    for (const mountpoint in context.mounts) {
      context.unwatch[mountpoint] = await watch(
        context.mounts[mountpoint],
        onChange,
        mountpoint
      );
    }
  };
  const stopWatch = async () => {
    if (!context.watching) {
      return;
    }
    for (const mountpoint in context.unwatch) {
      await context.unwatch[mountpoint]();
    }
    context.unwatch = {};
    context.watching = false;
  };
  const runBatch = (items, commonOptions, cb) => {
    const batches = /* @__PURE__ */ new Map();
    const getBatch = (mount) => {
      let batch = batches.get(mount.base);
      if (!batch) {
        batch = {
          driver: mount.driver,
          base: mount.base,
          items: []
        };
        batches.set(mount.base, batch);
      }
      return batch;
    };
    for (const item of items) {
      const isStringItem = typeof item === "string";
      const key = normalizeKey(isStringItem ? item : item.key);
      const value = isStringItem ? void 0 : item.value;
      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };
      const mount = getMount(key);
      getBatch(mount).items.push({
        key,
        value,
        relativeKey: mount.relativeKey,
        options: options2
      });
    }
    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(
      (r3) => r3.flat()
    );
  };
  const storage = {
    // Item
    hasItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.hasItem, relativeKey, opts);
    },
    getItem(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => destr(value)
      );
    },
    getItems(items, commonOptions = {}) {
      return runBatch(items, commonOptions, (batch) => {
        if (batch.driver.getItems) {
          return asyncCall(
            batch.driver.getItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              options: item.options
            })),
            commonOptions
          ).then(
            (r3) => r3.map((item) => ({
              key: joinKeys(batch.base, item.key),
              value: destr(item.value)
            }))
          );
        }
        return Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.getItem,
              item.relativeKey,
              item.options
            ).then((value) => ({
              key: item.key,
              value: destr(value)
            }));
          })
        );
      });
    },
    getItemRaw(key, opts = {}) {
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.getItemRaw) {
        return asyncCall(driver.getItemRaw, relativeKey, opts);
      }
      return asyncCall(driver.getItem, relativeKey, opts).then(
        (value) => deserializeRaw(value)
      );
    },
    async setItem(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.setItem) {
        return;
      }
      await asyncCall(driver.setItem, relativeKey, stringify3(value), opts);
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async setItems(items, commonOptions) {
      await runBatch(items, commonOptions, async (batch) => {
        if (batch.driver.setItems) {
          return asyncCall(
            batch.driver.setItems,
            batch.items.map((item) => ({
              key: item.relativeKey,
              value: stringify3(item.value),
              options: item.options
            })),
            commonOptions
          );
        }
        if (!batch.driver.setItem) {
          return;
        }
        await Promise.all(
          batch.items.map((item) => {
            return asyncCall(
              batch.driver.setItem,
              item.relativeKey,
              stringify3(item.value),
              item.options
            );
          })
        );
      });
    },
    async setItemRaw(key, value, opts = {}) {
      if (value === void 0) {
        return storage.removeItem(key, opts);
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (driver.setItemRaw) {
        await asyncCall(driver.setItemRaw, relativeKey, value, opts);
      } else if (driver.setItem) {
        await asyncCall(driver.setItem, relativeKey, serializeRaw(value), opts);
      } else {
        return;
      }
      if (!driver.watch) {
        onChange("update", key);
      }
    },
    async removeItem(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { removeMeta: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      if (!driver.removeItem) {
        return;
      }
      await asyncCall(driver.removeItem, relativeKey, opts);
      if (opts.removeMeta || opts.removeMata) {
        await asyncCall(driver.removeItem, relativeKey + "$", opts);
      }
      if (!driver.watch) {
        onChange("remove", key);
      }
    },
    // Meta
    async getMeta(key, opts = {}) {
      if (typeof opts === "boolean") {
        opts = { nativeOnly: opts };
      }
      key = normalizeKey(key);
      const { relativeKey, driver } = getMount(key);
      const meta = /* @__PURE__ */ Object.create(null);
      if (driver.getMeta) {
        Object.assign(meta, await asyncCall(driver.getMeta, relativeKey, opts));
      }
      if (!opts.nativeOnly) {
        const value = await asyncCall(
          driver.getItem,
          relativeKey + "$",
          opts
        ).then((value_) => destr(value_));
        if (value && typeof value === "object") {
          if (typeof value.atime === "string") {
            value.atime = new Date(value.atime);
          }
          if (typeof value.mtime === "string") {
            value.mtime = new Date(value.mtime);
          }
          Object.assign(meta, value);
        }
      }
      return meta;
    },
    setMeta(key, value, opts = {}) {
      return this.setItem(key + "$", value, opts);
    },
    removeMeta(key, opts = {}) {
      return this.removeItem(key + "$", opts);
    },
    // Keys
    async getKeys(base3, opts = {}) {
      var _a;
      base3 = normalizeBaseKey(base3);
      const mounts = getMounts(base3, true);
      let maskedMounts = [];
      const allKeys = [];
      let allMountsSupportMaxDepth = true;
      for (const mount of mounts) {
        if (!((_a = mount.driver.flags) == null ? void 0 : _a.maxDepth)) {
          allMountsSupportMaxDepth = false;
        }
        const rawKeys = await asyncCall(
          mount.driver.getKeys,
          mount.relativeBase,
          opts
        );
        for (const key of rawKeys) {
          const fullKey = mount.mountpoint + normalizeKey(key);
          if (!maskedMounts.some((p6) => fullKey.startsWith(p6))) {
            allKeys.push(fullKey);
          }
        }
        maskedMounts = [
          mount.mountpoint,
          ...maskedMounts.filter((p6) => !p6.startsWith(mount.mountpoint))
        ];
      }
      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;
      return allKeys.filter(
        (key) => (!shouldFilterByDepth || filterKeyByDepth(key, opts.maxDepth)) && filterKeyByBase(key, base3)
      );
    },
    // Utils
    async clear(base3, opts = {}) {
      base3 = normalizeBaseKey(base3);
      await Promise.all(
        getMounts(base3, false).map(async (m4) => {
          if (m4.driver.clear) {
            return asyncCall(m4.driver.clear, m4.relativeBase, opts);
          }
          if (m4.driver.removeItem) {
            const keys2 = await m4.driver.getKeys(m4.relativeBase || "", opts);
            return Promise.all(
              keys2.map((key) => m4.driver.removeItem(key, opts))
            );
          }
        })
      );
    },
    async dispose() {
      await Promise.all(
        Object.values(context.mounts).map((driver) => dispose(driver))
      );
    },
    async watch(callback) {
      await startWatch();
      context.watchListeners.push(callback);
      return async () => {
        context.watchListeners = context.watchListeners.filter(
          (listener) => listener !== callback
        );
        if (context.watchListeners.length === 0) {
          await stopWatch();
        }
      };
    },
    async unwatch() {
      context.watchListeners = [];
      await stopWatch();
    },
    // Mount
    mount(base3, driver) {
      base3 = normalizeBaseKey(base3);
      if (base3 && context.mounts[base3]) {
        throw new Error(`already mounted at ${base3}`);
      }
      if (base3) {
        context.mountpoints.push(base3);
        context.mountpoints.sort((a3, b6) => b6.length - a3.length);
      }
      context.mounts[base3] = driver;
      if (context.watching) {
        Promise.resolve(watch(driver, onChange, base3)).then((unwatcher) => {
          context.unwatch[base3] = unwatcher;
        }).catch(console.error);
      }
      return storage;
    },
    async unmount(base3, _dispose = true) {
      var _a, _b;
      base3 = normalizeBaseKey(base3);
      if (!base3 || !context.mounts[base3]) {
        return;
      }
      if (context.watching && base3 in context.unwatch) {
        (_b = (_a = context.unwatch)[base3]) == null ? void 0 : _b.call(_a);
        delete context.unwatch[base3];
      }
      if (_dispose) {
        await dispose(context.mounts[base3]);
      }
      context.mountpoints = context.mountpoints.filter((key) => key !== base3);
      delete context.mounts[base3];
    },
    getMount(key = "") {
      key = normalizeKey(key) + ":";
      const m4 = getMount(key);
      return {
        driver: m4.driver,
        base: m4.base
      };
    },
    getMounts(base3 = "", opts = {}) {
      base3 = normalizeKey(base3);
      const mounts = getMounts(base3, opts.parents);
      return mounts.map((m4) => ({
        driver: m4.driver,
        base: m4.mountpoint
      }));
    },
    // Aliases
    keys: (base3, opts = {}) => storage.getKeys(base3, opts),
    get: (key, opts = {}) => storage.getItem(key, opts),
    set: (key, value, opts = {}) => storage.setItem(key, value, opts),
    has: (key, opts = {}) => storage.hasItem(key, opts),
    del: (key, opts = {}) => storage.removeItem(key, opts),
    remove: (key, opts = {}) => storage.removeItem(key, opts)
  };
  return storage;
}
function watch(driver, onChange, base3) {
  return driver.watch ? driver.watch((event, key) => onChange(event, base3 + key)) : () => {
  };
}
async function dispose(driver) {
  if (typeof driver.dispose === "function") {
    await asyncCall(driver.dispose);
  }
}

// ../node_modules/idb-keyval/dist/index.js
function promisifyRequest(request) {
  return new Promise((resolve, reject) => {
    request.oncomplete = request.onsuccess = () => resolve(request.result);
    request.onabort = request.onerror = () => reject(request.error);
  });
}
function createStore(dbName, storeName) {
  let dbp;
  const getDB = () => {
    if (dbp)
      return dbp;
    const request = indexedDB.open(dbName);
    request.onupgradeneeded = () => request.result.createObjectStore(storeName);
    dbp = promisifyRequest(request);
    dbp.then((db) => {
      db.onclose = () => dbp = void 0;
    }, () => {
    });
    return dbp;
  };
  return (txMode, callback) => getDB().then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));
}
var defaultGetStoreFunc;
function defaultGetStore() {
  if (!defaultGetStoreFunc) {
    defaultGetStoreFunc = createStore("keyval-store", "keyval");
  }
  return defaultGetStoreFunc;
}
function get(key, customStore = defaultGetStore()) {
  return customStore("readonly", (store) => promisifyRequest(store.get(key)));
}
function set(key, value, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.put(value, key);
    return promisifyRequest(store.transaction);
  });
}
function del(key, customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.delete(key);
    return promisifyRequest(store.transaction);
  });
}
function clear(customStore = defaultGetStore()) {
  return customStore("readwrite", (store) => {
    store.clear();
    return promisifyRequest(store.transaction);
  });
}
function eachCursor(store, callback) {
  store.openCursor().onsuccess = function() {
    if (!this.result)
      return;
    callback(this.result);
    this.result.continue();
  };
  return promisifyRequest(store.transaction);
}
function keys(customStore = defaultGetStore()) {
  return customStore("readonly", (store) => {
    if (store.getAllKeys) {
      return promisifyRequest(store.getAllKeys());
    }
    const items = [];
    return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);
  });
}

// ../node_modules/@walletconnect/safe-json/dist/esm/index.js
var JSONStringify = (data) => JSON.stringify(data, (_4, value) => typeof value === "bigint" ? value.toString() + "n" : value);
var JSONParse = (json) => {
  const numbersBiggerThanMaxInt = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g;
  const serializedData = json.replace(numbersBiggerThanMaxInt, '$1"$2n"$3');
  return JSON.parse(serializedData, (_4, value) => {
    const isCustomFormatBigInt = typeof value === "string" && value.match(/^\d+n$/);
    if (isCustomFormatBigInt)
      return BigInt(value.substring(0, value.length - 1));
    return value;
  });
};
function safeJsonParse(value) {
  if (typeof value !== "string") {
    throw new Error(`Cannot safe json parse value of type ${typeof value}`);
  }
  try {
    return JSONParse(value);
  } catch (_a) {
    return value;
  }
}
function safeJsonStringify(value) {
  return typeof value === "string" ? value : JSONStringify(value) || "";
}

// ../node_modules/@walletconnect/keyvaluestorage/dist/index.es.js
var x = "idb-keyval";
var z = (i5 = {}) => {
  const t2 = i5.base && i5.base.length > 0 ? `${i5.base}:` : "", e3 = (s4) => t2 + s4;
  let n5;
  return i5.dbName && i5.storeName && (n5 = createStore(i5.dbName, i5.storeName)), { name: x, options: i5, async hasItem(s4) {
    return !(typeof await get(e3(s4), n5) > "u");
  }, async getItem(s4) {
    return await get(e3(s4), n5) ?? null;
  }, setItem(s4, a3) {
    return set(e3(s4), a3, n5);
  }, removeItem(s4) {
    return del(e3(s4), n5);
  }, getKeys() {
    return keys(n5);
  }, clear() {
    return clear(n5);
  } };
};
var D = "WALLET_CONNECT_V2_INDEXED_DB";
var E = "keyvaluestorage";
var _ = class {
  constructor() {
    this.indexedDb = createStorage({ driver: z({ dbName: D, storeName: E }) });
  }
  async getKeys() {
    return this.indexedDb.getKeys();
  }
  async getEntries() {
    return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t2) => [t2.key, t2.value]);
  }
  async getItem(t2) {
    const e3 = await this.indexedDb.getItem(t2);
    if (e3 !== null) return e3;
  }
  async setItem(t2, e3) {
    await this.indexedDb.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    await this.indexedDb.removeItem(t2);
  }
};
var l3 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var c2 = { exports: {} };
(function() {
  let i5;
  function t2() {
  }
  i5 = t2, i5.prototype.getItem = function(e3) {
    return this.hasOwnProperty(e3) ? String(this[e3]) : null;
  }, i5.prototype.setItem = function(e3, n5) {
    this[e3] = String(n5);
  }, i5.prototype.removeItem = function(e3) {
    delete this[e3];
  }, i5.prototype.clear = function() {
    const e3 = this;
    Object.keys(e3).forEach(function(n5) {
      e3[n5] = void 0, delete e3[n5];
    });
  }, i5.prototype.key = function(e3) {
    return e3 = e3 || 0, Object.keys(this)[e3];
  }, i5.prototype.__defineGetter__("length", function() {
    return Object.keys(this).length;
  }), typeof l3 < "u" && l3.localStorage ? c2.exports = l3.localStorage : typeof window < "u" && window.localStorage ? c2.exports = window.localStorage : c2.exports = new t2();
})();
function k(i5) {
  var t2;
  return [i5[0], safeJsonParse((t2 = i5[1]) != null ? t2 : "")];
}
var K = class {
  constructor() {
    this.localStorage = c2.exports;
  }
  async getKeys() {
    return Object.keys(this.localStorage);
  }
  async getEntries() {
    return Object.entries(this.localStorage).map(k);
  }
  async getItem(t2) {
    const e3 = this.localStorage.getItem(t2);
    if (e3 !== null) return safeJsonParse(e3);
  }
  async setItem(t2, e3) {
    this.localStorage.setItem(t2, safeJsonStringify(e3));
  }
  async removeItem(t2) {
    this.localStorage.removeItem(t2);
  }
};
var N = "wc_storage_version";
var y2 = 1;
var O = async (i5, t2, e3) => {
  const n5 = N, s4 = await t2.getItem(n5);
  if (s4 && s4 >= y2) {
    e3(t2);
    return;
  }
  const a3 = await i5.getKeys();
  if (!a3.length) {
    e3(t2);
    return;
  }
  const m4 = [];
  for (; a3.length; ) {
    const r3 = a3.shift();
    if (!r3) continue;
    const o6 = r3.toLowerCase();
    if (o6.includes("wc@") || o6.includes("walletconnect") || o6.includes("wc_") || o6.includes("wallet_connect")) {
      const f10 = await i5.getItem(r3);
      await t2.setItem(r3, f10), m4.push(r3);
    }
  }
  await t2.setItem(n5, y2), e3(t2), j(i5, m4);
};
var j = async (i5, t2) => {
  t2.length && t2.forEach(async (e3) => {
    await i5.removeItem(e3);
  });
};
var h2 = class {
  constructor() {
    this.initialized = false, this.setInitialized = (e3) => {
      this.storage = e3, this.initialized = true;
    };
    const t2 = new K();
    this.storage = t2;
    try {
      const e3 = new _();
      O(t2, e3, this.setInitialized);
    } catch {
      this.initialized = true;
    }
  }
  async getKeys() {
    return await this.initialize(), this.storage.getKeys();
  }
  async getEntries() {
    return await this.initialize(), this.storage.getEntries();
  }
  async getItem(t2) {
    return await this.initialize(), this.storage.getItem(t2);
  }
  async setItem(t2, e3) {
    return await this.initialize(), this.storage.setItem(t2, e3);
  }
  async removeItem(t2) {
    return await this.initialize(), this.storage.removeItem(t2);
  }
  async initialize() {
    this.initialized || await new Promise((t2) => {
      const e3 = setInterval(() => {
        this.initialized && (clearInterval(e3), t2());
      }, 20);
    });
  }
};

// ../node_modules/@walletconnect/logger/dist/index.es.js
var import_pino = __toESM(require_browser());
var import_pino2 = __toESM(require_browser());
var c3 = { level: "info" };
var n2 = "custom_context";
var l4 = 1e3 * 1024;
var O2 = class {
  constructor(e3) {
    this.nodeValue = e3, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;
  }
  get value() {
    return this.nodeValue;
  }
  get size() {
    return this.sizeInBytes;
  }
};
var d = class {
  constructor(e3) {
    this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e3, this.sizeInBytes = 0;
  }
  append(e3) {
    const t2 = new O2(e3);
    if (t2.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e3} with size ${t2.size}`);
    for (; this.size + t2.size > this.maxSizeInBytes; ) this.shift();
    this.head ? (this.tail && (this.tail.next = t2), this.tail = t2) : (this.head = t2, this.tail = t2), this.lengthInNodes++, this.sizeInBytes += t2.size;
  }
  shift() {
    if (!this.head) return;
    const e3 = this.head;
    this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e3.size;
  }
  toArray() {
    const e3 = [];
    let t2 = this.head;
    for (; t2 !== null; ) e3.push(t2.value), t2 = t2.next;
    return e3;
  }
  get length() {
    return this.lengthInNodes;
  }
  get size() {
    return this.sizeInBytes;
  }
  toOrderedArray() {
    return Array.from(this);
  }
  [Symbol.iterator]() {
    let e3 = this.head;
    return { next: () => {
      if (!e3) return { done: true, value: null };
      const t2 = e3.value;
      return e3 = e3.next, { done: false, value: t2 };
    } };
  }
};
var L = class {
  constructor(e3, t2 = l4) {
    this.level = e3 ?? "error", this.levelValue = import_pino.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t2, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  forwardToConsole(e3, t2) {
    t2 === import_pino.levels.values.error ? console.error(e3) : t2 === import_pino.levels.values.warn ? console.warn(e3) : t2 === import_pino.levels.values.debug ? console.debug(e3) : t2 === import_pino.levels.values.trace ? console.trace(e3) : console.log(e3);
  }
  appendToLogs(e3) {
    this.logs.append(safeJsonStringify({ timestamp: (/* @__PURE__ */ new Date()).toISOString(), log: e3 }));
    const t2 = typeof e3 == "string" ? JSON.parse(e3).level : e3.level;
    t2 >= this.levelValue && this.forwardToConsole(e3, t2);
  }
  getLogs() {
    return this.logs;
  }
  clearLogs() {
    this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);
  }
  getLogArray() {
    return Array.from(this.logs);
  }
  logsToBlob(e3) {
    const t2 = this.getLogArray();
    return t2.push(safeJsonStringify({ extraMetadata: e3 })), new Blob(t2, { type: "application/json" });
  }
};
var m = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
  downloadLogsBlobInBrowser(e3) {
    const t2 = URL.createObjectURL(this.logsToBlob(e3)), o6 = document.createElement("a");
    o6.href = t2, o6.download = `walletconnect-logs-${(/* @__PURE__ */ new Date()).toISOString()}.txt`, document.body.appendChild(o6), o6.click(), document.body.removeChild(o6), URL.revokeObjectURL(t2);
  }
};
var B = class {
  constructor(e3, t2 = l4) {
    this.baseChunkLogger = new L(e3, t2);
  }
  write(e3) {
    this.baseChunkLogger.appendToLogs(e3);
  }
  getLogs() {
    return this.baseChunkLogger.getLogs();
  }
  clearLogs() {
    this.baseChunkLogger.clearLogs();
  }
  getLogArray() {
    return this.baseChunkLogger.getLogArray();
  }
  logsToBlob(e3) {
    return this.baseChunkLogger.logsToBlob(e3);
  }
};
var x2 = Object.defineProperty;
var S = Object.defineProperties;
var _2 = Object.getOwnPropertyDescriptors;
var p = Object.getOwnPropertySymbols;
var T = Object.prototype.hasOwnProperty;
var z2 = Object.prototype.propertyIsEnumerable;
var f2 = (r3, e3, t2) => e3 in r3 ? x2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var i3 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) T.call(e3, t2) && f2(r3, t2, e3[t2]);
  if (p) for (var t2 of p(e3)) z2.call(e3, t2) && f2(r3, t2, e3[t2]);
  return r3;
};
var g = (r3, e3) => S(r3, _2(e3));
function k2(r3) {
  return g(i3({}, r3), { level: (r3 == null ? void 0 : r3.level) || c3.level });
}
function v(r3, e3 = n2) {
  return r3[e3] || "";
}
function b(r3, e3, t2 = n2) {
  return r3[t2] = e3, r3;
}
function y3(r3, e3 = n2) {
  let t2 = "";
  return typeof r3.bindings > "u" ? t2 = v(r3, e3) : t2 = r3.bindings().context || "", t2;
}
function w(r3, e3, t2 = n2) {
  const o6 = y3(r3, t2);
  return o6.trim() ? `${o6}/${e3}` : e3;
}
function E2(r3, e3, t2 = n2) {
  const o6 = w(r3, e3, t2), a3 = r3.child({ context: o6 });
  return b(a3, o6, t2);
}
function C(r3) {
  var e3, t2;
  const o6 = new m((e3 = r3.opts) == null ? void 0 : e3.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i3({}, r3.opts), { level: "trace", browser: g(i3({}, (t2 = r3.opts) == null ? void 0 : t2.browser), { write: (a3) => o6.write(a3) }) })), chunkLoggerController: o6 };
}
function I(r3) {
  var e3;
  const t2 = new B((e3 = r3.opts) == null ? void 0 : e3.level, r3.maxSizeInBytes);
  return { logger: (0, import_pino.default)(g(i3({}, r3.opts), { level: "trace" }), t2), chunkLoggerController: t2 };
}
function A(r3) {
  return typeof r3.loggerOverride < "u" && typeof r3.loggerOverride != "string" ? { logger: r3.loggerOverride, chunkLoggerController: null } : typeof window < "u" ? C(r3) : I(r3);
}

// ../node_modules/@walletconnect/types/dist/index.es.js
var import_events4 = __toESM(require_events());
var a2 = Object.defineProperty;
var u2 = (e3, s4, r3) => s4 in e3 ? a2(e3, s4, { enumerable: true, configurable: true, writable: true, value: r3 }) : e3[s4] = r3;
var c4 = (e3, s4, r3) => u2(e3, typeof s4 != "symbol" ? s4 + "" : s4, r3);
var h4 = class extends IEvents {
  constructor(s4) {
    super(), this.opts = s4, c4(this, "protocol", "wc"), c4(this, "version", 2);
  }
};
var p2 = Object.defineProperty;
var b2 = (e3, s4, r3) => s4 in e3 ? p2(e3, s4, { enumerable: true, configurable: true, writable: true, value: r3 }) : e3[s4] = r3;
var v2 = (e3, s4, r3) => b2(e3, typeof s4 != "symbol" ? s4 + "" : s4, r3);
var I2 = class extends IEvents {
  constructor(s4, r3) {
    super(), this.core = s4, this.logger = r3, v2(this, "records", /* @__PURE__ */ new Map());
  }
};
var y4 = class {
  constructor(s4, r3) {
    this.logger = s4, this.core = r3;
  }
};
var m2 = class extends IEvents {
  constructor(s4, r3) {
    super(), this.relayer = s4, this.logger = r3;
  }
};
var d2 = class extends IEvents {
  constructor(s4) {
    super();
  }
};
var f3 = class {
  constructor(s4, r3, t2, q3) {
    this.core = s4, this.logger = r3, this.name = t2;
  }
};
var P2 = class extends IEvents {
  constructor(s4, r3) {
    super(), this.relayer = s4, this.logger = r3;
  }
};
var S2 = class extends IEvents {
  constructor(s4, r3) {
    super(), this.core = s4, this.logger = r3;
  }
};
var M = class {
  constructor(s4, r3, t2) {
    this.core = s4, this.logger = r3, this.store = t2;
  }
};
var O3 = class {
  constructor(s4, r3) {
    this.projectId = s4, this.logger = r3;
  }
};
var R = class {
  constructor(s4, r3, t2) {
    this.core = s4, this.logger = r3, this.telemetryEnabled = t2;
  }
};
var T2 = Object.defineProperty;
var k3 = (e3, s4, r3) => s4 in e3 ? T2(e3, s4, { enumerable: true, configurable: true, writable: true, value: r3 }) : e3[s4] = r3;
var i4 = (e3, s4, r3) => k3(e3, typeof s4 != "symbol" ? s4 + "" : s4, r3);
var J = class {
  constructor(s4) {
    this.opts = s4, i4(this, "protocol", "wc"), i4(this, "version", 2);
  }
};
var V = class {
  constructor(s4) {
    this.client = s4;
  }
};

// ../node_modules/@walletconnect/core/dist/index.es.js
var import_time4 = __toESM(require_cjs());

// ../node_modules/@walletconnect/relay-auth/dist/index.es.js
var import_time2 = __toESM(require_cjs());
function En(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function fe(t2, ...e3) {
  if (!En(t2)) throw new Error("Uint8Array expected");
  if (e3.length > 0 && !e3.includes(t2.length)) throw new Error("Uint8Array expected of length " + e3 + ", got length=" + t2.length);
}
function De(t2, e3 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e3 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function gn(t2, e3) {
  fe(t2);
  const n5 = e3.outputLen;
  if (t2.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var it = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
var _t = (t2) => new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
function yn(t2) {
  if (typeof t2 != "string") throw new Error("utf8ToBytes expected string, got " + typeof t2);
  return new Uint8Array(new TextEncoder().encode(t2));
}
function de(t2) {
  return typeof t2 == "string" && (t2 = yn(t2)), fe(t2), t2;
}
var xn = class {
  clone() {
    return this._cloneInto();
  }
};
function Bn(t2) {
  const e3 = (r3) => t2().update(de(r3)).digest(), n5 = t2();
  return e3.outputLen = n5.outputLen, e3.blockLen = n5.blockLen, e3.create = () => t2(), e3;
}
function he(t2 = 32) {
  if (it && typeof it.getRandomValues == "function") return it.getRandomValues(new Uint8Array(t2));
  if (it && typeof it.randomBytes == "function") return it.randomBytes(t2);
  throw new Error("crypto.getRandomValues must be defined");
}
function Cn(t2, e3, n5, r3) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e3, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), a3 = Number(n5 >> o6 & s4), u4 = Number(n5 & s4), i5 = r3 ? 4 : 0, D3 = r3 ? 0 : 4;
  t2.setUint32(e3 + i5, a3, r3), t2.setUint32(e3 + D3, u4, r3);
}
var An = class extends xn {
  constructor(e3, n5, r3, o6) {
    super(), this.blockLen = e3, this.outputLen = n5, this.padOffset = r3, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e3), this.view = _t(this.buffer);
  }
  update(e3) {
    De(this);
    const { view: n5, buffer: r3, blockLen: o6 } = this;
    e3 = de(e3);
    const s4 = e3.length;
    for (let a3 = 0; a3 < s4; ) {
      const u4 = Math.min(o6 - this.pos, s4 - a3);
      if (u4 === o6) {
        const i5 = _t(e3);
        for (; o6 <= s4 - a3; a3 += o6) this.process(i5, a3);
        continue;
      }
      r3.set(e3.subarray(a3, a3 + u4), this.pos), this.pos += u4, a3 += u4, this.pos === o6 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += e3.length, this.roundClean(), this;
  }
  digestInto(e3) {
    De(this), gn(e3, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o6, isLE: s4 } = this;
    let { pos: a3 } = this;
    n5[a3++] = 128, this.buffer.subarray(a3).fill(0), this.padOffset > o6 - a3 && (this.process(r3, 0), a3 = 0);
    for (let l8 = a3; l8 < o6; l8++) n5[l8] = 0;
    Cn(r3, o6 - 8, BigInt(this.length * 8), s4), this.process(r3, 0);
    const u4 = _t(e3), i5 = this.outputLen;
    if (i5 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const D3 = i5 / 4, c8 = this.get();
    if (D3 > c8.length) throw new Error("_sha2: outputLen bigger than state");
    for (let l8 = 0; l8 < D3; l8++) u4.setUint32(4 * l8, c8[l8], s4);
  }
  digest() {
    const { buffer: e3, outputLen: n5 } = this;
    this.digestInto(e3);
    const r3 = e3.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(e3) {
    e3 || (e3 = new this.constructor()), e3.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o6, finished: s4, destroyed: a3, pos: u4 } = this;
    return e3.length = o6, e3.pos = u4, e3.finished = s4, e3.destroyed = a3, o6 % n5 && e3.buffer.set(r3), e3;
  }
};
var wt = BigInt(2 ** 32 - 1);
var St = BigInt(32);
function le(t2, e3 = false) {
  return e3 ? { h: Number(t2 & wt), l: Number(t2 >> St & wt) } : { h: Number(t2 >> St & wt) | 0, l: Number(t2 & wt) | 0 };
}
function mn(t2, e3 = false) {
  let n5 = new Uint32Array(t2.length), r3 = new Uint32Array(t2.length);
  for (let o6 = 0; o6 < t2.length; o6++) {
    const { h: s4, l: a3 } = le(t2[o6], e3);
    [n5[o6], r3[o6]] = [s4, a3];
  }
  return [n5, r3];
}
var _n = (t2, e3) => BigInt(t2 >>> 0) << St | BigInt(e3 >>> 0);
var Sn = (t2, e3, n5) => t2 >>> n5;
var vn = (t2, e3, n5) => t2 << 32 - n5 | e3 >>> n5;
var In = (t2, e3, n5) => t2 >>> n5 | e3 << 32 - n5;
var Un = (t2, e3, n5) => t2 << 32 - n5 | e3 >>> n5;
var Tn = (t2, e3, n5) => t2 << 64 - n5 | e3 >>> n5 - 32;
var Fn = (t2, e3, n5) => t2 >>> n5 - 32 | e3 << 64 - n5;
var Nn = (t2, e3) => e3;
var Ln = (t2, e3) => t2;
var On = (t2, e3, n5) => t2 << n5 | e3 >>> 32 - n5;
var Hn = (t2, e3, n5) => e3 << n5 | t2 >>> 32 - n5;
var zn = (t2, e3, n5) => e3 << n5 - 32 | t2 >>> 64 - n5;
var Mn = (t2, e3, n5) => t2 << n5 - 32 | e3 >>> 64 - n5;
function qn(t2, e3, n5, r3) {
  const o6 = (e3 >>> 0) + (r3 >>> 0);
  return { h: t2 + n5 + (o6 / 2 ** 32 | 0) | 0, l: o6 | 0 };
}
var $n = (t2, e3, n5) => (t2 >>> 0) + (e3 >>> 0) + (n5 >>> 0);
var kn = (t2, e3, n5, r3) => e3 + n5 + r3 + (t2 / 2 ** 32 | 0) | 0;
var Rn = (t2, e3, n5, r3) => (t2 >>> 0) + (e3 >>> 0) + (n5 >>> 0) + (r3 >>> 0);
var jn = (t2, e3, n5, r3, o6) => e3 + n5 + r3 + o6 + (t2 / 2 ** 32 | 0) | 0;
var Zn = (t2, e3, n5, r3, o6) => (t2 >>> 0) + (e3 >>> 0) + (n5 >>> 0) + (r3 >>> 0) + (o6 >>> 0);
var Gn = (t2, e3, n5, r3, o6, s4) => e3 + n5 + r3 + o6 + s4 + (t2 / 2 ** 32 | 0) | 0;
var x3 = { fromBig: le, split: mn, toBig: _n, shrSH: Sn, shrSL: vn, rotrSH: In, rotrSL: Un, rotrBH: Tn, rotrBL: Fn, rotr32H: Nn, rotr32L: Ln, rotlSH: On, rotlSL: Hn, rotlBH: zn, rotlBL: Mn, add: qn, add3L: $n, add3H: kn, add4L: Rn, add4H: jn, add5H: Gn, add5L: Zn };
var [Vn, Yn] = (() => x3.split(["0x428a2f98d728ae22", "0x7137449123ef65cd", "0xb5c0fbcfec4d3b2f", "0xe9b5dba58189dbbc", "0x3956c25bf348b538", "0x59f111f1b605d019", "0x923f82a4af194f9b", "0xab1c5ed5da6d8118", "0xd807aa98a3030242", "0x12835b0145706fbe", "0x243185be4ee4b28c", "0x550c7dc3d5ffb4e2", "0x72be5d74f27b896f", "0x80deb1fe3b1696b1", "0x9bdc06a725c71235", "0xc19bf174cf692694", "0xe49b69c19ef14ad2", "0xefbe4786384f25e3", "0x0fc19dc68b8cd5b5", "0x240ca1cc77ac9c65", "0x2de92c6f592b0275", "0x4a7484aa6ea6e483", "0x5cb0a9dcbd41fbd4", "0x76f988da831153b5", "0x983e5152ee66dfab", "0xa831c66d2db43210", "0xb00327c898fb213f", "0xbf597fc7beef0ee4", "0xc6e00bf33da88fc2", "0xd5a79147930aa725", "0x06ca6351e003826f", "0x142929670a0e6e70", "0x27b70a8546d22ffc", "0x2e1b21385c26c926", "0x4d2c6dfc5ac42aed", "0x53380d139d95b3df", "0x650a73548baf63de", "0x766a0abb3c77b2a8", "0x81c2c92e47edaee6", "0x92722c851482353b", "0xa2bfe8a14cf10364", "0xa81a664bbc423001", "0xc24b8b70d0f89791", "0xc76c51a30654be30", "0xd192e819d6ef5218", "0xd69906245565a910", "0xf40e35855771202a", "0x106aa07032bbd1b8", "0x19a4c116b8d2d0c8", "0x1e376c085141ab53", "0x2748774cdf8eeb99", "0x34b0bcb5e19b48a8", "0x391c0cb3c5c95a63", "0x4ed8aa4ae3418acb", "0x5b9cca4f7763e373", "0x682e6ff3d6b2b8a3", "0x748f82ee5defb2fc", "0x78a5636f43172f60", "0x84c87814a1f0ab72", "0x8cc702081a6439ec", "0x90befffa23631e28", "0xa4506cebde82bde9", "0xbef9a3f7b2c67915", "0xc67178f2e372532b", "0xca273eceea26619c", "0xd186b8c721c0c207", "0xeada7dd6cde0eb1e", "0xf57d4f7fee6ed178", "0x06f067aa72176fba", "0x0a637dc5a2c898a6", "0x113f9804bef90dae", "0x1b710b35131c471b", "0x28db77f523047d84", "0x32caab7b40c72493", "0x3c9ebe0a15c9bebc", "0x431d67c49c100d4c", "0x4cc5d4becb3e42b6", "0x597f299cfc657e2a", "0x5fcb6fab3ad6faec", "0x6c44198c4a475817"].map((t2) => BigInt(t2))))();
var P3 = new Uint32Array(80);
var Q = new Uint32Array(80);
var Jn = class extends An {
  constructor() {
    super(128, 64, 16, false), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  get() {
    const { Ah: e3, Al: n5, Bh: r3, Bl: o6, Ch: s4, Cl: a3, Dh: u4, Dl: i5, Eh: D3, El: c8, Fh: l8, Fl: p6, Gh: w6, Gl: h6, Hh: g5, Hl: S5 } = this;
    return [e3, n5, r3, o6, s4, a3, u4, i5, D3, c8, l8, p6, w6, h6, g5, S5];
  }
  set(e3, n5, r3, o6, s4, a3, u4, i5, D3, c8, l8, p6, w6, h6, g5, S5) {
    this.Ah = e3 | 0, this.Al = n5 | 0, this.Bh = r3 | 0, this.Bl = o6 | 0, this.Ch = s4 | 0, this.Cl = a3 | 0, this.Dh = u4 | 0, this.Dl = i5 | 0, this.Eh = D3 | 0, this.El = c8 | 0, this.Fh = l8 | 0, this.Fl = p6 | 0, this.Gh = w6 | 0, this.Gl = h6 | 0, this.Hh = g5 | 0, this.Hl = S5 | 0;
  }
  process(e3, n5) {
    for (let d6 = 0; d6 < 16; d6++, n5 += 4) P3[d6] = e3.getUint32(n5), Q[d6] = e3.getUint32(n5 += 4);
    for (let d6 = 16; d6 < 80; d6++) {
      const m4 = P3[d6 - 15] | 0, F6 = Q[d6 - 15] | 0, q3 = x3.rotrSH(m4, F6, 1) ^ x3.rotrSH(m4, F6, 8) ^ x3.shrSH(m4, F6, 7), z8 = x3.rotrSL(m4, F6, 1) ^ x3.rotrSL(m4, F6, 8) ^ x3.shrSL(m4, F6, 7), I4 = P3[d6 - 2] | 0, O7 = Q[d6 - 2] | 0, ot5 = x3.rotrSH(I4, O7, 19) ^ x3.rotrBH(I4, O7, 61) ^ x3.shrSH(I4, O7, 6), tt4 = x3.rotrSL(I4, O7, 19) ^ x3.rotrBL(I4, O7, 61) ^ x3.shrSL(I4, O7, 6), st5 = x3.add4L(z8, tt4, Q[d6 - 7], Q[d6 - 16]), at3 = x3.add4H(st5, q3, ot5, P3[d6 - 7], P3[d6 - 16]);
      P3[d6] = at3 | 0, Q[d6] = st5 | 0;
    }
    let { Ah: r3, Al: o6, Bh: s4, Bl: a3, Ch: u4, Cl: i5, Dh: D3, Dl: c8, Eh: l8, El: p6, Fh: w6, Fl: h6, Gh: g5, Gl: S5, Hh: v7, Hl: L5 } = this;
    for (let d6 = 0; d6 < 80; d6++) {
      const m4 = x3.rotrSH(l8, p6, 14) ^ x3.rotrSH(l8, p6, 18) ^ x3.rotrBH(l8, p6, 41), F6 = x3.rotrSL(l8, p6, 14) ^ x3.rotrSL(l8, p6, 18) ^ x3.rotrBL(l8, p6, 41), q3 = l8 & w6 ^ ~l8 & g5, z8 = p6 & h6 ^ ~p6 & S5, I4 = x3.add5L(L5, F6, z8, Yn[d6], Q[d6]), O7 = x3.add5H(I4, v7, m4, q3, Vn[d6], P3[d6]), ot5 = I4 | 0, tt4 = x3.rotrSH(r3, o6, 28) ^ x3.rotrBH(r3, o6, 34) ^ x3.rotrBH(r3, o6, 39), st5 = x3.rotrSL(r3, o6, 28) ^ x3.rotrBL(r3, o6, 34) ^ x3.rotrBL(r3, o6, 39), at3 = r3 & s4 ^ r3 & u4 ^ s4 & u4, Ct6 = o6 & a3 ^ o6 & i5 ^ a3 & i5;
      v7 = g5 | 0, L5 = S5 | 0, g5 = w6 | 0, S5 = h6 | 0, w6 = l8 | 0, h6 = p6 | 0, { h: l8, l: p6 } = x3.add(D3 | 0, c8 | 0, O7 | 0, ot5 | 0), D3 = u4 | 0, c8 = i5 | 0, u4 = s4 | 0, i5 = a3 | 0, s4 = r3 | 0, a3 = o6 | 0;
      const At4 = x3.add3L(ot5, st5, Ct6);
      r3 = x3.add3H(At4, O7, tt4, at3), o6 = At4 | 0;
    }
    ({ h: r3, l: o6 } = x3.add(this.Ah | 0, this.Al | 0, r3 | 0, o6 | 0)), { h: s4, l: a3 } = x3.add(this.Bh | 0, this.Bl | 0, s4 | 0, a3 | 0), { h: u4, l: i5 } = x3.add(this.Ch | 0, this.Cl | 0, u4 | 0, i5 | 0), { h: D3, l: c8 } = x3.add(this.Dh | 0, this.Dl | 0, D3 | 0, c8 | 0), { h: l8, l: p6 } = x3.add(this.Eh | 0, this.El | 0, l8 | 0, p6 | 0), { h: w6, l: h6 } = x3.add(this.Fh | 0, this.Fl | 0, w6 | 0, h6 | 0), { h: g5, l: S5 } = x3.add(this.Gh | 0, this.Gl | 0, g5 | 0, S5 | 0), { h: v7, l: L5 } = x3.add(this.Hh | 0, this.Hl | 0, v7 | 0, L5 | 0), this.set(r3, o6, s4, a3, u4, i5, D3, c8, l8, p6, w6, h6, g5, S5, v7, L5);
  }
  roundClean() {
    P3.fill(0), Q.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var Kn = Bn(() => new Jn());
var vt = BigInt(0);
var be = BigInt(1);
var Wn = BigInt(2);
function It(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function Ut(t2) {
  if (!It(t2)) throw new Error("Uint8Array expected");
}
function Tt(t2, e3) {
  if (typeof e3 != "boolean") throw new Error(t2 + " boolean expected, got " + e3);
}
var Xn = Array.from({ length: 256 }, (t2, e3) => e3.toString(16).padStart(2, "0"));
function Ft(t2) {
  Ut(t2);
  let e3 = "";
  for (let n5 = 0; n5 < t2.length; n5++) e3 += Xn[t2[n5]];
  return e3;
}
function pe(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? vt : BigInt("0x" + t2);
}
var K2 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function we(t2) {
  if (t2 >= K2._0 && t2 <= K2._9) return t2 - K2._0;
  if (t2 >= K2.A && t2 <= K2.F) return t2 - (K2.A - 10);
  if (t2 >= K2.a && t2 <= K2.f) return t2 - (K2.a - 10);
}
function Ee(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  const e3 = t2.length, n5 = e3 / 2;
  if (e3 % 2) throw new Error("hex string expected, got unpadded hex of length " + e3);
  const r3 = new Uint8Array(n5);
  for (let o6 = 0, s4 = 0; o6 < n5; o6++, s4 += 2) {
    const a3 = we(t2.charCodeAt(s4)), u4 = we(t2.charCodeAt(s4 + 1));
    if (a3 === void 0 || u4 === void 0) {
      const i5 = t2[s4] + t2[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + i5 + '" at index ' + s4);
    }
    r3[o6] = a3 * 16 + u4;
  }
  return r3;
}
function Pn(t2) {
  return pe(Ft(t2));
}
function Et(t2) {
  return Ut(t2), pe(Ft(Uint8Array.from(t2).reverse()));
}
function ge(t2, e3) {
  return Ee(t2.toString(16).padStart(e3 * 2, "0"));
}
function Nt(t2, e3) {
  return ge(t2, e3).reverse();
}
function W(t2, e3, n5) {
  let r3;
  if (typeof e3 == "string") try {
    r3 = Ee(e3);
  } catch (s4) {
    throw new Error(t2 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (It(e3)) r3 = Uint8Array.from(e3);
  else throw new Error(t2 + " must be hex string or Uint8Array");
  const o6 = r3.length;
  if (typeof n5 == "number" && o6 !== n5) throw new Error(t2 + " of length " + n5 + " expected, got " + o6);
  return r3;
}
function ye(...t2) {
  let e3 = 0;
  for (let r3 = 0; r3 < t2.length; r3++) {
    const o6 = t2[r3];
    Ut(o6), e3 += o6.length;
  }
  const n5 = new Uint8Array(e3);
  for (let r3 = 0, o6 = 0; r3 < t2.length; r3++) {
    const s4 = t2[r3];
    n5.set(s4, o6), o6 += s4.length;
  }
  return n5;
}
var Lt = (t2) => typeof t2 == "bigint" && vt <= t2;
function Qn(t2, e3, n5) {
  return Lt(t2) && Lt(e3) && Lt(n5) && e3 <= t2 && t2 < n5;
}
function ft(t2, e3, n5, r3) {
  if (!Qn(e3, n5, r3)) throw new Error("expected valid " + t2 + ": " + n5 + " <= n < " + r3 + ", got " + e3);
}
function tr(t2) {
  let e3;
  for (e3 = 0; t2 > vt; t2 >>= be, e3 += 1) ;
  return e3;
}
var er = (t2) => (Wn << BigInt(t2 - 1)) - be;
var nr = { bigint: (t2) => typeof t2 == "bigint", function: (t2) => typeof t2 == "function", boolean: (t2) => typeof t2 == "boolean", string: (t2) => typeof t2 == "string", stringOrUint8Array: (t2) => typeof t2 == "string" || It(t2), isSafeInteger: (t2) => Number.isSafeInteger(t2), array: (t2) => Array.isArray(t2), field: (t2, e3) => e3.Fp.isValid(t2), hash: (t2) => typeof t2 == "function" && Number.isSafeInteger(t2.outputLen) };
function Ot(t2, e3, n5 = {}) {
  const r3 = (o6, s4, a3) => {
    const u4 = nr[s4];
    if (typeof u4 != "function") throw new Error("invalid validator function");
    const i5 = t2[o6];
    if (!(a3 && i5 === void 0) && !u4(i5, t2)) throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + i5);
  };
  for (const [o6, s4] of Object.entries(e3)) r3(o6, s4, false);
  for (const [o6, s4] of Object.entries(n5)) r3(o6, s4, true);
  return t2;
}
function xe(t2) {
  const e3 = /* @__PURE__ */ new WeakMap();
  return (n5, ...r3) => {
    const o6 = e3.get(n5);
    if (o6 !== void 0) return o6;
    const s4 = t2(n5, ...r3);
    return e3.set(n5, s4), s4;
  };
}
var M2 = BigInt(0);
var N2 = BigInt(1);
var nt = BigInt(2);
var rr = BigInt(3);
var Ht = BigInt(4);
var Be = BigInt(5);
var Ce = BigInt(8);
function H(t2, e3) {
  const n5 = t2 % e3;
  return n5 >= M2 ? n5 : e3 + n5;
}
function or(t2, e3, n5) {
  if (e3 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= M2) throw new Error("invalid modulus");
  if (n5 === N2) return M2;
  let r3 = N2;
  for (; e3 > M2; ) e3 & N2 && (r3 = r3 * t2 % n5), t2 = t2 * t2 % n5, e3 >>= N2;
  return r3;
}
function J2(t2, e3, n5) {
  let r3 = t2;
  for (; e3-- > M2; ) r3 *= r3, r3 %= n5;
  return r3;
}
function Ae(t2, e3) {
  if (t2 === M2) throw new Error("invert: expected non-zero number");
  if (e3 <= M2) throw new Error("invert: expected positive modulus, got " + e3);
  let n5 = H(t2, e3), r3 = e3, o6 = M2, s4 = N2;
  for (; n5 !== M2; ) {
    const u4 = r3 / n5, i5 = r3 % n5, D3 = o6 - s4 * u4;
    r3 = n5, n5 = i5, o6 = s4, s4 = D3;
  }
  if (r3 !== N2) throw new Error("invert: does not exist");
  return H(o6, e3);
}
function sr(t2) {
  const e3 = (t2 - N2) / nt;
  let n5, r3, o6;
  for (n5 = t2 - N2, r3 = 0; n5 % nt === M2; n5 /= nt, r3++) ;
  for (o6 = nt; o6 < t2 && or(o6, e3, t2) !== t2 - N2; o6++) if (o6 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r3 === 1) {
    const a3 = (t2 + N2) / Ht;
    return function(i5, D3) {
      const c8 = i5.pow(D3, a3);
      if (!i5.eql(i5.sqr(c8), D3)) throw new Error("Cannot find square root");
      return c8;
    };
  }
  const s4 = (n5 + N2) / nt;
  return function(u4, i5) {
    if (u4.pow(i5, e3) === u4.neg(u4.ONE)) throw new Error("Cannot find square root");
    let D3 = r3, c8 = u4.pow(u4.mul(u4.ONE, o6), n5), l8 = u4.pow(i5, s4), p6 = u4.pow(i5, n5);
    for (; !u4.eql(p6, u4.ONE); ) {
      if (u4.eql(p6, u4.ZERO)) return u4.ZERO;
      let w6 = 1;
      for (let g5 = u4.sqr(p6); w6 < D3 && !u4.eql(g5, u4.ONE); w6++) g5 = u4.sqr(g5);
      const h6 = u4.pow(c8, N2 << BigInt(D3 - w6 - 1));
      c8 = u4.sqr(h6), l8 = u4.mul(l8, h6), p6 = u4.mul(p6, c8), D3 = w6;
    }
    return l8;
  };
}
function ir(t2) {
  if (t2 % Ht === rr) {
    const e3 = (t2 + N2) / Ht;
    return function(r3, o6) {
      const s4 = r3.pow(o6, e3);
      if (!r3.eql(r3.sqr(s4), o6)) throw new Error("Cannot find square root");
      return s4;
    };
  }
  if (t2 % Ce === Be) {
    const e3 = (t2 - Be) / Ce;
    return function(r3, o6) {
      const s4 = r3.mul(o6, nt), a3 = r3.pow(s4, e3), u4 = r3.mul(o6, a3), i5 = r3.mul(r3.mul(u4, nt), a3), D3 = r3.mul(u4, r3.sub(i5, r3.ONE));
      if (!r3.eql(r3.sqr(D3), o6)) throw new Error("Cannot find square root");
      return D3;
    };
  }
  return sr(t2);
}
var ur = (t2, e3) => (H(t2, e3) & N2) === N2;
var cr = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function ar(t2) {
  const e3 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n5 = cr.reduce((r3, o6) => (r3[o6] = "function", r3), e3);
  return Ot(t2, n5);
}
function fr(t2, e3, n5) {
  if (n5 < M2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 === M2) return t2.ONE;
  if (n5 === N2) return e3;
  let r3 = t2.ONE, o6 = e3;
  for (; n5 > M2; ) n5 & N2 && (r3 = t2.mul(r3, o6)), o6 = t2.sqr(o6), n5 >>= N2;
  return r3;
}
function Dr(t2, e3) {
  const n5 = new Array(e3.length), r3 = e3.reduce((s4, a3, u4) => t2.is0(a3) ? s4 : (n5[u4] = s4, t2.mul(s4, a3)), t2.ONE), o6 = t2.inv(r3);
  return e3.reduceRight((s4, a3, u4) => t2.is0(a3) ? s4 : (n5[u4] = t2.mul(s4, n5[u4]), t2.mul(s4, a3)), o6), n5;
}
function me(t2, e3) {
  const n5 = e3 !== void 0 ? e3 : t2.toString(2).length, r3 = Math.ceil(n5 / 8);
  return { nBitLength: n5, nByteLength: r3 };
}
function _e(t2, e3, n5 = false, r3 = {}) {
  if (t2 <= M2) throw new Error("invalid field: expected ORDER > 0, got " + t2);
  const { nBitLength: o6, nByteLength: s4 } = me(t2, e3);
  if (s4 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let a3;
  const u4 = Object.freeze({ ORDER: t2, isLE: n5, BITS: o6, BYTES: s4, MASK: er(o6), ZERO: M2, ONE: N2, create: (i5) => H(i5, t2), isValid: (i5) => {
    if (typeof i5 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof i5);
    return M2 <= i5 && i5 < t2;
  }, is0: (i5) => i5 === M2, isOdd: (i5) => (i5 & N2) === N2, neg: (i5) => H(-i5, t2), eql: (i5, D3) => i5 === D3, sqr: (i5) => H(i5 * i5, t2), add: (i5, D3) => H(i5 + D3, t2), sub: (i5, D3) => H(i5 - D3, t2), mul: (i5, D3) => H(i5 * D3, t2), pow: (i5, D3) => fr(u4, i5, D3), div: (i5, D3) => H(i5 * Ae(D3, t2), t2), sqrN: (i5) => i5 * i5, addN: (i5, D3) => i5 + D3, subN: (i5, D3) => i5 - D3, mulN: (i5, D3) => i5 * D3, inv: (i5) => Ae(i5, t2), sqrt: r3.sqrt || ((i5) => (a3 || (a3 = ir(t2)), a3(u4, i5))), invertBatch: (i5) => Dr(u4, i5), cmov: (i5, D3, c8) => c8 ? D3 : i5, toBytes: (i5) => n5 ? Nt(i5, s4) : ge(i5, s4), fromBytes: (i5) => {
    if (i5.length !== s4) throw new Error("Field.fromBytes: expected " + s4 + " bytes, got " + i5.length);
    return n5 ? Et(i5) : Pn(i5);
  } });
  return Object.freeze(u4);
}
var Se = BigInt(0);
var gt = BigInt(1);
function zt(t2, e3) {
  const n5 = e3.negate();
  return t2 ? n5 : e3;
}
function ve(t2, e3) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e3) throw new Error("invalid window size, expected [1.." + e3 + "], got W=" + t2);
}
function Mt(t2, e3) {
  ve(t2, e3);
  const n5 = Math.ceil(e3 / t2) + 1, r3 = 2 ** (t2 - 1);
  return { windows: n5, windowSize: r3 };
}
function dr(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array expected");
  t2.forEach((n5, r3) => {
    if (!(n5 instanceof e3)) throw new Error("invalid point at index " + r3);
  });
}
function hr(t2, e3) {
  if (!Array.isArray(t2)) throw new Error("array of scalars expected");
  t2.forEach((n5, r3) => {
    if (!e3.isValid(n5)) throw new Error("invalid scalar at index " + r3);
  });
}
var qt = /* @__PURE__ */ new WeakMap();
var Ie = /* @__PURE__ */ new WeakMap();
function $t(t2) {
  return Ie.get(t2) || 1;
}
function lr(t2, e3) {
  return { constTimeNegate: zt, hasPrecomputes(n5) {
    return $t(n5) !== 1;
  }, unsafeLadder(n5, r3, o6 = t2.ZERO) {
    let s4 = n5;
    for (; r3 > Se; ) r3 & gt && (o6 = o6.add(s4)), s4 = s4.double(), r3 >>= gt;
    return o6;
  }, precomputeWindow(n5, r3) {
    const { windows: o6, windowSize: s4 } = Mt(r3, e3), a3 = [];
    let u4 = n5, i5 = u4;
    for (let D3 = 0; D3 < o6; D3++) {
      i5 = u4, a3.push(i5);
      for (let c8 = 1; c8 < s4; c8++) i5 = i5.add(u4), a3.push(i5);
      u4 = i5.double();
    }
    return a3;
  }, wNAF(n5, r3, o6) {
    const { windows: s4, windowSize: a3 } = Mt(n5, e3);
    let u4 = t2.ZERO, i5 = t2.BASE;
    const D3 = BigInt(2 ** n5 - 1), c8 = 2 ** n5, l8 = BigInt(n5);
    for (let p6 = 0; p6 < s4; p6++) {
      const w6 = p6 * a3;
      let h6 = Number(o6 & D3);
      o6 >>= l8, h6 > a3 && (h6 -= c8, o6 += gt);
      const g5 = w6, S5 = w6 + Math.abs(h6) - 1, v7 = p6 % 2 !== 0, L5 = h6 < 0;
      h6 === 0 ? i5 = i5.add(zt(v7, r3[g5])) : u4 = u4.add(zt(L5, r3[S5]));
    }
    return { p: u4, f: i5 };
  }, wNAFUnsafe(n5, r3, o6, s4 = t2.ZERO) {
    const { windows: a3, windowSize: u4 } = Mt(n5, e3), i5 = BigInt(2 ** n5 - 1), D3 = 2 ** n5, c8 = BigInt(n5);
    for (let l8 = 0; l8 < a3; l8++) {
      const p6 = l8 * u4;
      if (o6 === Se) break;
      let w6 = Number(o6 & i5);
      if (o6 >>= c8, w6 > u4 && (w6 -= D3, o6 += gt), w6 === 0) continue;
      let h6 = r3[p6 + Math.abs(w6) - 1];
      w6 < 0 && (h6 = h6.negate()), s4 = s4.add(h6);
    }
    return s4;
  }, getPrecomputes(n5, r3, o6) {
    let s4 = qt.get(r3);
    return s4 || (s4 = this.precomputeWindow(r3, n5), n5 !== 1 && qt.set(r3, o6(s4))), s4;
  }, wNAFCached(n5, r3, o6) {
    const s4 = $t(n5);
    return this.wNAF(s4, this.getPrecomputes(s4, n5, o6), r3);
  }, wNAFCachedUnsafe(n5, r3, o6, s4) {
    const a3 = $t(n5);
    return a3 === 1 ? this.unsafeLadder(n5, r3, s4) : this.wNAFUnsafe(a3, this.getPrecomputes(a3, n5, o6), r3, s4);
  }, setWindowSize(n5, r3) {
    ve(r3, e3), Ie.set(n5, r3), qt.delete(n5);
  } };
}
function br(t2, e3, n5, r3) {
  if (dr(n5, t2), hr(r3, e3), n5.length !== r3.length) throw new Error("arrays of points and scalars must have equal length");
  const o6 = t2.ZERO, s4 = tr(BigInt(n5.length)), a3 = s4 > 12 ? s4 - 3 : s4 > 4 ? s4 - 2 : s4 ? 2 : 1, u4 = (1 << a3) - 1, i5 = new Array(u4 + 1).fill(o6), D3 = Math.floor((e3.BITS - 1) / a3) * a3;
  let c8 = o6;
  for (let l8 = D3; l8 >= 0; l8 -= a3) {
    i5.fill(o6);
    for (let w6 = 0; w6 < r3.length; w6++) {
      const h6 = r3[w6], g5 = Number(h6 >> BigInt(l8) & BigInt(u4));
      i5[g5] = i5[g5].add(n5[w6]);
    }
    let p6 = o6;
    for (let w6 = i5.length - 1, h6 = o6; w6 > 0; w6--) h6 = h6.add(i5[w6]), p6 = p6.add(h6);
    if (c8 = c8.add(p6), l8 !== 0) for (let w6 = 0; w6 < a3; w6++) c8 = c8.double();
  }
  return c8;
}
function pr(t2) {
  return ar(t2.Fp), Ot(t2, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...me(t2.n, t2.nBitLength), ...t2, p: t2.Fp.ORDER });
}
var G = BigInt(0);
var j2 = BigInt(1);
var yt = BigInt(2);
var wr = BigInt(8);
var Er = { zip215: true };
function gr(t2) {
  const e3 = pr(t2);
  return Ot(t2, { hash: "function", a: "bigint", d: "bigint", randomBytes: "function" }, { adjustScalarBytes: "function", domain: "function", uvRatio: "function", mapToCurve: "function" }), Object.freeze({ ...e3 });
}
function yr(t2) {
  const e3 = gr(t2), { Fp: n5, n: r3, prehash: o6, hash: s4, randomBytes: a3, nByteLength: u4, h: i5 } = e3, D3 = yt << BigInt(u4 * 8) - j2, c8 = n5.create, l8 = _e(e3.n, e3.nBitLength), p6 = e3.uvRatio || ((y7, f10) => {
    try {
      return { isValid: true, value: n5.sqrt(y7 * n5.inv(f10)) };
    } catch {
      return { isValid: false, value: G };
    }
  }), w6 = e3.adjustScalarBytes || ((y7) => y7), h6 = e3.domain || ((y7, f10, b6) => {
    if (Tt("phflag", b6), f10.length || b6) throw new Error("Contexts/pre-hash are not supported");
    return y7;
  });
  function g5(y7, f10) {
    ft("coordinate " + y7, f10, G, D3);
  }
  function S5(y7) {
    if (!(y7 instanceof d6)) throw new Error("ExtendedPoint expected");
  }
  const v7 = xe((y7, f10) => {
    const { ex: b6, ey: E7, ez: B4 } = y7, C6 = y7.is0();
    f10 == null && (f10 = C6 ? wr : n5.inv(B4));
    const A4 = c8(b6 * f10), U3 = c8(E7 * f10), _4 = c8(B4 * f10);
    if (C6) return { x: G, y: j2 };
    if (_4 !== j2) throw new Error("invZ was invalid");
    return { x: A4, y: U3 };
  }), L5 = xe((y7) => {
    const { a: f10, d: b6 } = e3;
    if (y7.is0()) throw new Error("bad point: ZERO");
    const { ex: E7, ey: B4, ez: C6, et: A4 } = y7, U3 = c8(E7 * E7), _4 = c8(B4 * B4), T4 = c8(C6 * C6), $4 = c8(T4 * T4), R3 = c8(U3 * f10), V6 = c8(T4 * c8(R3 + _4)), Y3 = c8($4 + c8(b6 * c8(U3 * _4)));
    if (V6 !== Y3) throw new Error("bad point: equation left != right (1)");
    const Z2 = c8(E7 * B4), X = c8(C6 * A4);
    if (Z2 !== X) throw new Error("bad point: equation left != right (2)");
    return true;
  });
  class d6 {
    constructor(f10, b6, E7, B4) {
      this.ex = f10, this.ey = b6, this.ez = E7, this.et = B4, g5("x", f10), g5("y", b6), g5("z", E7), g5("t", B4), Object.freeze(this);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static fromAffine(f10) {
      if (f10 instanceof d6) throw new Error("extended point not allowed");
      const { x: b6, y: E7 } = f10 || {};
      return g5("x", b6), g5("y", E7), new d6(b6, E7, j2, c8(b6 * E7));
    }
    static normalizeZ(f10) {
      const b6 = n5.invertBatch(f10.map((E7) => E7.ez));
      return f10.map((E7, B4) => E7.toAffine(b6[B4])).map(d6.fromAffine);
    }
    static msm(f10, b6) {
      return br(d6, l8, f10, b6);
    }
    _setWindowSize(f10) {
      q3.setWindowSize(this, f10);
    }
    assertValidity() {
      L5(this);
    }
    equals(f10) {
      S5(f10);
      const { ex: b6, ey: E7, ez: B4 } = this, { ex: C6, ey: A4, ez: U3 } = f10, _4 = c8(b6 * U3), T4 = c8(C6 * B4), $4 = c8(E7 * U3), R3 = c8(A4 * B4);
      return _4 === T4 && $4 === R3;
    }
    is0() {
      return this.equals(d6.ZERO);
    }
    negate() {
      return new d6(c8(-this.ex), this.ey, this.ez, c8(-this.et));
    }
    double() {
      const { a: f10 } = e3, { ex: b6, ey: E7, ez: B4 } = this, C6 = c8(b6 * b6), A4 = c8(E7 * E7), U3 = c8(yt * c8(B4 * B4)), _4 = c8(f10 * C6), T4 = b6 + E7, $4 = c8(c8(T4 * T4) - C6 - A4), R3 = _4 + A4, V6 = R3 - U3, Y3 = _4 - A4, Z2 = c8($4 * V6), X = c8(R3 * Y3), et4 = c8($4 * Y3), pt6 = c8(V6 * R3);
      return new d6(Z2, X, pt6, et4);
    }
    add(f10) {
      S5(f10);
      const { a: b6, d: E7 } = e3, { ex: B4, ey: C6, ez: A4, et: U3 } = this, { ex: _4, ey: T4, ez: $4, et: R3 } = f10;
      if (b6 === BigInt(-1)) {
        const re4 = c8((C6 - B4) * (T4 + _4)), oe3 = c8((C6 + B4) * (T4 - _4)), mt6 = c8(oe3 - re4);
        if (mt6 === G) return this.double();
        const se6 = c8(A4 * yt * R3), ie6 = c8(U3 * yt * $4), ue5 = ie6 + se6, ce6 = oe3 + re4, ae5 = ie6 - se6, Dn5 = c8(ue5 * mt6), dn5 = c8(ce6 * ae5), hn5 = c8(ue5 * ae5), ln5 = c8(mt6 * ce6);
        return new d6(Dn5, dn5, ln5, hn5);
      }
      const V6 = c8(B4 * _4), Y3 = c8(C6 * T4), Z2 = c8(U3 * E7 * R3), X = c8(A4 * $4), et4 = c8((B4 + C6) * (_4 + T4) - V6 - Y3), pt6 = X - Z2, ee6 = X + Z2, ne4 = c8(Y3 - b6 * V6), un5 = c8(et4 * pt6), cn5 = c8(ee6 * ne4), an5 = c8(et4 * ne4), fn5 = c8(pt6 * ee6);
      return new d6(un5, cn5, fn5, an5);
    }
    subtract(f10) {
      return this.add(f10.negate());
    }
    wNAF(f10) {
      return q3.wNAFCached(this, f10, d6.normalizeZ);
    }
    multiply(f10) {
      const b6 = f10;
      ft("scalar", b6, j2, r3);
      const { p: E7, f: B4 } = this.wNAF(b6);
      return d6.normalizeZ([E7, B4])[0];
    }
    multiplyUnsafe(f10, b6 = d6.ZERO) {
      const E7 = f10;
      return ft("scalar", E7, G, r3), E7 === G ? F6 : this.is0() || E7 === j2 ? this : q3.wNAFCachedUnsafe(this, E7, d6.normalizeZ, b6);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(i5).is0();
    }
    isTorsionFree() {
      return q3.unsafeLadder(this, r3).is0();
    }
    toAffine(f10) {
      return v7(this, f10);
    }
    clearCofactor() {
      const { h: f10 } = e3;
      return f10 === j2 ? this : this.multiplyUnsafe(f10);
    }
    static fromHex(f10, b6 = false) {
      const { d: E7, a: B4 } = e3, C6 = n5.BYTES;
      f10 = W("pointHex", f10, C6), Tt("zip215", b6);
      const A4 = f10.slice(), U3 = f10[C6 - 1];
      A4[C6 - 1] = U3 & -129;
      const _4 = Et(A4), T4 = b6 ? D3 : n5.ORDER;
      ft("pointHex.y", _4, G, T4);
      const $4 = c8(_4 * _4), R3 = c8($4 - j2), V6 = c8(E7 * $4 - B4);
      let { isValid: Y3, value: Z2 } = p6(R3, V6);
      if (!Y3) throw new Error("Point.fromHex: invalid y coordinate");
      const X = (Z2 & j2) === j2, et4 = (U3 & 128) !== 0;
      if (!b6 && Z2 === G && et4) throw new Error("Point.fromHex: x=0 and x_0=1");
      return et4 !== X && (Z2 = c8(-Z2)), d6.fromAffine({ x: Z2, y: _4 });
    }
    static fromPrivateKey(f10) {
      return O7(f10).point;
    }
    toRawBytes() {
      const { x: f10, y: b6 } = this.toAffine(), E7 = Nt(b6, n5.BYTES);
      return E7[E7.length - 1] |= f10 & j2 ? 128 : 0, E7;
    }
    toHex() {
      return Ft(this.toRawBytes());
    }
  }
  d6.BASE = new d6(e3.Gx, e3.Gy, j2, c8(e3.Gx * e3.Gy)), d6.ZERO = new d6(G, j2, j2, G);
  const { BASE: m4, ZERO: F6 } = d6, q3 = lr(d6, u4 * 8);
  function z8(y7) {
    return H(y7, r3);
  }
  function I4(y7) {
    return z8(Et(y7));
  }
  function O7(y7) {
    const f10 = n5.BYTES;
    y7 = W("private key", y7, f10);
    const b6 = W("hashed private key", s4(y7), 2 * f10), E7 = w6(b6.slice(0, f10)), B4 = b6.slice(f10, 2 * f10), C6 = I4(E7), A4 = m4.multiply(C6), U3 = A4.toRawBytes();
    return { head: E7, prefix: B4, scalar: C6, point: A4, pointBytes: U3 };
  }
  function ot5(y7) {
    return O7(y7).pointBytes;
  }
  function tt4(y7 = new Uint8Array(), ...f10) {
    const b6 = ye(...f10);
    return I4(s4(h6(b6, W("context", y7), !!o6)));
  }
  function st5(y7, f10, b6 = {}) {
    y7 = W("message", y7), o6 && (y7 = o6(y7));
    const { prefix: E7, scalar: B4, pointBytes: C6 } = O7(f10), A4 = tt4(b6.context, E7, y7), U3 = m4.multiply(A4).toRawBytes(), _4 = tt4(b6.context, U3, C6, y7), T4 = z8(A4 + _4 * B4);
    ft("signature.s", T4, G, r3);
    const $4 = ye(U3, Nt(T4, n5.BYTES));
    return W("result", $4, n5.BYTES * 2);
  }
  const at3 = Er;
  function Ct6(y7, f10, b6, E7 = at3) {
    const { context: B4, zip215: C6 } = E7, A4 = n5.BYTES;
    y7 = W("signature", y7, 2 * A4), f10 = W("message", f10), b6 = W("publicKey", b6, A4), C6 !== void 0 && Tt("zip215", C6), o6 && (f10 = o6(f10));
    const U3 = Et(y7.slice(A4, 2 * A4));
    let _4, T4, $4;
    try {
      _4 = d6.fromHex(b6, C6), T4 = d6.fromHex(y7.slice(0, A4), C6), $4 = m4.multiplyUnsafe(U3);
    } catch {
      return false;
    }
    if (!C6 && _4.isSmallOrder()) return false;
    const R3 = tt4(B4, T4.toRawBytes(), _4.toRawBytes(), f10);
    return T4.add(_4.multiplyUnsafe(R3)).subtract($4).clearCofactor().equals(d6.ZERO);
  }
  return m4._setWindowSize(8), { CURVE: e3, getPublicKey: ot5, sign: st5, verify: Ct6, ExtendedPoint: d6, utils: { getExtendedPublicKey: O7, randomPrivateKey: () => a3(n5.BYTES), precompute(y7 = 8, f10 = d6.BASE) {
    return f10._setWindowSize(y7), f10.multiply(BigInt(3)), f10;
  } } };
}
BigInt(0), BigInt(1);
var kt = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
var Ue = BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752");
BigInt(0);
var xr = BigInt(1);
var Te = BigInt(2);
BigInt(3);
var Br = BigInt(5);
var Cr = BigInt(8);
function Ar(t2) {
  const e3 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o6 = BigInt(80), s4 = kt, u4 = t2 * t2 % s4 * t2 % s4, i5 = J2(u4, Te, s4) * u4 % s4, D3 = J2(i5, xr, s4) * t2 % s4, c8 = J2(D3, Br, s4) * D3 % s4, l8 = J2(c8, e3, s4) * c8 % s4, p6 = J2(l8, n5, s4) * l8 % s4, w6 = J2(p6, r3, s4) * p6 % s4, h6 = J2(w6, o6, s4) * w6 % s4, g5 = J2(h6, o6, s4) * w6 % s4, S5 = J2(g5, e3, s4) * c8 % s4;
  return { pow_p_5_8: J2(S5, Te, s4) * t2 % s4, b2: u4 };
}
function mr(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
function _r(t2, e3) {
  const n5 = kt, r3 = H(e3 * e3 * e3, n5), o6 = H(r3 * r3 * e3, n5), s4 = Ar(t2 * o6).pow_p_5_8;
  let a3 = H(t2 * r3 * s4, n5);
  const u4 = H(e3 * a3 * a3, n5), i5 = a3, D3 = H(a3 * Ue, n5), c8 = u4 === t2, l8 = u4 === H(-t2, n5), p6 = u4 === H(-t2 * Ue, n5);
  return c8 && (a3 = i5), (l8 || p6) && (a3 = D3), ur(a3, n5) && (a3 = H(-a3, n5)), { isValid: c8 || l8, value: a3 };
}
var Sr = (() => _e(kt, void 0, true))();
var vr = (() => ({ a: BigInt(-1), d: BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"), Fp: Sr, n: BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"), h: Cr, Gx: BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"), Gy: BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"), hash: Kn, randomBytes: he, adjustScalarBytes: mr, uvRatio: _r }))();
var Rt = (() => yr(vr))();
var jt = "EdDSA";
var Zt = "JWT";
var ut = ".";
var Dt = "base64url";
var Gt = "utf8";
var xt = "utf8";
var Vt = ":";
var Yt = "did";
var Jt = "key";
var dt = "base58btc";
var Kt = "z";
var Wt = "K36";
var Ne = 32;
function Xt(t2) {
  return globalThis.Buffer != null ? new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength) : t2;
}
function Le(t2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t2)) : new Uint8Array(t2);
}
function Oe(t2, e3) {
  e3 || (e3 = t2.reduce((o6, s4) => o6 + s4.length, 0));
  const n5 = Le(e3);
  let r3 = 0;
  for (const o6 of t2) n5.set(o6, r3), r3 += o6.length;
  return Xt(n5);
}
function Ir(t2, e3) {
  if (t2.length >= 255) throw new TypeError("Alphabet too long");
  for (var n5 = new Uint8Array(256), r3 = 0; r3 < n5.length; r3++) n5[r3] = 255;
  for (var o6 = 0; o6 < t2.length; o6++) {
    var s4 = t2.charAt(o6), a3 = s4.charCodeAt(0);
    if (n5[a3] !== 255) throw new TypeError(s4 + " is ambiguous");
    n5[a3] = o6;
  }
  var u4 = t2.length, i5 = t2.charAt(0), D3 = Math.log(u4) / Math.log(256), c8 = Math.log(256) / Math.log(u4);
  function l8(h6) {
    if (h6 instanceof Uint8Array || (ArrayBuffer.isView(h6) ? h6 = new Uint8Array(h6.buffer, h6.byteOffset, h6.byteLength) : Array.isArray(h6) && (h6 = Uint8Array.from(h6))), !(h6 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (h6.length === 0) return "";
    for (var g5 = 0, S5 = 0, v7 = 0, L5 = h6.length; v7 !== L5 && h6[v7] === 0; ) v7++, g5++;
    for (var d6 = (L5 - v7) * c8 + 1 >>> 0, m4 = new Uint8Array(d6); v7 !== L5; ) {
      for (var F6 = h6[v7], q3 = 0, z8 = d6 - 1; (F6 !== 0 || q3 < S5) && z8 !== -1; z8--, q3++) F6 += 256 * m4[z8] >>> 0, m4[z8] = F6 % u4 >>> 0, F6 = F6 / u4 >>> 0;
      if (F6 !== 0) throw new Error("Non-zero carry");
      S5 = q3, v7++;
    }
    for (var I4 = d6 - S5; I4 !== d6 && m4[I4] === 0; ) I4++;
    for (var O7 = i5.repeat(g5); I4 < d6; ++I4) O7 += t2.charAt(m4[I4]);
    return O7;
  }
  function p6(h6) {
    if (typeof h6 != "string") throw new TypeError("Expected String");
    if (h6.length === 0) return new Uint8Array();
    var g5 = 0;
    if (h6[g5] !== " ") {
      for (var S5 = 0, v7 = 0; h6[g5] === i5; ) S5++, g5++;
      for (var L5 = (h6.length - g5) * D3 + 1 >>> 0, d6 = new Uint8Array(L5); h6[g5]; ) {
        var m4 = n5[h6.charCodeAt(g5)];
        if (m4 === 255) return;
        for (var F6 = 0, q3 = L5 - 1; (m4 !== 0 || F6 < v7) && q3 !== -1; q3--, F6++) m4 += u4 * d6[q3] >>> 0, d6[q3] = m4 % 256 >>> 0, m4 = m4 / 256 >>> 0;
        if (m4 !== 0) throw new Error("Non-zero carry");
        v7 = F6, g5++;
      }
      if (h6[g5] !== " ") {
        for (var z8 = L5 - v7; z8 !== L5 && d6[z8] === 0; ) z8++;
        for (var I4 = new Uint8Array(S5 + (L5 - z8)), O7 = S5; z8 !== L5; ) I4[O7++] = d6[z8++];
        return I4;
      }
    }
  }
  function w6(h6) {
    var g5 = p6(h6);
    if (g5) return g5;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: l8, decodeUnsafe: p6, decode: w6 };
}
var Ur = Ir;
var Tr = Ur;
var He = (t2) => {
  if (t2 instanceof Uint8Array && t2.constructor.name === "Uint8Array") return t2;
  if (t2 instanceof ArrayBuffer) return new Uint8Array(t2);
  if (ArrayBuffer.isView(t2)) return new Uint8Array(t2.buffer, t2.byteOffset, t2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var Fr = (t2) => new TextEncoder().encode(t2);
var Nr = (t2) => new TextDecoder().decode(t2);
var Lr = class {
  constructor(e3, n5, r3) {
    this.name = e3, this.prefix = n5, this.baseEncode = r3;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var Or = class {
  constructor(e3, n5, r3) {
    if (this.name = e3, this.prefix = n5, n5.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = n5.codePointAt(0), this.baseDecode = r3;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ze(this, e3);
  }
};
var Hr = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ze(this, e3);
  }
  decode(e3) {
    const n5 = e3[0], r3 = this.decoders[n5];
    if (r3) return r3.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ze = (t2, e3) => new Hr({ ...t2.decoders || { [t2.prefix]: t2 }, ...e3.decoders || { [e3.prefix]: e3 } });
var zr = class {
  constructor(e3, n5, r3, o6) {
    this.name = e3, this.prefix = n5, this.baseEncode = r3, this.baseDecode = o6, this.encoder = new Lr(e3, n5, r3), this.decoder = new Or(e3, n5, o6);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Bt = ({ name: t2, prefix: e3, encode: n5, decode: r3 }) => new zr(t2, e3, n5, r3);
var ht = ({ prefix: t2, name: e3, alphabet: n5 }) => {
  const { encode: r3, decode: o6 } = Tr(n5, e3);
  return Bt({ prefix: t2, name: e3, encode: r3, decode: (s4) => He(o6(s4)) });
};
var Mr = (t2, e3, n5, r3) => {
  const o6 = {};
  for (let c8 = 0; c8 < e3.length; ++c8) o6[e3[c8]] = c8;
  let s4 = t2.length;
  for (; t2[s4 - 1] === "="; ) --s4;
  const a3 = new Uint8Array(s4 * n5 / 8 | 0);
  let u4 = 0, i5 = 0, D3 = 0;
  for (let c8 = 0; c8 < s4; ++c8) {
    const l8 = o6[t2[c8]];
    if (l8 === void 0) throw new SyntaxError(`Non-${r3} character`);
    i5 = i5 << n5 | l8, u4 += n5, u4 >= 8 && (u4 -= 8, a3[D3++] = 255 & i5 >> u4);
  }
  if (u4 >= n5 || 255 & i5 << 8 - u4) throw new SyntaxError("Unexpected end of data");
  return a3;
};
var qr = (t2, e3, n5) => {
  const r3 = e3[e3.length - 1] === "=", o6 = (1 << n5) - 1;
  let s4 = "", a3 = 0, u4 = 0;
  for (let i5 = 0; i5 < t2.length; ++i5) for (u4 = u4 << 8 | t2[i5], a3 += 8; a3 > n5; ) a3 -= n5, s4 += e3[o6 & u4 >> a3];
  if (a3 && (s4 += e3[o6 & u4 << n5 - a3]), r3) for (; s4.length * n5 & 7; ) s4 += "=";
  return s4;
};
var k4 = ({ name: t2, prefix: e3, bitsPerChar: n5, alphabet: r3 }) => Bt({ prefix: e3, name: t2, encode(o6) {
  return qr(o6, r3, n5);
}, decode(o6) {
  return Mr(o6, r3, n5, t2);
} });
var $r = Bt({ prefix: "\0", name: "identity", encode: (t2) => Nr(t2), decode: (t2) => Fr(t2) });
var kr = Object.freeze({ __proto__: null, identity: $r });
var Rr = k4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var jr = Object.freeze({ __proto__: null, base2: Rr });
var Zr = k4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Gr = Object.freeze({ __proto__: null, base8: Zr });
var Vr = ht({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Yr = Object.freeze({ __proto__: null, base10: Vr });
var Jr = k4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Kr = k4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Wr = Object.freeze({ __proto__: null, base16: Jr, base16upper: Kr });
var Xr = k4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr = k4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Qr = k4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var to = k4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var eo = k4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var no = k4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var ro = k4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var oo = k4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var so = k4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var io = Object.freeze({ __proto__: null, base32: Xr, base32upper: Pr, base32pad: Qr, base32padupper: to, base32hex: eo, base32hexupper: no, base32hexpad: ro, base32hexpadupper: oo, base32z: so });
var uo = ht({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var co = ht({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var ao = Object.freeze({ __proto__: null, base36: uo, base36upper: co });
var fo = ht({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Do = ht({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var ho = Object.freeze({ __proto__: null, base58btc: fo, base58flickr: Do });
var lo = k4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var bo = k4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var po = k4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var wo = k4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Eo = Object.freeze({ __proto__: null, base64: lo, base64pad: bo, base64url: po, base64urlpad: wo });
var Me = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var go = Me.reduce((t2, e3, n5) => (t2[n5] = e3, t2), []);
var yo = Me.reduce((t2, e3, n5) => (t2[e3.codePointAt(0)] = n5, t2), []);
function xo(t2) {
  return t2.reduce((e3, n5) => (e3 += go[n5], e3), "");
}
function Bo(t2) {
  const e3 = [];
  for (const n5 of t2) {
    const r3 = yo[n5.codePointAt(0)];
    if (r3 === void 0) throw new Error(`Non-base256emoji character: ${n5}`);
    e3.push(r3);
  }
  return new Uint8Array(e3);
}
var Co = Bt({ prefix: "🚀", name: "base256emoji", encode: xo, decode: Bo });
var Ao = Object.freeze({ __proto__: null, base256emoji: Co });
var mo = $e;
var qe = 128;
var _o = 127;
var So = ~_o;
var vo = Math.pow(2, 31);
function $e(t2, e3, n5) {
  e3 = e3 || [], n5 = n5 || 0;
  for (var r3 = n5; t2 >= vo; ) e3[n5++] = t2 & 255 | qe, t2 /= 128;
  for (; t2 & So; ) e3[n5++] = t2 & 255 | qe, t2 >>>= 7;
  return e3[n5] = t2 | 0, $e.bytes = n5 - r3 + 1, e3;
}
var Io = Pt;
var Uo = 128;
var ke = 127;
function Pt(t2, r3) {
  var n5 = 0, r3 = r3 || 0, o6 = 0, s4 = r3, a3, u4 = t2.length;
  do {
    if (s4 >= u4) throw Pt.bytes = 0, new RangeError("Could not decode varint");
    a3 = t2[s4++], n5 += o6 < 28 ? (a3 & ke) << o6 : (a3 & ke) * Math.pow(2, o6), o6 += 7;
  } while (a3 >= Uo);
  return Pt.bytes = s4 - r3, n5;
}
var To = Math.pow(2, 7);
var Fo = Math.pow(2, 14);
var No = Math.pow(2, 21);
var Lo = Math.pow(2, 28);
var Oo = Math.pow(2, 35);
var Ho = Math.pow(2, 42);
var zo = Math.pow(2, 49);
var Mo = Math.pow(2, 56);
var qo = Math.pow(2, 63);
var $o = function(t2) {
  return t2 < To ? 1 : t2 < Fo ? 2 : t2 < No ? 3 : t2 < Lo ? 4 : t2 < Oo ? 5 : t2 < Ho ? 6 : t2 < zo ? 7 : t2 < Mo ? 8 : t2 < qo ? 9 : 10;
};
var ko = { encode: mo, decode: Io, encodingLength: $o };
var Re = ko;
var je = (t2, e3, n5 = 0) => (Re.encode(t2, e3, n5), e3);
var Ze = (t2) => Re.encodingLength(t2);
var Qt = (t2, e3) => {
  const n5 = e3.byteLength, r3 = Ze(t2), o6 = r3 + Ze(n5), s4 = new Uint8Array(o6 + n5);
  return je(t2, s4, 0), je(n5, s4, r3), s4.set(e3, o6), new Ro(t2, n5, e3, s4);
};
var Ro = class {
  constructor(e3, n5, r3, o6) {
    this.code = e3, this.size = n5, this.digest = r3, this.bytes = o6;
  }
};
var Ge = ({ name: t2, code: e3, encode: n5 }) => new jo(t2, e3, n5);
var jo = class {
  constructor(e3, n5, r3) {
    this.name = e3, this.code = n5, this.encode = r3;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const n5 = this.encode(e3);
      return n5 instanceof Uint8Array ? Qt(this.code, n5) : n5.then((r3) => Qt(this.code, r3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var Ve = (t2) => async (e3) => new Uint8Array(await crypto.subtle.digest(t2, e3));
var Zo = Ge({ name: "sha2-256", code: 18, encode: Ve("SHA-256") });
var Go = Ge({ name: "sha2-512", code: 19, encode: Ve("SHA-512") });
var Vo = Object.freeze({ __proto__: null, sha256: Zo, sha512: Go });
var Ye = 0;
var Yo = "identity";
var Je = He;
var Jo = (t2) => Qt(Ye, Je(t2));
var Ko = { code: Ye, name: Yo, encode: Je, digest: Jo };
var Wo = Object.freeze({ __proto__: null, identity: Ko });
new TextEncoder(), new TextDecoder();
var Ke = { ...kr, ...jr, ...Gr, ...Yr, ...Wr, ...io, ...ao, ...ho, ...Eo, ...Ao };
({ ...Vo, ...Wo });
function We(t2, e3, n5, r3) {
  return { name: t2, prefix: e3, encoder: { name: t2, prefix: e3, encode: n5 }, decoder: { decode: r3 } };
}
var Xe = We("utf8", "u", (t2) => "u" + new TextDecoder("utf8").decode(t2), (t2) => new TextEncoder().encode(t2.substring(1)));
var te = We("ascii", "a", (t2) => {
  let e3 = "a";
  for (let n5 = 0; n5 < t2.length; n5++) e3 += String.fromCharCode(t2[n5]);
  return e3;
}, (t2) => {
  t2 = t2.substring(1);
  const e3 = Le(t2.length);
  for (let n5 = 0; n5 < t2.length; n5++) e3[n5] = t2.charCodeAt(n5);
  return e3;
});
var Pe = { utf8: Xe, "utf-8": Xe, hex: Ke.base16, latin1: te, ascii: te, binary: te, ...Ke };
function ct(t2, e3 = "utf8") {
  const n5 = Pe[e3];
  if (!n5) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t2.buffer, t2.byteOffset, t2.byteLength).toString("utf8") : n5.encoder.encode(t2).substring(1);
}
function rt(t2, e3 = "utf8") {
  const n5 = Pe[e3];
  if (!n5) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t2, "utf-8")) : n5.decoder.decode(`${n5.prefix}${t2}`);
}
function lt(t2) {
  return safeJsonParse(ct(rt(t2, Dt), Gt));
}
function bt(t2) {
  return ct(rt(safeJsonStringify(t2), Gt), Dt);
}
function Qe(t2) {
  const e3 = rt(Wt, dt), n5 = Kt + ct(Oe([e3, t2]), dt);
  return [Yt, Jt, n5].join(Vt);
}
function en(t2) {
  return ct(t2, Dt);
}
function nn(t2) {
  return rt(t2, Dt);
}
function rn(t2) {
  return rt([bt(t2.header), bt(t2.payload)].join(ut), xt);
}
function on(t2) {
  return [bt(t2.header), bt(t2.payload), en(t2.signature)].join(ut);
}
function sn(t2) {
  const e3 = t2.split(ut), n5 = lt(e3[0]), r3 = lt(e3[1]), o6 = nn(e3[2]), s4 = rt(e3.slice(0, 2).join(ut), xt);
  return { header: n5, payload: r3, signature: o6, data: s4 };
}
function Po(t2 = he(Ne)) {
  const e3 = Rt.getPublicKey(t2);
  return { secretKey: Oe([t2, e3]), publicKey: e3 };
}
async function Qo(t2, e3, n5, r3, o6 = (0, import_time2.fromMiliseconds)(Date.now())) {
  const s4 = { alg: jt, typ: Zt }, a3 = Qe(r3.publicKey), u4 = o6 + n5, i5 = { iss: a3, sub: t2, aud: e3, iat: o6, exp: u4 }, D3 = rn({ header: s4, payload: i5 }), c8 = Rt.sign(D3, r3.secretKey.slice(0, 32));
  return on({ header: s4, payload: i5, signature: c8 });
}

// ../node_modules/detect-browser/es/index.js
var __spreadArray = function(to3, from23, pack) {
  if (pack || arguments.length === 2) for (var i5 = 0, l8 = from23.length, ar4; i5 < l8; i5++) {
    if (ar4 || !(i5 in from23)) {
      if (!ar4) ar4 = Array.prototype.slice.call(from23, 0, i5);
      ar4[i5] = from23[i5];
    }
  }
  return to3.concat(ar4 || Array.prototype.slice.call(from23));
};
var BrowserInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BrowserInfo2(name2, version5, os2) {
      this.name = name2;
      this.version = version5;
      this.os = os2;
      this.type = "browser";
    }
    return BrowserInfo2;
  }()
);
var NodeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function NodeInfo2(version5) {
      this.version = version5;
      this.type = "node";
      this.name = "node";
      this.os = process.platform;
    }
    return NodeInfo2;
  }()
);
var SearchBotDeviceInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function SearchBotDeviceInfo2(name2, version5, os2, bot) {
      this.name = name2;
      this.version = version5;
      this.os = os2;
      this.bot = bot;
      this.type = "bot-device";
    }
    return SearchBotDeviceInfo2;
  }()
);
var BotInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function BotInfo2() {
      this.type = "bot";
      this.bot = true;
      this.name = "bot";
      this.version = null;
      this.os = null;
    }
    return BotInfo2;
  }()
);
var ReactNativeInfo = (
  /** @class */
  /* @__PURE__ */ function() {
    function ReactNativeInfo2() {
      this.type = "react-native";
      this.name = "react-native";
      this.version = null;
      this.os = null;
    }
    return ReactNativeInfo2;
  }()
);
var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
var REQUIRED_VERSION_PARTS = 3;
var userAgentRules = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", SEARCHBOX_UA_REGEX]
];
var operatingSystemRules = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function detect(userAgent) {
  if (!!userAgent) {
    return parseUserAgent(userAgent);
  }
  if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
    return new ReactNativeInfo();
  }
  if (typeof navigator !== "undefined") {
    return parseUserAgent(navigator.userAgent);
  }
  return getNodeVersion();
}
function matchUserAgent(ua) {
  return ua !== "" && userAgentRules.reduce(function(matched, _a) {
    var browser = _a[0], regex = _a[1];
    if (matched) {
      return matched;
    }
    var uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
}
function parseUserAgent(ua) {
  var matchedRule = matchUserAgent(ua);
  if (!matchedRule) {
    return null;
  }
  var name2 = matchedRule[0], match = matchedRule[1];
  if (name2 === "searchbot") {
    return new BotInfo();
  }
  var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
  if (versionParts) {
    if (versionParts.length < REQUIRED_VERSION_PARTS) {
      versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
    }
  } else {
    versionParts = [];
  }
  var version5 = versionParts.join(".");
  var os2 = detectOS(ua);
  var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
  if (searchBotMatch && searchBotMatch[1]) {
    return new SearchBotDeviceInfo(name2, version5, os2, searchBotMatch[1]);
  }
  return new BrowserInfo(name2, version5, os2);
}
function detectOS(ua) {
  for (var ii4 = 0, count = operatingSystemRules.length; ii4 < count; ii4++) {
    var _a = operatingSystemRules[ii4], os2 = _a[0], regex = _a[1];
    var match = regex.exec(ua);
    if (match) {
      return os2;
    }
  }
  return null;
}
function getNodeVersion() {
  var isNode2 = typeof process !== "undefined" && process.version;
  return isNode2 ? new NodeInfo(process.version.slice(1)) : null;
}
function createVersionParts(count) {
  var output = [];
  for (var ii4 = 0; ii4 < count; ii4++) {
    output.push("0");
  }
  return output;
}

// ../node_modules/@walletconnect/core/node_modules/@walletconnect/utils/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber(count);
}

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// ../node_modules/@walletconnect/core/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_4, i5) => i5));
var Pi = Id.map((i5) => (9 * i5 + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i5 = 0; i5 < 4; i5++)
  for (let j4 of [idxL, idxR])
    j4.push(j4[i5].map((k7) => Rho[k7]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => new Uint8Array(i5));
var shiftsL = idxL.map((idx, i5) => idx.map((j4) => shifts[i5][j4]));
var shiftsR = idxR.map((idx, i5) => idx.map((j4) => shifts[i5][j4]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr2 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f4(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  else if (group === 1)
    return x8 & y7 | ~x8 & z8;
  else if (group === 2)
    return (x8 | ~y7) ^ z8;
  else if (group === 3)
    return x8 & z8 | y7 & ~z8;
  else
    return x8 ^ (y7 | ~z8);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      R_BUF[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr2[group];
      const rl = idxL[group], rr4 = idxR[group];
      const sl = shiftsL[group], sr4 = shiftsR[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl2(al + f4(group, bl, cl, dl) + R_BUF[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl2(ar4 + f4(rGroup, br4, cr4, dr4) + R_BUF[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl2(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// ../node_modules/@walletconnect/core/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes2(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function anumber(n5) {
  if (!Number.isSafeInteger(n5) || n5 < 0)
    throw new Error("positive integer expected, got " + n5);
}
function abytes(b6, ...lengths) {
  if (!isBytes2(b6))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b6.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b6.length);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean2(...arrays) {
  for (let i5 = 0; i5 < arrays.length; i5++) {
    arrays[i5].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl5(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap32(arr) {
  for (let i5 = 0; i5 < arr.length; i5++) {
    arr[i5] = byteSwap(arr[i5]);
  }
  return arr;
}
var swap32IfBE = isLE ? (u4) => u4 : byteSwap32;
var hasHexBuiltin = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes = Array.from({ length: 256 }, (_4, i5) => i5.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes3(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
var Hash = class {
};
function createHasher2(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes3(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes3(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/curves/esm/utils.js
var _0n = BigInt(0);
var _1n = BigInt(1);

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/internal/errors.js
function getVersion2() {
  return version;
}

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Errors.js
var BaseError4 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x8) => typeof x8 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion2()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn5) {
    return walk(this, fn5);
  }
};
function walk(err, fn5) {
  if (fn5 == null ? void 0 : fn5(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn5);
  return fn5 ? null : err;
}

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size4(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size4(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad2(bytes, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return bytes;
  if (bytes.length > size14)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size14,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size14);
  for (let i5 = 0; i5 < size14; i5++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i5 : size14 - i5 - 1] = bytes[padEnd ? i5 : bytes.length - i5 - 1];
  }
  return paddedBytes;
}

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex, size_) {
  if (size5(hex) > size_)
    throw new SizeOverflowError2({
      givenSize: size5(hex),
      maxSize: size_
    });
}
function pad3(hex_, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size14 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex.length / 2),
      targetSize: size14,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size14 * 2, "0")}`;
}

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder = new TextEncoder();
function from2(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex2(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex2(value, options = {}) {
  const { size: size14 } = options;
  let hex = value;
  if (size14) {
    assertSize2(value, size14);
    hex = padRight2(value, size14);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index2 = 0, j4 = 0; index2 < length2; index2++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j4++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j4++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError4(`Invalid byte sequence ("${hexString[j4 - 2]}${hexString[j4 - 1]}" in "${hexString}").`);
    }
    bytes[index2] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString3(value, options = {}) {
  const { size: size14 } = options;
  const bytes = encoder.encode(value);
  if (typeof size14 === "number") {
    assertSize(bytes, size14);
    return padRight3(bytes, size14);
  }
  return bytes;
}
function padRight3(value, size14) {
  return pad2(value, { dir: "right", size: size14 });
}
function size4(value) {
  return value.length;
}
var SizeOverflowError = class extends BaseError4 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError4 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Hex.js
var encoder2 = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i5) => i5.toString(16).padStart(2, "0"));
function concat3(...values) {
  return `0x${values.reduce((acc, x8) => acc + x8.replace("0x", ""), "")}`;
}
function fromBoolean2(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padLeft2(hex, options.size);
  }
  return hex;
}
function fromBytes3(value, options = {}) {
  let string2 = "";
  for (let i5 = 0; i5 < value.length; i5++)
    string2 += hexes2[value[i5]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padRight2(hex, options.size);
  }
  return hex;
}
function fromNumber2(value, options = {}) {
  const { signed, size: size14 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size14) {
    if (signed)
      maxValue = (1n << BigInt(size14) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size14) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size14,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size14 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size14)
    return padLeft2(hex, size14);
  return hex;
}
function fromString4(value, options = {}) {
  return fromBytes3(encoder2.encode(value), options);
}
function padLeft2(value, size14) {
  return pad3(value, { dir: "left", size: size14 });
}
function padRight2(value, size14) {
  return pad3(value, { dir: "right", size: size14 });
}
function size5(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError = class extends BaseError4 {
  constructor({ max, min, signed, size: size14, value }) {
    super(`Number \`${value}\` is not in safe${size14 ? ` ${size14 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError4 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError4 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE4) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE4);
  const _32n4 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n4 & _u32_max);
  const wl = Number(value & _u32_max);
  const h6 = isLE4 ? 4 : 0;
  const l8 = isLE4 ? 0 : 4;
  view.setUint32(byteOffset + h6, wh, isLE4);
  view.setUint32(byteOffset + l8, wl, isLE4);
}
function Chi2(a3, b6, c8) {
  return a3 & b6 ^ ~a3 & c8;
}
function Maj2(a3, b6, c8) {
  return a3 & b6 ^ a3 & c8 ^ b6 & c8;
}
var HashMD5 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE4) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE4;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes3(data);
    abytes(data);
    const { view, buffer: buffer2, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE4 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    clean2(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i5 = pos; i5 < blockLen; i5++)
      buffer2[i5] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE4);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state24 = this.get();
    if (outLen > state24.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i5 = 0; i5 < outLen; i5++)
      oview.setUint32(4 * i5, state24[i5], isLE4);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    to3 || (to3 = new this.constructor());
    to3.set(...this.get());
    const { blockLen, buffer: buffer2, length: length2, finished, destroyed, pos } = this;
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length2;
    to3.pos = pos;
    if (length2 % blockLen)
      to3.buffer.set(buffer2);
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD5 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    return [A4, B4, C6, D3, E7];
  }
  set(A4, B4, C6, D3, E7) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA1_W[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 80; i5++)
      SHA1_W[i5] = rotl5(SHA1_W[i5 - 3] ^ SHA1_W[i5 - 8] ^ SHA1_W[i5 - 14] ^ SHA1_W[i5 - 16], 1);
    let { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      let F6, K9;
      if (i5 < 20) {
        F6 = Chi2(B4, C6, D3);
        K9 = 1518500249;
      } else if (i5 < 40) {
        F6 = B4 ^ C6 ^ D3;
        K9 = 1859775393;
      } else if (i5 < 60) {
        F6 = Maj2(B4, C6, D3);
        K9 = 2400959708;
      } else {
        F6 = B4 ^ C6 ^ D3;
        K9 = 3395469782;
      }
      const T4 = rotl5(A4, 5) + F6 + E7 + K9 + SHA1_W[i5] | 0;
      E7 = D3;
      D3 = C6;
      C6 = rotl5(B4, 30);
      B4 = A4;
      A4 = T4;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    this.set(A4, B4, C6, D3, E7);
  }
  roundClean() {
    clean2(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var sha1 = createHasher2(() => new SHA1());
var p32 = Math.pow(2, 32);
var K3 = Array.from({ length: 64 }, (_4, i5) => Math.floor(p32 * Math.abs(Math.sin(i5 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD5 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3 } = this;
    return [A4, B4, C6, D3];
  }
  set(A4, B4, C6, D3) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      MD5_W[i5] = view.getUint32(offset, true);
    let { A: A4, B: B4, C: C6, D: D3 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      let F6, g5, s4;
      if (i5 < 16) {
        F6 = Chi2(B4, C6, D3);
        g5 = i5;
        s4 = [7, 12, 17, 22];
      } else if (i5 < 32) {
        F6 = Chi2(D3, B4, C6);
        g5 = (5 * i5 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i5 < 48) {
        F6 = B4 ^ C6 ^ D3;
        g5 = (3 * i5 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F6 = C6 ^ (B4 | ~D3);
        g5 = 7 * i5 % 16;
        s4 = [6, 10, 15, 21];
      }
      F6 = F6 + A4 + K3[i5] + MD5_W[g5];
      A4 = D3;
      D3 = C6;
      C6 = B4;
      B4 = B4 + rotl5(F6, s4[i5 % 4]);
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A4, B4, C6, D3);
  }
  roundClean() {
    clean2(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var md5 = createHasher2(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_4, i5) => i5)))();
var Pi160 = (() => Id160.map((i5) => (9 * i5 + 5) % 16))();
var idxLR = (() => {
  const L5 = [Id160];
  const R3 = [Pi160];
  const res = [L5, R3];
  for (let i5 = 0; i5 < 4; i5++)
    for (let j4 of res)
      j4.push(j4[i5].map((k7) => Rho160[k7]));
  return res;
})();
var idxL2 = (() => idxLR[0])();
var idxR2 = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => Uint8Array.from(i5));
var shiftsL160 = idxL2.map((idx, i5) => idx.map((j4) => shifts160[i5][j4]));
var shiftsR160 = idxR2.map((idx, i5) => idx.map((j4) => shifts160[i5][j4]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  if (group === 1)
    return x8 & y7 | ~x8 & z8;
  if (group === 2)
    return (x8 | ~y7) ^ z8;
  if (group === 3)
    return x8 & z8 | y7 & ~z8;
  return x8 ^ (y7 | ~z8);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD5 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      BUF_160[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL2[group], rr4 = idxR2[group];
      const sl = shiftsL160[group], sr4 = shiftsR160[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl5(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl5(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl5(ar4 + ripemd_f(rGroup, br4, cr4, dr4) + BUF_160[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl5(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean2(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean2(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1603 = createHasher2(() => new RIPEMD1602());

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n5, le5 = false) {
  if (le5)
    return { h: Number(n5 & U32_MASK64), l: Number(n5 >> _32n & U32_MASK64) };
  return { h: Number(n5 >> _32n & U32_MASK64) | 0, l: Number(n5 & U32_MASK64) | 0 };
}
function split(lst, le5 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i5 = 0; i5 < len; i5++) {
    const { h: h6, l: l8 } = fromBig(lst[i5], le5);
    [Ah[i5], Al[i5]] = [h6, l8];
  }
  return [Ah, Al];
}
var shrSH = (h6, _l, s4) => h6 >>> s4;
var shrSL = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrSH = (h6, l8, s4) => h6 >>> s4 | l8 << 32 - s4;
var rotrSL = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrBH = (h6, l8, s4) => h6 << 64 - s4 | l8 >>> s4 - 32;
var rotrBL = (h6, l8, s4) => h6 >>> s4 - 32 | l8 << 64 - s4;
var rotlSH = (h6, l8, s4) => h6 << s4 | l8 >>> 32 - s4;
var rotlSL = (h6, l8, s4) => l8 << s4 | h6 >>> 32 - s4;
var rotlBH = (h6, l8, s4) => l8 << s4 - 32 | h6 >>> 64 - s4;
var rotlBL = (h6, l8, s4) => h6 << s4 - 32 | l8 >>> 64 - s4;
function add(Ah, Al, Bh, Bl) {
  const l8 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l8 / 2 ** 32 | 0) | 0, l: l8 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round2 = 0, R3 = _1n2, x8 = 1, y7 = 0; round2 < 24; round2++) {
  [x8, y7] = [y7, (2 * x8 + 3 * y7) % 5];
  SHA3_PI.push(2 * (5 * y7 + x8));
  SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t2 = _0n2;
  for (let j4 = 0; j4 < 7; j4++) {
    R3 = (R3 << _1n2 ^ (R3 >> _7n) * _0x71n) % _256n;
    if (R3 & _2n)
      t2 ^= _1n2 << (_1n2 << BigInt(j4)) - _1n2;
  }
  _SHA3_IOTA.push(t2);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h6, l8, s4) => s4 > 32 ? rotlBH(h6, l8, s4) : rotlSH(h6, l8, s4);
var rotlL = (h6, l8, s4) => s4 > 32 ? rotlBL(h6, l8, s4) : rotlSL(h6, l8, s4);
function keccakP(s4, rounds = 24) {
  const B4 = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x8 = 0; x8 < 10; x8++)
      B4[x8] = s4[x8] ^ s4[x8 + 10] ^ s4[x8 + 20] ^ s4[x8 + 30] ^ s4[x8 + 40];
    for (let x8 = 0; x8 < 10; x8 += 2) {
      const idx1 = (x8 + 8) % 10;
      const idx0 = (x8 + 2) % 10;
      const B0 = B4[idx0];
      const B1 = B4[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B4[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B4[idx1 + 1];
      for (let y7 = 0; y7 < 50; y7 += 10) {
        s4[x8 + y7] ^= Th;
        s4[x8 + y7 + 1] ^= Tl;
      }
    }
    let curH = s4[2];
    let curL = s4[3];
    for (let t2 = 0; t2 < 24; t2++) {
      const shift = SHA3_ROTL[t2];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t2];
      curH = s4[PI];
      curL = s4[PI + 1];
      s4[PI] = Th;
      s4[PI + 1] = Tl;
    }
    for (let y7 = 0; y7 < 50; y7 += 10) {
      for (let x8 = 0; x8 < 10; x8++)
        B4[x8] = s4[y7 + x8];
      for (let x8 = 0; x8 < 10; x8++)
        s4[y7 + x8] ^= ~B4[(x8 + 2) % 10] & B4[(x8 + 4) % 10];
    }
    s4[0] ^= SHA3_IOTA_H[round2];
    s4[1] ^= SHA3_IOTA_L[round2];
  }
  clean2(B4);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes3(data);
    abytes(data);
    const { blockLen, state: state24 } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i5 = 0; i5 < take; i5++)
        state24[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state24, suffix, pos, blockLen } = this;
    state24[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state24[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean2(this.state);
  }
  _cloneInto(to3) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to3 || (to3 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to3.state32.set(this.state32);
    to3.pos = this.pos;
    to3.posOut = this.posOut;
    to3.finished = this.finished;
    to3.rounds = rounds;
    to3.suffix = suffix;
    to3.outputLen = outputLen;
    to3.enableXOF = enableXOF;
    to3.destroyed = this.destroyed;
    return to3;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher2(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = (() => gen(6, 144, 224 / 8))();
var sha3_256 = (() => gen(6, 136, 256 / 8))();
var sha3_384 = (() => gen(6, 104, 384 / 8))();
var sha3_512 = (() => gen(6, 72, 512 / 8))();
var keccak_224 = (() => gen(1, 144, 224 / 8))();
var keccak_2562 = (() => gen(1, 136, 256 / 8))();
var keccak_384 = (() => gen(1, 104, 384 / 8))();
var keccak_512 = (() => gen(1, 72, 512 / 8))();
var genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = (() => genShake(31, 168, 128 / 8))();
var shake256 = (() => genShake(31, 136, 256 / 8))();

// ../node_modules/@walletconnect/core/node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends HashMD5 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    return [A4, B4, C6, D3, E7, F6, G4, H5];
  }
  // prettier-ignore
  set(A4, B4, C6, D3, E7, F6, G4, H5) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
    this.F = F6 | 0;
    this.G = G4 | 0;
    this.H = H5 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA256_W[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 64; i5++) {
      const W15 = SHA256_W[i5 - 15];
      const W22 = SHA256_W[i5 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i5] = s1 + SHA256_W[i5 - 7] + s0 + SHA256_W[i5 - 16] | 0;
    }
    let { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      const sigma1 = rotr(E7, 6) ^ rotr(E7, 11) ^ rotr(E7, 25);
      const T1 = H5 + sigma1 + Chi2(E7, F6, G4) + SHA256_K[i5] + SHA256_W[i5] | 0;
      const sigma0 = rotr(A4, 2) ^ rotr(A4, 13) ^ rotr(A4, 22);
      const T22 = sigma0 + Maj2(A4, B4, C6) | 0;
      H5 = G4;
      G4 = F6;
      F6 = E7;
      E7 = D3 + T1 | 0;
      D3 = C6;
      C6 = B4;
      B4 = A4;
      A4 = T1 + T22 | 0;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    F6 = F6 + this.F | 0;
    G4 = G4 + this.G | 0;
    H5 = H5 + this.H | 0;
    this.set(A4, B4, C6, D3, E7, F6, G4, H5);
  }
  roundClean() {
    clean2(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean2(this.buffer);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super(28);
    this.A = SHA224_IV[0] | 0;
    this.B = SHA224_IV[1] | 0;
    this.C = SHA224_IV[2] | 0;
    this.D = SHA224_IV[3] | 0;
    this.E = SHA224_IV[4] | 0;
    this.F = SHA224_IV[5] | 0;
    this.G = SHA224_IV[6] | 0;
    this.H = SHA224_IV[7] | 0;
  }
};
var K512 = (() => split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n5) => BigInt(n5))))();
var SHA512_Kh = (() => K512[0])();
var SHA512_Kl = (() => K512[1])();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD5 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV[0] | 0;
    this.Al = SHA512_IV[1] | 0;
    this.Bh = SHA512_IV[2] | 0;
    this.Bl = SHA512_IV[3] | 0;
    this.Ch = SHA512_IV[4] | 0;
    this.Cl = SHA512_IV[5] | 0;
    this.Dh = SHA512_IV[6] | 0;
    this.Dl = SHA512_IV[7] | 0;
    this.Eh = SHA512_IV[8] | 0;
    this.El = SHA512_IV[9] | 0;
    this.Fh = SHA512_IV[10] | 0;
    this.Fl = SHA512_IV[11] | 0;
    this.Gh = SHA512_IV[12] | 0;
    this.Gl = SHA512_IV[13] | 0;
    this.Hh = SHA512_IV[14] | 0;
    this.Hl = SHA512_IV[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4) {
      SHA512_W_H[i5] = view.getUint32(offset);
      SHA512_W_L[i5] = view.getUint32(offset += 4);
    }
    for (let i5 = 16; i5 < 80; i5++) {
      const W15h = SHA512_W_H[i5 - 15] | 0;
      const W15l = SHA512_W_L[i5 - 15] | 0;
      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i5 - 2] | 0;
      const W2l = SHA512_W_L[i5 - 2] | 0;
      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
      const SUMl = add4L(s0l, s1l, SHA512_W_L[i5 - 7], SHA512_W_L[i5 - 16]);
      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i5 - 7], SHA512_W_H[i5 - 16]);
      SHA512_W_H[i5] = SUMh | 0;
      SHA512_W_L[i5] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i5], SHA512_W_L[i5]);
      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i5], SHA512_W_H[i5]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L(T1l, sigma0l, MAJl);
      Ah = add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean2(SHA512_W_H, SHA512_W_L);
  }
  destroy() {
    clean2(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV[0] | 0;
    this.Al = SHA384_IV[1] | 0;
    this.Bh = SHA384_IV[2] | 0;
    this.Bl = SHA384_IV[3] | 0;
    this.Ch = SHA384_IV[4] | 0;
    this.Cl = SHA384_IV[5] | 0;
    this.Dh = SHA384_IV[6] | 0;
    this.Dl = SHA384_IV[7] | 0;
    this.Eh = SHA384_IV[8] | 0;
    this.El = SHA384_IV[9] | 0;
    this.Fh = SHA384_IV[10] | 0;
    this.Fl = SHA384_IV[11] | 0;
    this.Gh = SHA384_IV[12] | 0;
    this.Gl = SHA384_IV[13] | 0;
    this.Hh = SHA384_IV[14] | 0;
    this.Hl = SHA384_IV[15] | 0;
  }
};
var T224_IV = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_224 = class extends SHA512 {
  constructor() {
    super(28);
    this.Ah = T224_IV[0] | 0;
    this.Al = T224_IV[1] | 0;
    this.Bh = T224_IV[2] | 0;
    this.Bl = T224_IV[3] | 0;
    this.Ch = T224_IV[4] | 0;
    this.Cl = T224_IV[5] | 0;
    this.Dh = T224_IV[6] | 0;
    this.Dl = T224_IV[7] | 0;
    this.Eh = T224_IV[8] | 0;
    this.El = T224_IV[9] | 0;
    this.Fh = T224_IV[10] | 0;
    this.Fl = T224_IV[11] | 0;
    this.Gh = T224_IV[12] | 0;
    this.Gl = T224_IV[13] | 0;
    this.Hh = T224_IV[14] | 0;
    this.Hl = T224_IV[15] | 0;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super(32);
    this.Ah = T256_IV[0] | 0;
    this.Al = T256_IV[1] | 0;
    this.Bh = T256_IV[2] | 0;
    this.Bl = T256_IV[3] | 0;
    this.Ch = T256_IV[4] | 0;
    this.Cl = T256_IV[5] | 0;
    this.Dh = T256_IV[6] | 0;
    this.Dl = T256_IV[7] | 0;
    this.Eh = T256_IV[8] | 0;
    this.El = T256_IV[9] | 0;
    this.Fh = T256_IV[10] | 0;
    this.Fl = T256_IV[11] | 0;
    this.Gh = T256_IV[12] | 0;
    this.Gl = T256_IV[13] | 0;
    this.Hh = T256_IV[14] | 0;
    this.Hl = T256_IV[15] | 0;
  }
};
var sha2564 = createHasher2(() => new SHA256());
var sha224 = createHasher2(() => new SHA224());
var sha512 = createHasher2(() => new SHA512());
var sha384 = createHasher2(() => new SHA384());
var sha512_256 = createHasher2(() => new SHA512_256());
var sha512_224 = createHasher2(() => new SHA512_224());

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Hash.js
function keccak2563(value, options = {}) {
  const { as: as4 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_2562(from2(value));
  if (as4 === "Bytes")
    return bytes;
  return fromBytes3(bytes);
}

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/internal/lru.js
var LruMap5 = class extends Map {
  constructor(size14) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size14;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap5(8192)
};
var checksum = caches.checksum;

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError3({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError3({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2563(fromString3(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i5 = 0; i5 < 40; i5 += 2) {
    if (hash[i5 >> 1] >> 4 >= 8 && characters[i5]) {
      characters[i5] = characters[i5].toUpperCase();
    }
    if ((hash[i5 >> 1] & 15) >= 8 && characters[i5 + 1]) {
      characters[i5 + 1] = characters[i5 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError3 = class extends BaseError4 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError4 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError4 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex2 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex2 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2563 = 2n ** 256n - 1n;

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size14) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size14 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError4 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError4 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError4 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../node_modules/@walletconnect/core/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i5 = 0; i5 < types.length; i5++) {
    const type = types[i5];
    const value = values[i5];
    data.push(encodePacked2.encode(type, value));
  }
  return concat3(...data);
}
(function(encodePacked9) {
  function encode17(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft2(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString4(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft2(fromBoolean2(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex2);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size14 = Number.parseInt(bits) / 8;
      return fromNumber2(value, {
        size: isArray ? 32 : size14,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex2);
    if (bytesMatch) {
      const [_type, size14] = bytesMatch;
      if (Number.parseInt(size14) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size14),
          value
        });
      return padRight2(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i5 = 0; i5 < value.length; i5++) {
        data.push(encode17(childType, value[i5], true));
      }
      if (data.length === 0)
        return "0x";
      return concat3(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked9.encode = encode17;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError4 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size5(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError4 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError4 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../node_modules/uint8arrays/esm/src/alloc.js
function allocUnsafe(size14 = 0) {
  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {
    return globalThis.Buffer.allocUnsafe(size14);
  }
  return new Uint8Array(size14);
}

// ../node_modules/uint8arrays/esm/src/concat.js
function concat4(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = allocUnsafe(length2);
  let offset = 0;
  for (const arr of arrays) {
    output.set(arr, offset);
    offset += arr.length;
  }
  return output;
}

// ../node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});

// ../node_modules/multiformats/esm/vendor/base-x.js
function base(ALPHABET, name2) {
  if (ALPHABET.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j4 = 0; j4 < BASE_MAP.length; j4++) {
    BASE_MAP[j4] = 255;
  }
  for (var i5 = 0; i5 < ALPHABET.length; i5++) {
    var x8 = ALPHABET.charAt(i5);
    var xc = x8.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x8 + " is ambiguous");
    }
    BASE_MAP[xc] = i5;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode17(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size14 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size14);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i6 = 0;
      for (var it1 = size14 - 1; (carry !== 0 || i6 < length2) && it1 !== -1; it1--, i6++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      pbegin++;
    }
    var it22 = size14 - length2;
    while (it22 !== size14 && b58[it22] === 0) {
      it22++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it22 < size14; ++it22) {
      str += ALPHABET.charAt(b58[it22]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size14 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size14);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i6 = 0;
      for (var it32 = size14 - 1; (carry !== 0 || i6 < length2) && it32 !== -1; it32--, i6++) {
        carry += BASE * b256[it32] >>> 0;
        b256[it32] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i6;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it42 = size14 - length2;
    while (it42 !== size14 && b256[it42] === 0) {
      it42++;
    }
    var vch = new Uint8Array(zeroes + (size14 - it42));
    var j5 = zeroes;
    while (it42 !== size14) {
      vch[j5++] = b256[it42++];
    }
    return vch;
  }
  function decode10(string2) {
    var buffer2 = decodeUnsafe(string2);
    if (buffer2) {
      return buffer2;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode17,
    decodeUnsafe,
    decode: decode10
  };
}
var src = base;
var _brrp__multiformats_scope_baseX = src;
var base_x_default = _brrp__multiformats_scope_baseX;

// ../node_modules/multiformats/esm/src/bytes.js
var empty = new Uint8Array(0);
var equals = (aa, bb) => {
  if (aa === bb)
    return true;
  if (aa.byteLength !== bb.byteLength) {
    return false;
  }
  for (let ii4 = 0; ii4 < aa.byteLength; ii4++) {
    if (aa[ii4] !== bb[ii4]) {
      return false;
    }
  }
  return true;
};
var coerce = (o6) => {
  if (o6 instanceof Uint8Array && o6.constructor.name === "Uint8Array")
    return o6;
  if (o6 instanceof ArrayBuffer)
    return new Uint8Array(o6);
  if (ArrayBuffer.isView(o6)) {
    return new Uint8Array(o6.buffer, o6.byteOffset, o6.byteLength);
  }
  throw new Error("Unknown type, must be binary type");
};
var fromString5 = (str) => new TextEncoder().encode(str);
var toString2 = (b6) => new TextDecoder().decode(b6);

// ../node_modules/multiformats/esm/src/bases/base.js
var Encoder = class {
  constructor(name2, prefix, baseEncode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
  }
  encode(bytes) {
    if (bytes instanceof Uint8Array) {
      return `${this.prefix}${this.baseEncode(bytes)}`;
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};
var Decoder = class {
  constructor(name2, prefix, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    if (prefix.codePointAt(0) === void 0) {
      throw new Error("Invalid prefix character");
    }
    this.prefixCodePoint = prefix.codePointAt(0);
    this.baseDecode = baseDecode;
  }
  decode(text) {
    if (typeof text === "string") {
      if (text.codePointAt(0) !== this.prefixCodePoint) {
        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      }
      return this.baseDecode(text.slice(this.prefix.length));
    } else {
      throw Error("Can only multibase decode strings");
    }
  }
  or(decoder4) {
    return or2(this, decoder4);
  }
};
var ComposedDecoder = class {
  constructor(decoders) {
    this.decoders = decoders;
  }
  or(decoder4) {
    return or2(this, decoder4);
  }
  decode(input) {
    const prefix = input[0];
    const decoder4 = this.decoders[prefix];
    if (decoder4) {
      return decoder4.decode(input);
    } else {
      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
  }
};
var or2 = (left, right) => new ComposedDecoder({
  ...left.decoders || { [left.prefix]: left },
  ...right.decoders || { [right.prefix]: right }
});
var Codec = class {
  constructor(name2, prefix, baseEncode, baseDecode) {
    this.name = name2;
    this.prefix = prefix;
    this.baseEncode = baseEncode;
    this.baseDecode = baseDecode;
    this.encoder = new Encoder(name2, prefix, baseEncode);
    this.decoder = new Decoder(name2, prefix, baseDecode);
  }
  encode(input) {
    return this.encoder.encode(input);
  }
  decode(input) {
    return this.decoder.decode(input);
  }
};
var from7 = ({ name: name2, prefix, encode: encode17, decode: decode10 }) => new Codec(name2, prefix, encode17, decode10);
var baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
  const { encode: encode17, decode: decode10 } = base_x_default(alphabet2, name2);
  return from7({
    prefix,
    name: name2,
    encode: encode17,
    decode: (text) => coerce(decode10(text))
  });
};
var decode2 = (string2, alphabet2, bitsPerChar, name2) => {
  const codes = {};
  for (let i5 = 0; i5 < alphabet2.length; ++i5) {
    codes[alphabet2[i5]] = i5;
  }
  let end = string2.length;
  while (string2[end - 1] === "=") {
    --end;
  }
  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
  let bits = 0;
  let buffer2 = 0;
  let written = 0;
  for (let i5 = 0; i5 < end; ++i5) {
    const value = codes[string2[i5]];
    if (value === void 0) {
      throw new SyntaxError(`Non-${name2} character`);
    }
    buffer2 = buffer2 << bitsPerChar | value;
    bits += bitsPerChar;
    if (bits >= 8) {
      bits -= 8;
      out[written++] = 255 & buffer2 >> bits;
    }
  }
  if (bits >= bitsPerChar || 255 & buffer2 << 8 - bits) {
    throw new SyntaxError("Unexpected end of data");
  }
  return out;
};
var encode4 = (data, alphabet2, bitsPerChar) => {
  const pad11 = alphabet2[alphabet2.length - 1] === "=";
  const mask = (1 << bitsPerChar) - 1;
  let out = "";
  let bits = 0;
  let buffer2 = 0;
  for (let i5 = 0; i5 < data.length; ++i5) {
    buffer2 = buffer2 << 8 | data[i5];
    bits += 8;
    while (bits > bitsPerChar) {
      bits -= bitsPerChar;
      out += alphabet2[mask & buffer2 >> bits];
    }
  }
  if (bits) {
    out += alphabet2[mask & buffer2 << bitsPerChar - bits];
  }
  if (pad11) {
    while (out.length * bitsPerChar & 7) {
      out += "=";
    }
  }
  return out;
};
var rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
  return from7({
    prefix,
    name: name2,
    encode(input) {
      return encode4(input, alphabet2, bitsPerChar);
    },
    decode(input) {
      return decode2(input, alphabet2, bitsPerChar, name2);
    }
  });
};

// ../node_modules/multiformats/esm/src/bases/identity.js
var identity = from7({
  prefix: "\0",
  name: "identity",
  encode: (buf) => toString2(buf),
  decode: (str) => fromString5(str)
});

// ../node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var base2 = rfc4648({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
});

// ../node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8 = rfc4648({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
});

// ../node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10 = baseX({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
});

// ../node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var base16 = rfc4648({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
});
var base16upper = rfc4648({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
});

// ../node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base32 = rfc4648({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
});
var base32upper = rfc4648({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
});
var base32pad = rfc4648({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
});
var base32padupper = rfc4648({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
});
var base32hex = rfc4648({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
});
var base32hexupper = rfc4648({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
});
var base32hexpad = rfc4648({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
});
var base32hexpadupper = rfc4648({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
});
var base32z = rfc4648({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
});

// ../node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36 = baseX({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
});
var base36upper = baseX({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
});

// ../node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var base58btc = baseX({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
var base58flickr = baseX({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});

// ../node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var base64 = rfc4648({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
});
var base64pad = rfc4648({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
});
var base64url = rfc4648({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
});
var base64urlpad = rfc4648({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
});

// ../node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
var alphabet = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var alphabetBytesToChars = alphabet.reduce((p6, c8, i5) => {
  p6[i5] = c8;
  return p6;
}, []);
var alphabetCharsToBytes = alphabet.reduce((p6, c8, i5) => {
  p6[c8.codePointAt(0)] = i5;
  return p6;
}, []);
function encode5(data) {
  return data.reduce((p6, c8) => {
    p6 += alphabetBytesToChars[c8];
    return p6;
  }, "");
}
function decode3(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var base256emoji = from7({
  prefix: "🚀",
  name: "base256emoji",
  encode: encode5,
  decode: decode3
});

// ../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha2566,
  sha512: () => sha5122
});

// ../node_modules/multiformats/esm/vendor/varint.js
var encode_1 = encode6;
var MSB = 128;
var REST = 127;
var MSBALL = ~REST;
var INT = Math.pow(2, 31);
function encode6(num, out, offset) {
  out = out || [];
  offset = offset || 0;
  var oldOffset = offset;
  while (num >= INT) {
    out[offset++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset] = num | 0;
  encode6.bytes = offset - oldOffset + 1;
  return out;
}
var decode4 = read;
var MSB$1 = 128;
var REST$1 = 127;
function read(buf, offset) {
  var res = 0, offset = offset || 0, shift = 0, counter = offset, b6, l8 = buf.length;
  do {
    if (counter >= l8) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b6 = buf[counter++];
    res += shift < 28 ? (b6 & REST$1) << shift : (b6 & REST$1) * Math.pow(2, shift);
    shift += 7;
  } while (b6 >= MSB$1);
  read.bytes = counter - offset;
  return res;
}
var N1 = Math.pow(2, 7);
var N22 = Math.pow(2, 14);
var N3 = Math.pow(2, 21);
var N4 = Math.pow(2, 28);
var N5 = Math.pow(2, 35);
var N6 = Math.pow(2, 42);
var N7 = Math.pow(2, 49);
var N8 = Math.pow(2, 56);
var N9 = Math.pow(2, 63);
var length = function(value) {
  return value < N1 ? 1 : value < N22 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
};
var varint = {
  encode: encode_1,
  decode: decode4,
  encodingLength: length
};
var _brrp_varint = varint;
var varint_default = _brrp_varint;

// ../node_modules/multiformats/esm/src/varint.js
var decode5 = (data, offset = 0) => {
  const code2 = varint_default.decode(data, offset);
  return [
    code2,
    varint_default.decode.bytes
  ];
};
var encodeTo = (int, target, offset = 0) => {
  varint_default.encode(int, target, offset);
  return target;
};
var encodingLength = (int) => {
  return varint_default.encodingLength(int);
};

// ../node_modules/multiformats/esm/src/hashes/digest.js
var create2 = (code2, digest2) => {
  const size14 = digest2.byteLength;
  const sizeOffset = encodingLength(code2);
  const digestOffset = sizeOffset + encodingLength(size14);
  const bytes = new Uint8Array(digestOffset + size14);
  encodeTo(code2, bytes, 0);
  encodeTo(size14, bytes, sizeOffset);
  bytes.set(digest2, digestOffset);
  return new Digest(code2, size14, digest2, bytes);
};
var decode6 = (multihash) => {
  const bytes = coerce(multihash);
  const [code2, sizeOffset] = decode5(bytes);
  const [size14, digestOffset] = decode5(bytes.subarray(sizeOffset));
  const digest2 = bytes.subarray(sizeOffset + digestOffset);
  if (digest2.byteLength !== size14) {
    throw new Error("Incorrect length");
  }
  return new Digest(code2, size14, digest2, bytes);
};
var equals2 = (a3, b6) => {
  if (a3 === b6) {
    return true;
  } else {
    return a3.code === b6.code && a3.size === b6.size && equals(a3.bytes, b6.bytes);
  }
};
var Digest = class {
  constructor(code2, size14, digest2, bytes) {
    this.code = code2;
    this.size = size14;
    this.digest = digest2;
    this.bytes = bytes;
  }
};

// ../node_modules/multiformats/esm/src/hashes/hasher.js
var from8 = ({ name: name2, code: code2, encode: encode17 }) => new Hasher(name2, code2, encode17);
var Hasher = class {
  constructor(name2, code2, encode17) {
    this.name = name2;
    this.code = code2;
    this.encode = encode17;
  }
  digest(input) {
    if (input instanceof Uint8Array) {
      const result = this.encode(input);
      return result instanceof Uint8Array ? create2(this.code, result) : result.then((digest2) => create2(this.code, digest2));
    } else {
      throw Error("Unknown type, must be binary type");
    }
  }
};

// ../node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
var sha2566 = from8({
  name: "sha2-256",
  code: 18,
  encode: sha("SHA-256")
});
var sha5122 = from8({
  name: "sha2-512",
  code: 19,
  encode: sha("SHA-512")
});

// ../node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code = 0;
var name = "identity";
var encode7 = coerce;
var digest = (input) => create2(code, encode7(input));
var identity2 = {
  code,
  name,
  encode: encode7,
  digest
};

// ../node_modules/multiformats/esm/src/codecs/json.js
var textEncoder = new TextEncoder();
var textDecoder = new TextDecoder();

// ../node_modules/multiformats/esm/src/cid.js
var CID = class _CID {
  constructor(version5, code2, multihash, bytes) {
    this.code = code2;
    this.version = version5;
    this.multihash = multihash;
    this.bytes = bytes;
    this.byteOffset = bytes.byteOffset;
    this.byteLength = bytes.byteLength;
    this.asCID = this;
    this._baseCache = /* @__PURE__ */ new Map();
    Object.defineProperties(this, {
      byteOffset: hidden,
      byteLength: hidden,
      code: readonly,
      version: readonly,
      multihash: readonly,
      bytes: readonly,
      _baseCache: hidden,
      asCID: hidden
    });
  }
  toV0() {
    switch (this.version) {
      case 0: {
        return this;
      }
      default: {
        const { code: code2, multihash } = this;
        if (code2 !== DAG_PB_CODE) {
          throw new Error("Cannot convert a non dag-pb CID to CIDv0");
        }
        if (multihash.code !== SHA_256_CODE) {
          throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
        }
        return _CID.createV0(multihash);
      }
    }
  }
  toV1() {
    switch (this.version) {
      case 0: {
        const { code: code2, digest: digest2 } = this.multihash;
        const multihash = create2(code2, digest2);
        return _CID.createV1(this.code, multihash);
      }
      case 1: {
        return this;
      }
      default: {
        throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
      }
    }
  }
  equals(other) {
    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
  }
  toString(base3) {
    const { bytes, version: version5, _baseCache } = this;
    switch (version5) {
      case 0:
        return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
      default:
        return toStringV1(bytes, _baseCache, base3 || base32.encoder);
    }
  }
  toJSON() {
    return {
      code: this.code,
      version: this.version,
      hash: this.multihash.bytes
    };
  }
  get [Symbol.toStringTag]() {
    return "CID";
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return "CID(" + this.toString() + ")";
  }
  static isCID(value) {
    deprecate(/^0\.0/, IS_CID_DEPRECATION);
    return !!(value && (value[cidSymbol] || value.asCID === value));
  }
  get toBaseEncodedString() {
    throw new Error("Deprecated, use .toString()");
  }
  get codec() {
    throw new Error('"codec" property is deprecated, use integer "code" property instead');
  }
  get buffer() {
    throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
  }
  get multibaseName() {
    throw new Error('"multibaseName" property is deprecated');
  }
  get prefix() {
    throw new Error('"prefix" property is deprecated');
  }
  static asCID(value) {
    if (value instanceof _CID) {
      return value;
    } else if (value != null && value.asCID === value) {
      const { version: version5, code: code2, multihash, bytes } = value;
      return new _CID(version5, code2, multihash, bytes || encodeCID(version5, code2, multihash.bytes));
    } else if (value != null && value[cidSymbol] === true) {
      const { version: version5, multihash, code: code2 } = value;
      const digest2 = decode6(multihash);
      return _CID.create(version5, code2, digest2);
    } else {
      return null;
    }
  }
  static create(version5, code2, digest2) {
    if (typeof code2 !== "number") {
      throw new Error("String codecs are no longer supported");
    }
    switch (version5) {
      case 0: {
        if (code2 !== DAG_PB_CODE) {
          throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
        } else {
          return new _CID(version5, code2, digest2, digest2.bytes);
        }
      }
      case 1: {
        const bytes = encodeCID(version5, code2, digest2.bytes);
        return new _CID(version5, code2, digest2, bytes);
      }
      default: {
        throw new Error("Invalid version");
      }
    }
  }
  static createV0(digest2) {
    return _CID.create(0, DAG_PB_CODE, digest2);
  }
  static createV1(code2, digest2) {
    return _CID.create(1, code2, digest2);
  }
  static decode(bytes) {
    const [cid, remainder] = _CID.decodeFirst(bytes);
    if (remainder.length) {
      throw new Error("Incorrect length");
    }
    return cid;
  }
  static decodeFirst(bytes) {
    const specs = _CID.inspectBytes(bytes);
    const prefixSize = specs.size - specs.multihashSize;
    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
    if (multihashBytes.byteLength !== specs.multihashSize) {
      throw new Error("Incorrect length");
    }
    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
    const cid = specs.version === 0 ? _CID.createV0(digest2) : _CID.createV1(specs.codec, digest2);
    return [
      cid,
      bytes.subarray(specs.size)
    ];
  }
  static inspectBytes(initialBytes) {
    let offset = 0;
    const next = () => {
      const [i5, length2] = decode5(initialBytes.subarray(offset));
      offset += length2;
      return i5;
    };
    let version5 = next();
    let codec = DAG_PB_CODE;
    if (version5 === 18) {
      version5 = 0;
      offset = 0;
    } else if (version5 === 1) {
      codec = next();
    }
    if (version5 !== 0 && version5 !== 1) {
      throw new RangeError(`Invalid CID version ${version5}`);
    }
    const prefixSize = offset;
    const multihashCode = next();
    const digestSize = next();
    const size14 = offset + digestSize;
    const multihashSize = size14 - prefixSize;
    return {
      version: version5,
      codec,
      multihashCode,
      digestSize,
      multihashSize,
      size: size14
    };
  }
  static parse(source, base3) {
    const [prefix, bytes] = parseCIDtoBytes(source, base3);
    const cid = _CID.decode(bytes);
    cid._baseCache.set(prefix, source);
    return cid;
  }
};
var parseCIDtoBytes = (source, base3) => {
  switch (source[0]) {
    case "Q": {
      const decoder4 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder4.decode(`${base58btc.prefix}${source}`)
      ];
    }
    case base58btc.prefix: {
      const decoder4 = base3 || base58btc;
      return [
        base58btc.prefix,
        decoder4.decode(source)
      ];
    }
    case base32.prefix: {
      const decoder4 = base3 || base32;
      return [
        base32.prefix,
        decoder4.decode(source)
      ];
    }
    default: {
      if (base3 == null) {
        throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
      }
      return [
        source[0],
        base3.decode(source)
      ];
    }
  }
};
var toStringV0 = (bytes, cache, base3) => {
  const { prefix } = base3;
  if (prefix !== base58btc.prefix) {
    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
  }
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes).slice(1);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var toStringV1 = (bytes, cache, base3) => {
  const { prefix } = base3;
  const cid = cache.get(prefix);
  if (cid == null) {
    const cid2 = base3.encode(bytes);
    cache.set(prefix, cid2);
    return cid2;
  } else {
    return cid;
  }
};
var DAG_PB_CODE = 112;
var SHA_256_CODE = 18;
var encodeCID = (version5, code2, multihash) => {
  const codeOffset = encodingLength(version5);
  const hashOffset = codeOffset + encodingLength(code2);
  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
  encodeTo(version5, bytes, 0);
  encodeTo(code2, bytes, codeOffset);
  bytes.set(multihash, hashOffset);
  return bytes;
};
var cidSymbol = Symbol.for("@ipld/js-cid/CID");
var readonly = {
  writable: false,
  configurable: false,
  enumerable: true
};
var hidden = {
  writable: false,
  enumerable: false,
  configurable: false
};
var version2 = "0.0.0-dev";
var deprecate = (range, message) => {
  if (range.test(version2)) {
    console.warn(message);
  } else {
    throw new Error(message);
  }
};
var IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

// ../node_modules/multiformats/esm/src/basics.js
var bases = {
  ...identity_exports,
  ...base2_exports,
  ...base8_exports,
  ...base10_exports,
  ...base16_exports,
  ...base32_exports,
  ...base36_exports,
  ...base58_exports,
  ...base64_exports,
  ...base256emoji_exports
};
var hashes = {
  ...sha2_browser_exports,
  ...identity_exports2
};

// ../node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode17, decode10) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode17
    },
    decoder: { decode: decode10 }
  };
}
var string = createCodec("utf8", "u", (buf) => {
  const decoder4 = new TextDecoder("utf8");
  return "u" + decoder4.decode(buf);
}, (str) => {
  const encoder7 = new TextEncoder();
  return encoder7.encode(str.substring(1));
});
var ascii = createCodec("ascii", "a", (buf) => {
  let string2 = "a";
  for (let i5 = 0; i5 < buf.length; i5++) {
    string2 += String.fromCharCode(buf[i5]);
  }
  return string2;
}, (str) => {
  str = str.substring(1);
  const buf = allocUnsafe(str.length);
  for (let i5 = 0; i5 < str.length; i5++) {
    buf[i5] = str.charCodeAt(i5);
  }
  return buf;
});
var BASES = {
  utf8: string,
  "utf-8": string,
  hex: bases.base16,
  latin1: ascii,
  ascii,
  binary: ascii,
  ...bases
};
var bases_default = BASES;

// ../node_modules/uint8arrays/esm/src/from-string.js
function fromString6(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(string2, "utf8");
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}

// ../node_modules/uint8arrays/esm/src/to-string.js
function toString3(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  if ((encoding === "utf8" || encoding === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null) {
    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString("utf8");
  }
  return base3.encoder.encode(array).substring(1);
}

// ../node_modules/@walletconnect/core/node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic = __toESM(require_elliptic());

// ../node_modules/@walletconnect/relay-api/dist/index.es.js
var C2 = { waku: { publish: "waku_publish", batchPublish: "waku_batchPublish", subscribe: "waku_subscribe", batchSubscribe: "waku_batchSubscribe", subscription: "waku_subscription", unsubscribe: "waku_unsubscribe", batchUnsubscribe: "waku_batchUnsubscribe", batchFetchMessages: "waku_batchFetchMessages" }, irn: { publish: "irn_publish", batchPublish: "irn_batchPublish", subscribe: "irn_subscribe", batchSubscribe: "irn_batchSubscribe", subscription: "irn_subscription", unsubscribe: "irn_unsubscribe", batchUnsubscribe: "irn_batchUnsubscribe", batchFetchMessages: "irn_batchFetchMessages" }, iridium: { publish: "iridium_publish", batchPublish: "iridium_batchPublish", subscribe: "iridium_subscribe", batchSubscribe: "iridium_batchSubscribe", subscription: "iridium_subscription", unsubscribe: "iridium_unsubscribe", batchUnsubscribe: "iridium_batchUnsubscribe", batchFetchMessages: "iridium_batchFetchMessages" } };

// ../node_modules/@walletconnect/core/node_modules/@walletconnect/utils/dist/index.es.js
var Ft2 = "ReactNative";
var H2 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var Gt2 = "js";
function et() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function ne() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === Ft2;
}
function zr2() {
  return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function Jr2() {
  return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Ae2() {
  return !et() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function ue() {
  return ne() ? H2.reactNative : et() ? H2.node : Ae2() ? H2.browser : H2.unknown;
}
function Yr2() {
  var e3;
  try {
    return ne() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (e3 = global.Application) == null ? void 0 : e3.applicationId : void 0;
  } catch {
    return;
  }
}
function Wt2(e3, t2) {
  const n5 = new URLSearchParams(e3);
  for (const r3 of Object.keys(t2).sort()) if (t2.hasOwnProperty(r3)) {
    const o6 = t2[r3];
    o6 !== void 0 && n5.set(r3, o6);
  }
  return n5.toString();
}
function Xr2() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function zt2() {
  if (ue() === H2.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n5, Version: r3 } = global.Platform;
    return [n5, r3].join("-");
  }
  const e3 = detect();
  if (e3 === null) return "unknown";
  const t2 = e3.os ? e3.os.replace(" ", "").toLowerCase() : "unknown";
  return e3.type === "browser" ? [t2, e3.name, e3.version].join("-") : [t2, e3.version].join("-");
}
function Jt2() {
  var e3;
  const t2 = ue();
  return t2 === H2.browser ? [t2, ((e3 = (0, import_window_getters.getLocation)()) == null ? void 0 : e3.host) || "unknown"].join(":") : t2;
}
function Yt2(e3, t2, n5) {
  const r3 = zt2(), o6 = Jt2();
  return [[e3, t2].join("-"), [Gt2, n5].join("-"), r3, o6].join("/");
}
function Qr2({ protocol: e3, version: t2, relayUrl: n5, sdkVersion: r3, auth: o6, projectId: s4, useOnCloseEvent: i5, bundleId: c8, packageName: u4 }) {
  const a3 = n5.split("?"), l8 = Yt2(e3, t2, r3), f10 = { auth: o6, ua: l8, projectId: s4, useOnCloseEvent: i5 || void 0, packageName: u4 || void 0, bundleId: c8 || void 0 }, d6 = Wt2(a3[1] || "", f10);
  return a3[0] + "?" + d6;
}
function ro2(e3) {
  return Object.fromEntries(e3.entries());
}
function oo2(e3) {
  return new Map(Object.entries(e3));
}
function ao2(e3 = import_time3.FIVE_MINUTES, t2) {
  const n5 = (0, import_time3.toMiliseconds)(e3 || import_time3.FIVE_MINUTES);
  let r3, o6, s4, i5;
  return { resolve: (c8) => {
    s4 && r3 && (clearTimeout(s4), r3(c8), i5 = Promise.resolve(c8));
  }, reject: (c8) => {
    s4 && o6 && (clearTimeout(s4), o6(c8));
  }, done: () => new Promise((c8, u4) => {
    if (i5) return c8(i5);
    s4 = setTimeout(() => {
      const a3 = new Error(t2);
      i5 = Promise.reject(a3), u4(a3);
    }, n5), r3 = c8, o6 = u4;
  }) };
}
function uo2(e3, t2, n5) {
  return new Promise(async (r3, o6) => {
    const s4 = setTimeout(() => o6(new Error(n5)), t2);
    try {
      const i5 = await e3;
      r3(i5);
    } catch (i5) {
      o6(i5);
    }
    clearTimeout(s4);
  });
}
function tt(e3, t2) {
  if (typeof t2 == "string" && t2.startsWith(`${e3}:`)) return t2;
  if (e3.toLowerCase() === "topic") {
    if (typeof t2 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${t2}`;
  } else if (e3.toLowerCase() === "id") {
    if (typeof t2 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${t2}`;
  }
  throw new Error(`Unknown expirer target type: ${e3}`);
}
function fo2(e3) {
  return tt("topic", e3);
}
function lo2(e3) {
  return tt("id", e3);
}
function ho2(e3) {
  const [t2, n5] = e3.split(":"), r3 = { id: void 0, topic: void 0 };
  if (t2 === "topic" && typeof n5 == "string") r3.topic = n5;
  else if (t2 === "id" && Number.isInteger(Number(n5))) r3.id = Number(n5);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${t2}:${n5}`);
  return r3;
}
function po2(e3, t2) {
  return (0, import_time3.fromMiliseconds)((t2 || Date.now()) + (0, import_time3.toMiliseconds)(e3));
}
function go2(e3) {
  return Date.now() >= (0, import_time3.toMiliseconds)(e3);
}
function yo2(e3, t2) {
  return `${e3}${t2 ? `:${t2}` : ""}`;
}
function Eo2() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (e3) => {
    const t2 = Math.random() * 16 | 0;
    return (e3 === "x" ? t2 : t2 & 3 | 8).toString(16);
  });
}
function vo2() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function rt2(e3) {
  return Buffer.from(e3, "base64").toString("utf-8");
}
function xo2(e3) {
  return new Promise((t2) => setTimeout(t2, e3));
}
function Ne2(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Io2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function je2(e3, ...t2) {
  if (!Io2(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function ot(e3) {
  if (typeof e3 != "function" || typeof e3.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Ne2(e3.outputLen), Ne2(e3.blockLen);
}
function me2(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function sn2(e3, t2) {
  je2(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var Ce2 = BigInt(2 ** 32 - 1);
var cn = BigInt(32);
function Oo2(e3, t2 = false) {
  return t2 ? { h: Number(e3 & Ce2), l: Number(e3 >> cn & Ce2) } : { h: Number(e3 >> cn & Ce2) | 0, l: Number(e3 & Ce2) | 0 };
}
function Ao2(e3, t2 = false) {
  let n5 = new Uint32Array(e3.length), r3 = new Uint32Array(e3.length);
  for (let o6 = 0; o6 < e3.length; o6++) {
    const { h: s4, l: i5 } = Oo2(e3[o6], t2);
    [n5[o6], r3[o6]] = [s4, i5];
  }
  return [n5, r3];
}
var No2 = (e3, t2, n5) => e3 << n5 | t2 >>> 32 - n5;
var So2 = (e3, t2, n5) => t2 << n5 | e3 >>> 32 - n5;
var Uo2 = (e3, t2, n5) => t2 << n5 - 32 | e3 >>> 64 - n5;
var _o2 = (e3, t2, n5) => e3 << n5 - 32 | t2 >>> 64 - n5;
var be2 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function To2(e3) {
  return new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
}
function st(e3) {
  return new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
}
function J3(e3, t2) {
  return e3 << 32 - t2 | e3 >>> t2;
}
var an = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function $o2(e3) {
  return e3 << 24 & 4278190080 | e3 << 8 & 16711680 | e3 >>> 8 & 65280 | e3 >>> 24 & 255;
}
function un(e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2] = $o2(e3[t2]);
}
function Ro2(e3) {
  if (typeof e3 != "string") throw new Error("utf8ToBytes expected string, got " + typeof e3);
  return new Uint8Array(new TextEncoder().encode(e3));
}
function we2(e3) {
  return typeof e3 == "string" && (e3 = Ro2(e3)), je2(e3), e3;
}
var it2 = class {
  clone() {
    return this._cloneInto();
  }
};
function fn(e3) {
  const t2 = (r3) => e3().update(we2(r3)).digest(), n5 = e3();
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = () => e3(), t2;
}
function Se2(e3 = 32) {
  if (be2 && typeof be2.getRandomValues == "function") return be2.getRandomValues(new Uint8Array(e3));
  if (be2 && typeof be2.randomBytes == "function") return be2.randomBytes(e3);
  throw new Error("crypto.getRandomValues must be defined");
}
var ln = [];
var dn = [];
var hn = [];
var Po2 = BigInt(0);
var Ue2 = BigInt(1);
var Bo2 = BigInt(2);
var Lo2 = BigInt(7);
var jo2 = BigInt(256);
var Co2 = BigInt(113);
for (let e3 = 0, t2 = Ue2, n5 = 1, r3 = 0; e3 < 24; e3++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], ln.push(2 * (5 * r3 + n5)), dn.push((e3 + 1) * (e3 + 2) / 2 % 64);
  let o6 = Po2;
  for (let s4 = 0; s4 < 7; s4++) t2 = (t2 << Ue2 ^ (t2 >> Lo2) * Co2) % jo2, t2 & Bo2 && (o6 ^= Ue2 << (Ue2 << BigInt(s4)) - Ue2);
  hn.push(o6);
}
var [ko2, Do2] = Ao2(hn, true);
var pn = (e3, t2, n5) => n5 > 32 ? Uo2(e3, t2, n5) : No2(e3, t2, n5);
var gn2 = (e3, t2, n5) => n5 > 32 ? _o2(e3, t2, n5) : So2(e3, t2, n5);
function Mo2(e3, t2 = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - t2; r3 < 24; r3++) {
    for (let i5 = 0; i5 < 10; i5++) n5[i5] = e3[i5] ^ e3[i5 + 10] ^ e3[i5 + 20] ^ e3[i5 + 30] ^ e3[i5 + 40];
    for (let i5 = 0; i5 < 10; i5 += 2) {
      const c8 = (i5 + 8) % 10, u4 = (i5 + 2) % 10, a3 = n5[u4], l8 = n5[u4 + 1], f10 = pn(a3, l8, 1) ^ n5[c8], d6 = gn2(a3, l8, 1) ^ n5[c8 + 1];
      for (let g5 = 0; g5 < 50; g5 += 10) e3[i5 + g5] ^= f10, e3[i5 + g5 + 1] ^= d6;
    }
    let o6 = e3[2], s4 = e3[3];
    for (let i5 = 0; i5 < 24; i5++) {
      const c8 = dn[i5], u4 = pn(o6, s4, c8), a3 = gn2(o6, s4, c8), l8 = ln[i5];
      o6 = e3[l8], s4 = e3[l8 + 1], e3[l8] = u4, e3[l8 + 1] = a3;
    }
    for (let i5 = 0; i5 < 50; i5 += 10) {
      for (let c8 = 0; c8 < 10; c8++) n5[c8] = e3[i5 + c8];
      for (let c8 = 0; c8 < 10; c8++) e3[i5 + c8] ^= ~n5[(c8 + 2) % 10] & n5[(c8 + 4) % 10];
    }
    e3[0] ^= ko2[r3], e3[1] ^= Do2[r3];
  }
  n5.fill(0);
}
var Lt2 = class _Lt extends it2 {
  constructor(t2, n5, r3, o6 = false, s4 = 24) {
    if (super(), this.blockLen = t2, this.suffix = n5, this.outputLen = r3, this.enableXOF = o6, this.rounds = s4, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Ne2(r3), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = To2(this.state);
  }
  keccak() {
    an || un(this.state32), Mo2(this.state32, this.rounds), an || un(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t2) {
    me2(this);
    const { blockLen: n5, state: r3 } = this;
    t2 = we2(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(n5 - this.pos, o6 - s4);
      for (let c8 = 0; c8 < i5; c8++) r3[this.pos++] ^= t2[s4++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: t2, suffix: n5, pos: r3, blockLen: o6 } = this;
    t2[r3] ^= n5, (n5 & 128) !== 0 && r3 === o6 - 1 && this.keccak(), t2[o6 - 1] ^= 128, this.keccak();
  }
  writeInto(t2) {
    me2(this, false), je2(t2), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o6 = 0, s4 = t2.length; o6 < s4; ) {
      this.posOut >= r3 && this.keccak();
      const i5 = Math.min(r3 - this.posOut, s4 - o6);
      t2.set(n5.subarray(this.posOut, this.posOut + i5), o6), this.posOut += i5, o6 += i5;
    }
    return t2;
  }
  xofInto(t2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(t2);
  }
  xof(t2) {
    return Ne2(t2), this.xofInto(new Uint8Array(t2));
  }
  digestInto(t2) {
    if (sn2(t2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(t2), this.destroy(), t2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(t2) {
    const { blockLen: n5, suffix: r3, outputLen: o6, rounds: s4, enableXOF: i5 } = this;
    return t2 || (t2 = new _Lt(n5, r3, o6, i5, s4)), t2.state32.set(this.state32), t2.pos = this.pos, t2.posOut = this.posOut, t2.finished = this.finished, t2.rounds = s4, t2.suffix = r3, t2.outputLen = o6, t2.enableXOF = i5, t2.destroyed = this.destroyed, t2;
  }
};
var Vo2 = (e3, t2, n5) => fn(() => new Lt2(t2, e3, n5));
var Ho2 = Vo2(1, 136, 256 / 8);
function ht2(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Bn2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function F(e3, ...t2) {
  if (!Bn2(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function Ln2(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function cs(e3, t2) {
  F(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jn2(e3) {
  if (typeof e3 != "boolean") throw new Error(`boolean expected, not ${e3}`);
}
var se = (e3) => new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
var as = (e3) => new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
var us = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!us) throw new Error("Non little-endian hardware is not supported");
function fs(e3) {
  if (typeof e3 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(e3));
}
function pt(e3) {
  if (typeof e3 == "string") e3 = fs(e3);
  else if (Bn2(e3)) e3 = gt2(e3);
  else throw new Error("Uint8Array expected, got " + typeof e3);
  return e3;
}
function ls(e3, t2) {
  if (t2 == null || typeof t2 != "object") throw new Error("options must be defined");
  return Object.assign(e3, t2);
}
function ds(e3, t2) {
  if (e3.length !== t2.length) return false;
  let n5 = 0;
  for (let r3 = 0; r3 < e3.length; r3++) n5 |= e3[r3] ^ t2[r3];
  return n5 === 0;
}
var hs = (e3, t2) => {
  function n5(r3, ...o6) {
    if (F(r3), e3.nonceLength !== void 0) {
      const l8 = o6[0];
      if (!l8) throw new Error("nonce / iv required");
      e3.varSizeNonce ? F(l8) : F(l8, e3.nonceLength);
    }
    const s4 = e3.tagLength;
    s4 && o6[1] !== void 0 && F(o6[1]);
    const i5 = t2(r3, ...o6), c8 = (l8, f10) => {
      if (f10 !== void 0) {
        if (l8 !== 2) throw new Error("cipher output not supported");
        F(f10);
      }
    };
    let u4 = false;
    return { encrypt(l8, f10) {
      if (u4) throw new Error("cannot encrypt() twice with same key + nonce");
      return u4 = true, F(l8), c8(i5.encrypt.length, f10), i5.encrypt(l8, f10);
    }, decrypt(l8, f10) {
      if (F(l8), s4 && l8.length < s4) throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return c8(i5.decrypt.length, f10), i5.decrypt(l8, f10);
    } };
  }
  return Object.assign(n5, e3), n5;
};
function Cn2(e3, t2, n5 = true) {
  if (t2 === void 0) return new Uint8Array(e3);
  if (t2.length !== e3) throw new Error("invalid output length, expected " + e3 + ", got: " + t2.length);
  if (n5 && !ps(t2)) throw new Error("invalid output, must be aligned");
  return t2;
}
function kn2(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function ps(e3) {
  return e3.byteOffset % 4 === 0;
}
function gt2(e3) {
  return Uint8Array.from(e3);
}
function Ee2(...e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2].fill(0);
}
var Dn = (e3) => Uint8Array.from(e3.split("").map((t2) => t2.charCodeAt(0)));
var gs = Dn("expand 16-byte k");
var ys = Dn("expand 32-byte k");
var ms = se(gs);
var bs = se(ys);
function x4(e3, t2) {
  return e3 << t2 | e3 >>> 32 - t2;
}
function yt2(e3) {
  return e3.byteOffset % 4 === 0;
}
var Ve2 = 64;
var ws = 16;
var Mn2 = 2 ** 32 - 1;
var Vn2 = new Uint32Array();
function Es(e3, t2, n5, r3, o6, s4, i5, c8) {
  const u4 = o6.length, a3 = new Uint8Array(Ve2), l8 = se(a3), f10 = yt2(o6) && yt2(s4), d6 = f10 ? se(o6) : Vn2, g5 = f10 ? se(s4) : Vn2;
  for (let y7 = 0; y7 < u4; i5++) {
    if (e3(t2, n5, r3, l8, i5, c8), i5 >= Mn2) throw new Error("arx: counter overflow");
    const h6 = Math.min(Ve2, u4 - y7);
    if (f10 && h6 === Ve2) {
      const m4 = y7 / 4;
      if (y7 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let L5 = 0, b6; L5 < ws; L5++) b6 = m4 + L5, g5[b6] = d6[b6] ^ l8[L5];
      y7 += Ve2;
      continue;
    }
    for (let m4 = 0, L5; m4 < h6; m4++) L5 = y7 + m4, s4[L5] = o6[L5] ^ a3[m4];
    y7 += h6;
  }
}
function vs(e3, t2) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o6, counterRight: s4, rounds: i5 } = ls({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, t2);
  if (typeof e3 != "function") throw new Error("core must be a function");
  return ht2(o6), ht2(i5), jn2(s4), jn2(n5), (c8, u4, a3, l8, f10 = 0) => {
    F(c8), F(u4), F(a3);
    const d6 = a3.length;
    if (l8 === void 0 && (l8 = new Uint8Array(d6)), F(l8), ht2(f10), f10 < 0 || f10 >= Mn2) throw new Error("arx: counter overflow");
    if (l8.length < d6) throw new Error(`arx: output (${l8.length}) is shorter than data (${d6})`);
    const g5 = [];
    let y7 = c8.length, h6, m4;
    if (y7 === 32) g5.push(h6 = gt2(c8)), m4 = bs;
    else if (y7 === 16 && n5) h6 = new Uint8Array(32), h6.set(c8), h6.set(c8, 16), m4 = ms, g5.push(h6);
    else throw new Error(`arx: invalid 32-byte key, got length=${y7}`);
    yt2(u4) || g5.push(u4 = gt2(u4));
    const L5 = se(h6);
    if (r3) {
      if (u4.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(m4, L5, se(u4.subarray(0, 16)), L5), u4 = u4.subarray(16);
    }
    const b6 = 16 - o6;
    if (b6 !== u4.length) throw new Error(`arx: nonce must be ${b6} or 16 bytes`);
    if (b6 !== 12) {
      const O7 = new Uint8Array(12);
      O7.set(u4, s4 ? 0 : 12 - u4.length), u4 = O7, g5.push(u4);
    }
    const _4 = se(u4);
    return Es(e3, m4, L5, _4, a3, l8, f10, i5), Ee2(...g5), l8;
  };
}
var M3 = (e3, t2) => e3[t2++] & 255 | (e3[t2++] & 255) << 8;
var xs = class {
  constructor(t2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, t2 = pt(t2), F(t2, 32);
    const n5 = M3(t2, 0), r3 = M3(t2, 2), o6 = M3(t2, 4), s4 = M3(t2, 6), i5 = M3(t2, 8), c8 = M3(t2, 10), u4 = M3(t2, 12), a3 = M3(t2, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o6 << 6) & 7939, this.r[3] = (o6 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i5 << 12) & 255, this.r[5] = i5 >>> 1 & 8190, this.r[6] = (i5 >>> 14 | c8 << 2) & 8191, this.r[7] = (c8 >>> 11 | u4 << 5) & 8065, this.r[8] = (u4 >>> 8 | a3 << 8) & 8191, this.r[9] = a3 >>> 5 & 127;
    for (let l8 = 0; l8 < 8; l8++) this.pad[l8] = M3(t2, 16 + 2 * l8);
  }
  process(t2, n5, r3 = false) {
    const o6 = r3 ? 0 : 2048, { h: s4, r: i5 } = this, c8 = i5[0], u4 = i5[1], a3 = i5[2], l8 = i5[3], f10 = i5[4], d6 = i5[5], g5 = i5[6], y7 = i5[7], h6 = i5[8], m4 = i5[9], L5 = M3(t2, n5 + 0), b6 = M3(t2, n5 + 2), _4 = M3(t2, n5 + 4), O7 = M3(t2, n5 + 6), k7 = M3(t2, n5 + 8), E7 = M3(t2, n5 + 10), B4 = M3(t2, n5 + 12), j4 = M3(t2, n5 + 14);
    let v7 = s4[0] + (L5 & 8191), I4 = s4[1] + ((L5 >>> 13 | b6 << 3) & 8191), w6 = s4[2] + ((b6 >>> 10 | _4 << 6) & 8191), R3 = s4[3] + ((_4 >>> 7 | O7 << 9) & 8191), A4 = s4[4] + ((O7 >>> 4 | k7 << 12) & 8191), T4 = s4[5] + (k7 >>> 1 & 8191), N12 = s4[6] + ((k7 >>> 14 | E7 << 2) & 8191), S5 = s4[7] + ((E7 >>> 11 | B4 << 5) & 8191), U3 = s4[8] + ((B4 >>> 8 | j4 << 8) & 8191), $4 = s4[9] + (j4 >>> 5 | o6), p6 = 0, C6 = p6 + v7 * c8 + I4 * (5 * m4) + w6 * (5 * h6) + R3 * (5 * y7) + A4 * (5 * g5);
    p6 = C6 >>> 13, C6 &= 8191, C6 += T4 * (5 * d6) + N12 * (5 * f10) + S5 * (5 * l8) + U3 * (5 * a3) + $4 * (5 * u4), p6 += C6 >>> 13, C6 &= 8191;
    let D3 = p6 + v7 * u4 + I4 * c8 + w6 * (5 * m4) + R3 * (5 * h6) + A4 * (5 * y7);
    p6 = D3 >>> 13, D3 &= 8191, D3 += T4 * (5 * g5) + N12 * (5 * d6) + S5 * (5 * f10) + U3 * (5 * l8) + $4 * (5 * a3), p6 += D3 >>> 13, D3 &= 8191;
    let P7 = p6 + v7 * a3 + I4 * u4 + w6 * c8 + R3 * (5 * m4) + A4 * (5 * h6);
    p6 = P7 >>> 13, P7 &= 8191, P7 += T4 * (5 * y7) + N12 * (5 * g5) + S5 * (5 * d6) + U3 * (5 * f10) + $4 * (5 * l8), p6 += P7 >>> 13, P7 &= 8191;
    let G4 = p6 + v7 * l8 + I4 * a3 + w6 * u4 + R3 * c8 + A4 * (5 * m4);
    p6 = G4 >>> 13, G4 &= 8191, G4 += T4 * (5 * h6) + N12 * (5 * y7) + S5 * (5 * g5) + U3 * (5 * d6) + $4 * (5 * f10), p6 += G4 >>> 13, G4 &= 8191;
    let X = p6 + v7 * f10 + I4 * l8 + w6 * a3 + R3 * u4 + A4 * c8;
    p6 = X >>> 13, X &= 8191, X += T4 * (5 * m4) + N12 * (5 * h6) + S5 * (5 * y7) + U3 * (5 * g5) + $4 * (5 * d6), p6 += X >>> 13, X &= 8191;
    let Z2 = p6 + v7 * d6 + I4 * f10 + w6 * l8 + R3 * a3 + A4 * u4;
    p6 = Z2 >>> 13, Z2 &= 8191, Z2 += T4 * c8 + N12 * (5 * m4) + S5 * (5 * h6) + U3 * (5 * y7) + $4 * (5 * g5), p6 += Z2 >>> 13, Z2 &= 8191;
    let he4 = p6 + v7 * g5 + I4 * d6 + w6 * f10 + R3 * l8 + A4 * a3;
    p6 = he4 >>> 13, he4 &= 8191, he4 += T4 * u4 + N12 * c8 + S5 * (5 * m4) + U3 * (5 * h6) + $4 * (5 * y7), p6 += he4 >>> 13, he4 &= 8191;
    let pe4 = p6 + v7 * y7 + I4 * g5 + w6 * d6 + R3 * f10 + A4 * l8;
    p6 = pe4 >>> 13, pe4 &= 8191, pe4 += T4 * a3 + N12 * u4 + S5 * c8 + U3 * (5 * m4) + $4 * (5 * h6), p6 += pe4 >>> 13, pe4 &= 8191;
    let ge4 = p6 + v7 * h6 + I4 * y7 + w6 * g5 + R3 * d6 + A4 * f10;
    p6 = ge4 >>> 13, ge4 &= 8191, ge4 += T4 * l8 + N12 * a3 + S5 * u4 + U3 * c8 + $4 * (5 * m4), p6 += ge4 >>> 13, ge4 &= 8191;
    let ye4 = p6 + v7 * m4 + I4 * h6 + w6 * y7 + R3 * g5 + A4 * d6;
    p6 = ye4 >>> 13, ye4 &= 8191, ye4 += T4 * f10 + N12 * l8 + S5 * a3 + U3 * u4 + $4 * c8, p6 += ye4 >>> 13, ye4 &= 8191, p6 = (p6 << 2) + p6 | 0, p6 = p6 + C6 | 0, C6 = p6 & 8191, p6 = p6 >>> 13, D3 += p6, s4[0] = C6, s4[1] = D3, s4[2] = P7, s4[3] = G4, s4[4] = X, s4[5] = Z2, s4[6] = he4, s4[7] = pe4, s4[8] = ge4, s4[9] = ye4;
  }
  finalize() {
    const { h: t2, pad: n5 } = this, r3 = new Uint16Array(10);
    let o6 = t2[1] >>> 13;
    t2[1] &= 8191;
    for (let c8 = 2; c8 < 10; c8++) t2[c8] += o6, o6 = t2[c8] >>> 13, t2[c8] &= 8191;
    t2[0] += o6 * 5, o6 = t2[0] >>> 13, t2[0] &= 8191, t2[1] += o6, o6 = t2[1] >>> 13, t2[1] &= 8191, t2[2] += o6, r3[0] = t2[0] + 5, o6 = r3[0] >>> 13, r3[0] &= 8191;
    for (let c8 = 1; c8 < 10; c8++) r3[c8] = t2[c8] + o6, o6 = r3[c8] >>> 13, r3[c8] &= 8191;
    r3[9] -= 8192;
    let s4 = (o6 ^ 1) - 1;
    for (let c8 = 0; c8 < 10; c8++) r3[c8] &= s4;
    s4 = ~s4;
    for (let c8 = 0; c8 < 10; c8++) t2[c8] = t2[c8] & s4 | r3[c8];
    t2[0] = (t2[0] | t2[1] << 13) & 65535, t2[1] = (t2[1] >>> 3 | t2[2] << 10) & 65535, t2[2] = (t2[2] >>> 6 | t2[3] << 7) & 65535, t2[3] = (t2[3] >>> 9 | t2[4] << 4) & 65535, t2[4] = (t2[4] >>> 12 | t2[5] << 1 | t2[6] << 14) & 65535, t2[5] = (t2[6] >>> 2 | t2[7] << 11) & 65535, t2[6] = (t2[7] >>> 5 | t2[8] << 8) & 65535, t2[7] = (t2[8] >>> 8 | t2[9] << 5) & 65535;
    let i5 = t2[0] + n5[0];
    t2[0] = i5 & 65535;
    for (let c8 = 1; c8 < 8; c8++) i5 = (t2[c8] + n5[c8] | 0) + (i5 >>> 16) | 0, t2[c8] = i5 & 65535;
    Ee2(r3);
  }
  update(t2) {
    Ln2(this);
    const { buffer: n5, blockLen: r3 } = this;
    t2 = pt(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(r3 - this.pos, o6 - s4);
      if (i5 === r3) {
        for (; r3 <= o6 - s4; s4 += r3) this.process(t2, s4);
        continue;
      }
      n5.set(t2.subarray(s4, s4 + i5), this.pos), this.pos += i5, s4 += i5, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Ee2(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(t2) {
    Ln2(this), cs(t2, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o6 } = this;
    if (o6) {
      for (n5[o6++] = 1; o6 < 16; o6++) n5[o6] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i5 = 0; i5 < 8; i5++) t2[s4++] = r3[i5] >>> 0, t2[s4++] = r3[i5] >>> 8;
    return t2;
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
};
function Is(e3) {
  const t2 = (r3, o6) => e3(o6).update(pt(r3)).digest(), n5 = e3(new Uint8Array(32));
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = (r3) => e3(r3), t2;
}
var Os = Is((e3) => new xs(e3));
function As(e3, t2, n5, r3, o6, s4 = 20) {
  let i5 = e3[0], c8 = e3[1], u4 = e3[2], a3 = e3[3], l8 = t2[0], f10 = t2[1], d6 = t2[2], g5 = t2[3], y7 = t2[4], h6 = t2[5], m4 = t2[6], L5 = t2[7], b6 = o6, _4 = n5[0], O7 = n5[1], k7 = n5[2], E7 = i5, B4 = c8, j4 = u4, v7 = a3, I4 = l8, w6 = f10, R3 = d6, A4 = g5, T4 = y7, N12 = h6, S5 = m4, U3 = L5, $4 = b6, p6 = _4, C6 = O7, D3 = k7;
  for (let G4 = 0; G4 < s4; G4 += 2) E7 = E7 + I4 | 0, $4 = x4($4 ^ E7, 16), T4 = T4 + $4 | 0, I4 = x4(I4 ^ T4, 12), E7 = E7 + I4 | 0, $4 = x4($4 ^ E7, 8), T4 = T4 + $4 | 0, I4 = x4(I4 ^ T4, 7), B4 = B4 + w6 | 0, p6 = x4(p6 ^ B4, 16), N12 = N12 + p6 | 0, w6 = x4(w6 ^ N12, 12), B4 = B4 + w6 | 0, p6 = x4(p6 ^ B4, 8), N12 = N12 + p6 | 0, w6 = x4(w6 ^ N12, 7), j4 = j4 + R3 | 0, C6 = x4(C6 ^ j4, 16), S5 = S5 + C6 | 0, R3 = x4(R3 ^ S5, 12), j4 = j4 + R3 | 0, C6 = x4(C6 ^ j4, 8), S5 = S5 + C6 | 0, R3 = x4(R3 ^ S5, 7), v7 = v7 + A4 | 0, D3 = x4(D3 ^ v7, 16), U3 = U3 + D3 | 0, A4 = x4(A4 ^ U3, 12), v7 = v7 + A4 | 0, D3 = x4(D3 ^ v7, 8), U3 = U3 + D3 | 0, A4 = x4(A4 ^ U3, 7), E7 = E7 + w6 | 0, D3 = x4(D3 ^ E7, 16), S5 = S5 + D3 | 0, w6 = x4(w6 ^ S5, 12), E7 = E7 + w6 | 0, D3 = x4(D3 ^ E7, 8), S5 = S5 + D3 | 0, w6 = x4(w6 ^ S5, 7), B4 = B4 + R3 | 0, $4 = x4($4 ^ B4, 16), U3 = U3 + $4 | 0, R3 = x4(R3 ^ U3, 12), B4 = B4 + R3 | 0, $4 = x4($4 ^ B4, 8), U3 = U3 + $4 | 0, R3 = x4(R3 ^ U3, 7), j4 = j4 + A4 | 0, p6 = x4(p6 ^ j4, 16), T4 = T4 + p6 | 0, A4 = x4(A4 ^ T4, 12), j4 = j4 + A4 | 0, p6 = x4(p6 ^ j4, 8), T4 = T4 + p6 | 0, A4 = x4(A4 ^ T4, 7), v7 = v7 + I4 | 0, C6 = x4(C6 ^ v7, 16), N12 = N12 + C6 | 0, I4 = x4(I4 ^ N12, 12), v7 = v7 + I4 | 0, C6 = x4(C6 ^ v7, 8), N12 = N12 + C6 | 0, I4 = x4(I4 ^ N12, 7);
  let P7 = 0;
  r3[P7++] = i5 + E7 | 0, r3[P7++] = c8 + B4 | 0, r3[P7++] = u4 + j4 | 0, r3[P7++] = a3 + v7 | 0, r3[P7++] = l8 + I4 | 0, r3[P7++] = f10 + w6 | 0, r3[P7++] = d6 + R3 | 0, r3[P7++] = g5 + A4 | 0, r3[P7++] = y7 + T4 | 0, r3[P7++] = h6 + N12 | 0, r3[P7++] = m4 + S5 | 0, r3[P7++] = L5 + U3 | 0, r3[P7++] = b6 + $4 | 0, r3[P7++] = _4 + p6 | 0, r3[P7++] = O7 + C6 | 0, r3[P7++] = k7 + D3 | 0;
}
var Ns = vs(As, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ss = new Uint8Array(16);
var Hn2 = (e3, t2) => {
  e3.update(t2);
  const n5 = t2.length % 16;
  n5 && e3.update(Ss.subarray(n5));
};
var Us = new Uint8Array(32);
function Kn2(e3, t2, n5, r3, o6) {
  const s4 = e3(t2, n5, Us), i5 = Os.create(s4);
  o6 && Hn2(i5, o6), Hn2(i5, r3);
  const c8 = new Uint8Array(16), u4 = as(c8);
  kn2(u4, 0, BigInt(o6 ? o6.length : 0), true), kn2(u4, 8, BigInt(r3.length), true), i5.update(c8);
  const a3 = i5.digest();
  return Ee2(s4, c8), a3;
}
var _s = (e3) => (t2, n5, r3) => ({ encrypt(s4, i5) {
  const c8 = s4.length;
  i5 = Cn2(c8 + 16, i5, false), i5.set(s4);
  const u4 = i5.subarray(0, -16);
  e3(t2, n5, u4, u4, 1);
  const a3 = Kn2(e3, t2, n5, u4, r3);
  return i5.set(a3, c8), Ee2(a3), i5;
}, decrypt(s4, i5) {
  i5 = Cn2(s4.length - 16, i5, false);
  const c8 = s4.subarray(0, -16), u4 = s4.subarray(-16), a3 = Kn2(e3, t2, n5, c8, r3);
  if (!ds(u4, a3)) throw new Error("invalid tag");
  return i5.set(s4.subarray(0, -16)), e3(t2, n5, i5, i5, 1), Ee2(a3), i5;
} });
var Fn2 = hs({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _s(Ns));
var qn2 = class extends it2 {
  constructor(t2, n5) {
    super(), this.finished = false, this.destroyed = false, ot(t2);
    const r3 = we2(n5);
    if (this.iHash = t2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o6 = this.blockLen, s4 = new Uint8Array(o6);
    s4.set(r3.length > o6 ? t2.create().update(r3).digest() : r3);
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 54;
    this.iHash.update(s4), this.oHash = t2.create();
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 106;
    this.oHash.update(s4), s4.fill(0);
  }
  update(t2) {
    return me2(this), this.iHash.update(t2), this;
  }
  digestInto(t2) {
    me2(this), je2(t2, this.outputLen), this.finished = true, this.iHash.digestInto(t2), this.oHash.update(t2), this.oHash.digestInto(t2), this.destroy();
  }
  digest() {
    const t2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t2), t2;
  }
  _cloneInto(t2) {
    t2 || (t2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o6, destroyed: s4, blockLen: i5, outputLen: c8 } = this;
    return t2 = t2, t2.finished = o6, t2.destroyed = s4, t2.blockLen = i5, t2.outputLen = c8, t2.oHash = n5._cloneInto(t2.oHash), t2.iHash = r3._cloneInto(t2.iHash), t2;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var mt = (e3, t2, n5) => new qn2(e3, t2).update(n5).digest();
mt.create = (e3, t2) => new qn2(e3, t2);
function Ts(e3, t2, n5) {
  return ot(e3), n5 === void 0 && (n5 = new Uint8Array(e3.outputLen)), mt(e3, we2(n5), we2(t2));
}
var bt2 = new Uint8Array([0]);
var Gn2 = new Uint8Array();
function $s(e3, t2, n5, r3 = 32) {
  if (ot(e3), Ne2(r3), r3 > 255 * e3.outputLen) throw new Error("Length should be <= 255*HashLen");
  const o6 = Math.ceil(r3 / e3.outputLen);
  n5 === void 0 && (n5 = Gn2);
  const s4 = new Uint8Array(o6 * e3.outputLen), i5 = mt.create(e3, t2), c8 = i5._cloneInto(), u4 = new Uint8Array(i5.outputLen);
  for (let a3 = 0; a3 < o6; a3++) bt2[0] = a3 + 1, c8.update(a3 === 0 ? Gn2 : u4).update(n5).update(bt2).digestInto(u4), s4.set(u4, e3.outputLen * a3), i5._cloneInto(c8);
  return i5.destroy(), c8.destroy(), u4.fill(0), bt2.fill(0), s4.slice(0, r3);
}
var Rs = (e3, t2, n5, r3, o6) => $s(e3, Ts(e3, t2, n5), r3, o6);
function Ps(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function Bs(e3, t2, n5) {
  return e3 & t2 ^ ~e3 & n5;
}
function Ls(e3, t2, n5) {
  return e3 & t2 ^ e3 & n5 ^ t2 & n5;
}
var js = class extends it2 {
  constructor(t2, n5, r3, o6) {
    super(), this.blockLen = t2, this.outputLen = n5, this.padOffset = r3, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(t2), this.view = st(this.buffer);
  }
  update(t2) {
    me2(this);
    const { view: n5, buffer: r3, blockLen: o6 } = this;
    t2 = we2(t2);
    const s4 = t2.length;
    for (let i5 = 0; i5 < s4; ) {
      const c8 = Math.min(o6 - this.pos, s4 - i5);
      if (c8 === o6) {
        const u4 = st(t2);
        for (; o6 <= s4 - i5; i5 += o6) this.process(u4, i5);
        continue;
      }
      r3.set(t2.subarray(i5, i5 + c8), this.pos), this.pos += c8, i5 += c8, this.pos === o6 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += t2.length, this.roundClean(), this;
  }
  digestInto(t2) {
    me2(this), sn2(t2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o6, isLE: s4 } = this;
    let { pos: i5 } = this;
    n5[i5++] = 128, this.buffer.subarray(i5).fill(0), this.padOffset > o6 - i5 && (this.process(r3, 0), i5 = 0);
    for (let f10 = i5; f10 < o6; f10++) n5[f10] = 0;
    Ps(r3, o6 - 8, BigInt(this.length * 8), s4), this.process(r3, 0);
    const c8 = st(t2), u4 = this.outputLen;
    if (u4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const a3 = u4 / 4, l8 = this.get();
    if (a3 > l8.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f10 = 0; f10 < a3; f10++) c8.setUint32(4 * f10, l8[f10], s4);
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(t2) {
    t2 || (t2 = new this.constructor()), t2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o6, finished: s4, destroyed: i5, pos: c8 } = this;
    return t2.length = o6, t2.pos = c8, t2.finished = s4, t2.destroyed = i5, o6 % n5 && t2.buffer.set(r3), t2;
  }
};
var Cs = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var ie = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var ce = new Uint32Array(64);
var ks = class extends js {
  constructor() {
    super(64, 32, 8, false), this.A = ie[0] | 0, this.B = ie[1] | 0, this.C = ie[2] | 0, this.D = ie[3] | 0, this.E = ie[4] | 0, this.F = ie[5] | 0, this.G = ie[6] | 0, this.H = ie[7] | 0;
  }
  get() {
    const { A: t2, B: n5, C: r3, D: o6, E: s4, F: i5, G: c8, H: u4 } = this;
    return [t2, n5, r3, o6, s4, i5, c8, u4];
  }
  set(t2, n5, r3, o6, s4, i5, c8, u4) {
    this.A = t2 | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o6 | 0, this.E = s4 | 0, this.F = i5 | 0, this.G = c8 | 0, this.H = u4 | 0;
  }
  process(t2, n5) {
    for (let f10 = 0; f10 < 16; f10++, n5 += 4) ce[f10] = t2.getUint32(n5, false);
    for (let f10 = 16; f10 < 64; f10++) {
      const d6 = ce[f10 - 15], g5 = ce[f10 - 2], y7 = J3(d6, 7) ^ J3(d6, 18) ^ d6 >>> 3, h6 = J3(g5, 17) ^ J3(g5, 19) ^ g5 >>> 10;
      ce[f10] = h6 + ce[f10 - 7] + y7 + ce[f10 - 16] | 0;
    }
    let { A: r3, B: o6, C: s4, D: i5, E: c8, F: u4, G: a3, H: l8 } = this;
    for (let f10 = 0; f10 < 64; f10++) {
      const d6 = J3(c8, 6) ^ J3(c8, 11) ^ J3(c8, 25), g5 = l8 + d6 + Bs(c8, u4, a3) + Cs[f10] + ce[f10] | 0, h6 = (J3(r3, 2) ^ J3(r3, 13) ^ J3(r3, 22)) + Ls(r3, o6, s4) | 0;
      l8 = a3, a3 = u4, u4 = c8, c8 = i5 + g5 | 0, i5 = s4, s4 = o6, o6 = r3, r3 = g5 + h6 | 0;
    }
    r3 = r3 + this.A | 0, o6 = o6 + this.B | 0, s4 = s4 + this.C | 0, i5 = i5 + this.D | 0, c8 = c8 + this.E | 0, u4 = u4 + this.F | 0, a3 = a3 + this.G | 0, l8 = l8 + this.H | 0, this.set(r3, o6, s4, i5, c8, u4, a3, l8);
  }
  roundClean() {
    ce.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var He2 = fn(() => new ks());
var Wn2 = BigInt(0);
function wt2(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function zn2(e3) {
  if (!wt2(e3)) throw new Error("Uint8Array expected");
}
var Ds = Array.from({ length: 256 }, (e3, t2) => t2.toString(16).padStart(2, "0"));
function Ms(e3) {
  zn2(e3);
  let t2 = "";
  for (let n5 = 0; n5 < e3.length; n5++) t2 += Ds[e3[n5]];
  return t2;
}
function Vs(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  return e3 === "" ? Wn2 : BigInt("0x" + e3);
}
var ee = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Jn2(e3) {
  if (e3 >= ee._0 && e3 <= ee._9) return e3 - ee._0;
  if (e3 >= ee.A && e3 <= ee.F) return e3 - (ee.A - 10);
  if (e3 >= ee.a && e3 <= ee.f) return e3 - (ee.a - 10);
}
function Yn2(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  const t2 = e3.length, n5 = t2 / 2;
  if (t2 % 2) throw new Error("hex string expected, got unpadded hex of length " + t2);
  const r3 = new Uint8Array(n5);
  for (let o6 = 0, s4 = 0; o6 < n5; o6++, s4 += 2) {
    const i5 = Jn2(e3.charCodeAt(s4)), c8 = Jn2(e3.charCodeAt(s4 + 1));
    if (i5 === void 0 || c8 === void 0) {
      const u4 = e3[s4] + e3[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + u4 + '" at index ' + s4);
    }
    r3[o6] = i5 * 16 + c8;
  }
  return r3;
}
function Xn2(e3) {
  return zn2(e3), Vs(Ms(Uint8Array.from(e3).reverse()));
}
function Hs(e3, t2) {
  return Yn2(e3.toString(16).padStart(t2 * 2, "0"));
}
function Ks(e3, t2) {
  return Hs(e3, t2).reverse();
}
function Zn2(e3, t2, n5) {
  let r3;
  if (typeof t2 == "string") try {
    r3 = Yn2(t2);
  } catch (s4) {
    throw new Error(e3 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (wt2(t2)) r3 = Uint8Array.from(t2);
  else throw new Error(e3 + " must be hex string or Uint8Array");
  const o6 = r3.length;
  if (typeof n5 == "number" && o6 !== n5) throw new Error(e3 + " of length " + n5 + " expected, got " + o6);
  return r3;
}
var Et2 = (e3) => typeof e3 == "bigint" && Wn2 <= e3;
function Fs(e3, t2, n5) {
  return Et2(e3) && Et2(t2) && Et2(n5) && t2 <= e3 && e3 < n5;
}
function Qn2(e3, t2, n5, r3) {
  if (!Fs(t2, n5, r3)) throw new Error("expected valid " + e3 + ": " + n5 + " <= n < " + r3 + ", got " + t2);
}
var qs = { bigint: (e3) => typeof e3 == "bigint", function: (e3) => typeof e3 == "function", boolean: (e3) => typeof e3 == "boolean", string: (e3) => typeof e3 == "string", stringOrUint8Array: (e3) => typeof e3 == "string" || wt2(e3), isSafeInteger: (e3) => Number.isSafeInteger(e3), array: (e3) => Array.isArray(e3), field: (e3, t2) => t2.Fp.isValid(e3), hash: (e3) => typeof e3 == "function" && Number.isSafeInteger(e3.outputLen) };
function Gs(e3, t2, n5 = {}) {
  const r3 = (o6, s4, i5) => {
    const c8 = qs[s4];
    if (typeof c8 != "function") throw new Error("invalid validator function");
    const u4 = e3[o6];
    if (!(i5 && u4 === void 0) && !c8(u4, e3)) throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + u4);
  };
  for (const [o6, s4] of Object.entries(t2)) r3(o6, s4, false);
  for (const [o6, s4] of Object.entries(n5)) r3(o6, s4, true);
  return e3;
}
var ve2 = BigInt(0);
var Ke2 = BigInt(1);
function er2(e3, t2) {
  const n5 = e3 % t2;
  return n5 >= ve2 ? n5 : t2 + n5;
}
function Ws(e3, t2, n5) {
  if (t2 < ve2) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= ve2) throw new Error("invalid modulus");
  if (n5 === Ke2) return ve2;
  let r3 = Ke2;
  for (; t2 > ve2; ) t2 & Ke2 && (r3 = r3 * e3 % n5), e3 = e3 * e3 % n5, t2 >>= Ke2;
  return r3;
}
function z3(e3, t2, n5) {
  let r3 = e3;
  for (; t2-- > ve2; ) r3 *= r3, r3 %= n5;
  return r3;
}
BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var xe2 = BigInt(0);
var vt2 = BigInt(1);
function zs(e3) {
  return Gs(e3, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...e3 });
}
function Js(e3) {
  const t2 = zs(e3), { P: n5 } = t2, r3 = (b6) => er2(b6, n5), o6 = t2.montgomeryBits, s4 = Math.ceil(o6 / 8), i5 = t2.nByteLength, c8 = t2.adjustScalarBytes || ((b6) => b6), u4 = t2.powPminus2 || ((b6) => Ws(b6, n5 - BigInt(2), n5));
  function a3(b6, _4, O7) {
    const k7 = r3(b6 * (_4 - O7));
    return _4 = r3(_4 - k7), O7 = r3(O7 + k7), [_4, O7];
  }
  const l8 = (t2.a - BigInt(2)) / BigInt(4);
  function f10(b6, _4) {
    Qn2("u", b6, xe2, n5), Qn2("scalar", _4, xe2, n5);
    const O7 = _4, k7 = b6;
    let E7 = vt2, B4 = xe2, j4 = b6, v7 = vt2, I4 = xe2, w6;
    for (let A4 = BigInt(o6 - 1); A4 >= xe2; A4--) {
      const T4 = O7 >> A4 & vt2;
      I4 ^= T4, w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1], I4 = T4;
      const N12 = E7 + B4, S5 = r3(N12 * N12), U3 = E7 - B4, $4 = r3(U3 * U3), p6 = S5 - $4, C6 = j4 + v7, D3 = j4 - v7, P7 = r3(D3 * N12), G4 = r3(C6 * U3), X = P7 + G4, Z2 = P7 - G4;
      j4 = r3(X * X), v7 = r3(k7 * r3(Z2 * Z2)), E7 = r3(S5 * $4), B4 = r3(p6 * (S5 + r3(l8 * p6)));
    }
    w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1];
    const R3 = u4(B4);
    return r3(E7 * R3);
  }
  function d6(b6) {
    return Ks(r3(b6), s4);
  }
  function g5(b6) {
    const _4 = Zn2("u coordinate", b6, s4);
    return i5 === 32 && (_4[31] &= 127), Xn2(_4);
  }
  function y7(b6) {
    const _4 = Zn2("scalar", b6), O7 = _4.length;
    if (O7 !== s4 && O7 !== i5) {
      let k7 = "" + s4 + " or " + i5;
      throw new Error("invalid scalar, expected " + k7 + " bytes, got " + O7);
    }
    return Xn2(c8(_4));
  }
  function h6(b6, _4) {
    const O7 = g5(_4), k7 = y7(b6), E7 = f10(O7, k7);
    if (E7 === xe2) throw new Error("invalid private or public key received");
    return d6(E7);
  }
  const m4 = d6(t2.Gu);
  function L5(b6) {
    return h6(b6, m4);
  }
  return { scalarMult: h6, scalarMultBase: L5, getSharedSecret: (b6, _4) => h6(b6, _4), getPublicKey: (b6) => L5(b6), utils: { randomPrivateKey: () => t2.randomBytes(t2.nByteLength) }, GuBytes: m4 };
}
var xt2 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var Ys = BigInt(1);
var tr2 = BigInt(2);
var Xs = BigInt(3);
var Zs = BigInt(5);
BigInt(8);
function Qs(e3) {
  const t2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o6 = BigInt(80), s4 = xt2, c8 = e3 * e3 % s4 * e3 % s4, u4 = z3(c8, tr2, s4) * c8 % s4, a3 = z3(u4, Ys, s4) * e3 % s4, l8 = z3(a3, Zs, s4) * a3 % s4, f10 = z3(l8, t2, s4) * l8 % s4, d6 = z3(f10, n5, s4) * f10 % s4, g5 = z3(d6, r3, s4) * d6 % s4, y7 = z3(g5, o6, s4) * g5 % s4, h6 = z3(y7, o6, s4) * g5 % s4, m4 = z3(h6, t2, s4) * l8 % s4;
  return { pow_p_5_8: z3(m4, tr2, s4) * e3 % s4, b2: c8 };
}
function ei(e3) {
  return e3[0] &= 248, e3[31] &= 127, e3[31] |= 64, e3;
}
var It2 = Js({ P: xt2, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (e3) => {
  const t2 = xt2, { pow_p_5_8: n5, b2: r3 } = Qs(e3);
  return er2(z3(n5, Xs, t2) * r3, t2);
}, adjustScalarBytes: ei, randomBytes: Se2 });
var Ot2 = "base10";
var V2 = "base16";
var At = "base64pad";
var Ie2 = "utf8";
var Nt2 = 0;
var Oe2 = 1;
var _e2 = 2;
var ni = 0;
var nr2 = 1;
var Te2 = 12;
var St2 = 32;
function ri() {
  const e3 = It2.utils.randomPrivateKey(), t2 = It2.getPublicKey(e3);
  return { privateKey: toString3(e3, V2), publicKey: toString3(t2, V2) };
}
function oi() {
  const e3 = Se2(St2);
  return toString3(e3, V2);
}
function si(e3, t2) {
  const n5 = It2.getSharedSecret(fromString6(e3, V2), fromString6(t2, V2)), r3 = Rs(He2, n5, void 0, void 0, St2);
  return toString3(r3, V2);
}
function ii(e3) {
  const t2 = He2(fromString6(e3, V2));
  return toString3(t2, V2);
}
function ci(e3) {
  const t2 = He2(fromString6(e3, Ie2));
  return toString3(t2, V2);
}
function Ut2(e3) {
  return fromString6(`${e3}`, Ot2);
}
function fe2(e3) {
  return Number(toString3(e3, Ot2));
}
function ai(e3) {
  const t2 = Ut2(typeof e3.type < "u" ? e3.type : Nt2);
  if (fe2(t2) === Oe2 && typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n5 = typeof e3.senderPublicKey < "u" ? fromString6(e3.senderPublicKey, V2) : void 0, r3 = typeof e3.iv < "u" ? fromString6(e3.iv, V2) : Se2(Te2), o6 = fromString6(e3.symKey, V2), s4 = Fn2(o6, r3).encrypt(fromString6(e3.message, Ie2));
  return _t2({ type: t2, sealed: s4, iv: r3, senderPublicKey: n5, encoding: e3.encoding });
}
function ui(e3) {
  const t2 = fromString6(e3.symKey, V2), { sealed: n5, iv: r3 } = Fe(e3), o6 = Fn2(t2, r3).decrypt(n5);
  if (o6 === null) throw new Error("Failed to decrypt");
  return toString3(o6, Ie2);
}
function fi(e3, t2) {
  const n5 = Ut2(_e2), r3 = Se2(Te2), o6 = fromString6(e3, Ie2);
  return _t2({ type: n5, sealed: o6, iv: r3, encoding: t2 });
}
function li(e3, t2) {
  const { sealed: n5 } = Fe({ encoded: e3, encoding: t2 });
  return toString3(n5, Ie2);
}
function _t2(e3) {
  const { encoding: t2 = At } = e3;
  if (fe2(e3.type) === _e2) return toString3(concat4([e3.type, e3.sealed]), t2);
  if (fe2(e3.type) === Oe2) {
    if (typeof e3.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString3(concat4([e3.type, e3.senderPublicKey, e3.iv, e3.sealed]), t2);
  }
  return toString3(concat4([e3.type, e3.iv, e3.sealed]), t2);
}
function Fe(e3) {
  const { encoded: t2, encoding: n5 = At } = e3, r3 = fromString6(t2, n5), o6 = r3.slice(ni, nr2), s4 = nr2;
  if (fe2(o6) === Oe2) {
    const a3 = s4 + St2, l8 = a3 + Te2, f10 = r3.slice(s4, a3), d6 = r3.slice(a3, l8), g5 = r3.slice(l8);
    return { type: o6, sealed: g5, iv: d6, senderPublicKey: f10 };
  }
  if (fe2(o6) === _e2) {
    const a3 = r3.slice(s4), l8 = Se2(Te2);
    return { type: o6, sealed: a3, iv: l8 };
  }
  const i5 = s4 + Te2, c8 = r3.slice(s4, i5), u4 = r3.slice(i5);
  return { type: o6, sealed: u4, iv: c8 };
}
function di(e3, t2) {
  const n5 = Fe({ encoded: e3, encoding: t2 == null ? void 0 : t2.encoding });
  return rr2({ type: fe2(n5.type), senderPublicKey: typeof n5.senderPublicKey < "u" ? toString3(n5.senderPublicKey, V2) : void 0, receiverPublicKey: t2 == null ? void 0 : t2.receiverPublicKey });
}
function rr2(e3) {
  const t2 = (e3 == null ? void 0 : e3.type) || Nt2;
  if (t2 === Oe2) {
    if (typeof (e3 == null ? void 0 : e3.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (e3 == null ? void 0 : e3.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: t2, senderPublicKey: e3 == null ? void 0 : e3.senderPublicKey, receiverPublicKey: e3 == null ? void 0 : e3.receiverPublicKey };
}
function hi(e3) {
  return e3.type === Oe2 && typeof e3.senderPublicKey == "string" && typeof e3.receiverPublicKey == "string";
}
function pi(e3) {
  return e3.type === _e2;
}
function or3(e3) {
  return new import_elliptic.ec("p256").keyFromPublic({ x: Buffer.from(e3.x, "base64").toString("hex"), y: Buffer.from(e3.y, "base64").toString("hex") }, "hex");
}
function gi(e3) {
  let t2 = e3.replace(/-/g, "+").replace(/_/g, "/");
  const n5 = t2.length % 4;
  return n5 > 0 && (t2 += "=".repeat(4 - n5)), t2;
}
function yi(e3) {
  return Buffer.from(gi(e3), "base64");
}
function mi(e3, t2) {
  const [n5, r3, o6] = e3.split("."), s4 = yi(o6);
  if (s4.length !== 64) throw new Error("Invalid signature length");
  const i5 = s4.slice(0, 32).toString("hex"), c8 = s4.slice(32, 64).toString("hex"), u4 = `${n5}.${r3}`, a3 = He2(u4), l8 = or3(t2), f10 = toString3(a3, V2);
  if (!l8.verify(f10, { r: i5, s: c8 })) throw new Error("Invalid signature");
  return sn(e3).payload;
}
var sr2 = "irn";
function bi(e3) {
  return (e3 == null ? void 0 : e3.relay) || { protocol: sr2 };
}
function wi(e3) {
  const t2 = C2[e3];
  if (typeof t2 > "u") throw new Error(`Relay Protocol not supported: ${e3}`);
  return t2;
}
function ir2(e3, t2 = "-") {
  const n5 = {}, r3 = "relay" + t2;
  return Object.keys(e3).forEach((o6) => {
    if (o6.startsWith(r3)) {
      const s4 = o6.replace(r3, ""), i5 = e3[o6];
      n5[s4] = i5;
    }
  }), n5;
}
function Ei(e3) {
  if (!e3.includes("wc:")) {
    const a3 = rt2(e3);
    a3 != null && a3.includes("wc:") && (e3 = a3);
  }
  e3 = e3.includes("wc://") ? e3.replace("wc://", "") : e3, e3 = e3.includes("wc:") ? e3.replace("wc:", "") : e3;
  const t2 = e3.indexOf(":"), n5 = e3.indexOf("?") !== -1 ? e3.indexOf("?") : void 0, r3 = e3.substring(0, t2), o6 = e3.substring(t2 + 1, n5).split("@"), s4 = typeof n5 < "u" ? e3.substring(n5) : "", i5 = new URLSearchParams(s4), c8 = {};
  i5.forEach((a3, l8) => {
    c8[l8] = a3;
  });
  const u4 = typeof c8.methods == "string" ? c8.methods.split(",") : void 0;
  return { protocol: r3, topic: cr2(o6[0]), version: parseInt(o6[1], 10), symKey: c8.symKey, relay: ir2(c8), methods: u4, expiryTimestamp: c8.expiryTimestamp ? parseInt(c8.expiryTimestamp, 10) : void 0 };
}
function cr2(e3) {
  return e3.startsWith("//") ? e3.substring(2) : e3;
}
function ar2(e3, t2 = "-") {
  const n5 = "relay", r3 = {};
  return Object.keys(e3).forEach((o6) => {
    const s4 = o6, i5 = n5 + t2 + s4;
    e3[s4] && (r3[i5] = e3[s4]);
  }), r3;
}
function vi(e3) {
  const t2 = new URLSearchParams(), n5 = ar2(e3.relay);
  Object.keys(n5).sort().forEach((o6) => {
    t2.set(o6, n5[o6]);
  }), t2.set("symKey", e3.symKey), e3.expiryTimestamp && t2.set("expiryTimestamp", e3.expiryTimestamp.toString()), e3.methods && t2.set("methods", e3.methods.join(","));
  const r3 = t2.toString();
  return `${e3.protocol}:${e3.topic}@${e3.version}?${r3}`;
}
var yr2 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var mr2 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function te2(e3, t2) {
  const { message: n5, code: r3 } = mr2[e3];
  return { message: t2 ? `${n5} ${t2}` : n5, code: r3 };
}
function de2(e3, t2) {
  const { message: n5, code: r3 } = yr2[e3];
  return { message: t2 ? `${n5} ${t2}` : n5, code: r3 };
}
function ae(e3) {
  return typeof e3 > "u";
}
function q(e3, t2) {
  return t2 && ae(e3) ? true : typeof e3 == "string" && !!e3.trim().length;
}
function Bi(e3) {
  function t2(n5) {
    try {
      return typeof new URL(n5) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (q(e3, false)) {
      if (t2(e3)) return true;
      const n5 = rt2(e3);
      return t2(n5);
    }
  } catch {
  }
  return false;
}
function Li(e3) {
  var t2;
  return (t2 = e3 == null ? void 0 : e3.proposer) == null ? void 0 : t2.publicKey;
}
function ji(e3) {
  return e3 == null ? void 0 : e3.topic;
}
function Vi(e3) {
  return typeof e3 < "u" && typeof e3 !== null;
}
function Zi() {
  const e3 = ue();
  return new Promise((t2) => {
    switch (e3) {
      case H2.browser:
        t2(Ur2());
        break;
      case H2.reactNative:
        t2(_r2());
        break;
      case H2.node:
        t2(Tr2());
        break;
      default:
        t2(true);
    }
  });
}
function Ur2() {
  return Ae2() && (navigator == null ? void 0 : navigator.onLine);
}
async function _r2() {
  if (ne() && typeof global < "u" && global != null && global.NetInfo) {
    const e3 = await (global == null ? void 0 : global.NetInfo.fetch());
    return e3 == null ? void 0 : e3.isConnected;
  }
  return true;
}
function Tr2() {
  return true;
}
function Qi(e3) {
  switch (ue()) {
    case H2.browser:
      $r2(e3);
      break;
    case H2.reactNative:
      Rr2(e3);
      break;
    case H2.node:
      break;
  }
}
function $r2(e3) {
  !ne() && Ae2() && (window.addEventListener("online", () => e3(true)), window.addEventListener("offline", () => e3(false)));
}
function Rr2(e3) {
  ne() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((t2) => e3(t2 == null ? void 0 : t2.isConnected)));
}

// ../node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var import_events5 = __toESM(require_events());

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DEFAULT_ERROR: () => DEFAULT_ERROR,
  IBaseJsonRpcProvider: () => n4,
  IEvents: () => e2,
  IJsonRpcConnection: () => o2,
  IJsonRpcProvider: () => r2,
  INTERNAL_ERROR: () => INTERNAL_ERROR,
  INVALID_PARAMS: () => INVALID_PARAMS,
  INVALID_REQUEST: () => INVALID_REQUEST,
  METHOD_NOT_FOUND: () => METHOD_NOT_FOUND,
  PARSE_ERROR: () => PARSE_ERROR,
  RESERVED_ERROR_CODES: () => RESERVED_ERROR_CODES,
  SERVER_ERROR: () => SERVER_ERROR,
  SERVER_ERROR_CODE_RANGE: () => SERVER_ERROR_CODE_RANGE,
  STANDARD_ERROR_MAP: () => STANDARD_ERROR_MAP,
  formatErrorMessage: () => formatErrorMessage,
  formatJsonRpcError: () => formatJsonRpcError,
  formatJsonRpcRequest: () => formatJsonRpcRequest,
  formatJsonRpcResult: () => formatJsonRpcResult,
  getBigIntRpcId: () => getBigIntRpcId,
  getError: () => getError,
  getErrorByCode: () => getErrorByCode,
  isHttpUrl: () => isHttpUrl,
  isJsonRpcError: () => isJsonRpcError,
  isJsonRpcPayload: () => isJsonRpcPayload,
  isJsonRpcRequest: () => isJsonRpcRequest,
  isJsonRpcResponse: () => isJsonRpcResponse,
  isJsonRpcResult: () => isJsonRpcResult,
  isJsonRpcValidationInvalid: () => isJsonRpcValidationInvalid,
  isLocalhostUrl: () => isLocalhostUrl,
  isNodeJs: () => isNodeJs,
  isReservedErrorCode: () => isReservedErrorCode,
  isServerErrorCode: () => isServerErrorCode,
  isValidDefaultRoute: () => isValidDefaultRoute,
  isValidErrorCode: () => isValidErrorCode,
  isValidLeadingWildcardRoute: () => isValidLeadingWildcardRoute,
  isValidRoute: () => isValidRoute,
  isValidTrailingWildcardRoute: () => isValidTrailingWildcardRoute,
  isValidWildcardRoute: () => isValidWildcardRoute,
  isWsUrl: () => isWsUrl,
  parseConnectionError: () => parseConnectionError,
  payloadId: () => payloadId,
  validateJsonRpcError: () => validateJsonRpcError
});

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js
var PARSE_ERROR = "PARSE_ERROR";
var INVALID_REQUEST = "INVALID_REQUEST";
var METHOD_NOT_FOUND = "METHOD_NOT_FOUND";
var INVALID_PARAMS = "INVALID_PARAMS";
var INTERNAL_ERROR = "INTERNAL_ERROR";
var SERVER_ERROR = "SERVER_ERROR";
var RESERVED_ERROR_CODES = [-32700, -32600, -32601, -32602, -32603];
var SERVER_ERROR_CODE_RANGE = [-32e3, -32099];
var STANDARD_ERROR_MAP = {
  [PARSE_ERROR]: { code: -32700, message: "Parse error" },
  [INVALID_REQUEST]: { code: -32600, message: "Invalid Request" },
  [METHOD_NOT_FOUND]: { code: -32601, message: "Method not found" },
  [INVALID_PARAMS]: { code: -32602, message: "Invalid params" },
  [INTERNAL_ERROR]: { code: -32603, message: "Internal error" },
  [SERVER_ERROR]: { code: -32e3, message: "Server error" }
};
var DEFAULT_ERROR = SERVER_ERROR;

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js
function isServerErrorCode(code2) {
  return code2 <= SERVER_ERROR_CODE_RANGE[0] && code2 >= SERVER_ERROR_CODE_RANGE[1];
}
function isReservedErrorCode(code2) {
  return RESERVED_ERROR_CODES.includes(code2);
}
function isValidErrorCode(code2) {
  return typeof code2 === "number";
}
function getError(type) {
  if (!Object.keys(STANDARD_ERROR_MAP).includes(type)) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return STANDARD_ERROR_MAP[type];
}
function getErrorByCode(code2) {
  const match = Object.values(STANDARD_ERROR_MAP).find((e3) => e3.code === code2);
  if (!match) {
    return STANDARD_ERROR_MAP[DEFAULT_ERROR];
  }
  return match;
}
function validateJsonRpcError(response) {
  if (typeof response.error.code === "undefined") {
    return { valid: false, error: "Missing code for JSON-RPC error" };
  }
  if (typeof response.error.message === "undefined") {
    return { valid: false, error: "Missing message for JSON-RPC error" };
  }
  if (!isValidErrorCode(response.error.code)) {
    return {
      valid: false,
      error: `Invalid error code type for JSON-RPC: ${response.error.code}`
    };
  }
  if (isReservedErrorCode(response.error.code)) {
    const error = getErrorByCode(response.error.code);
    if (error.message !== STANDARD_ERROR_MAP[DEFAULT_ERROR].message && response.error.message === error.message) {
      return {
        valid: false,
        error: `Invalid error code message for JSON-RPC: ${response.error.code}`
      };
    }
  }
  return { valid: true };
}
function parseConnectionError(e3, url, type) {
  return e3.message.includes("getaddrinfo ENOTFOUND") || e3.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e3;
}

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js
var env_exports = {};
__export(env_exports, {
  isNodeJs: () => isNodeJs
});
var import_environment = __toESM(require_cjs4());
__reExport(env_exports, __toESM(require_cjs4()));
var isNodeJs = import_environment.isNode;

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js
__reExport(esm_exports, env_exports);

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js
function payloadId(entropy = 3) {
  const date = Date.now() * Math.pow(10, entropy);
  const extra = Math.floor(Math.random() * Math.pow(10, entropy));
  return date + extra;
}
function getBigIntRpcId(entropy = 6) {
  return BigInt(payloadId(entropy));
}
function formatJsonRpcRequest(method, params, id) {
  return {
    id: id || payloadId(),
    jsonrpc: "2.0",
    method,
    params
  };
}
function formatJsonRpcResult(id, result) {
  return {
    id,
    jsonrpc: "2.0",
    result
  };
}
function formatJsonRpcError(id, error, data) {
  return {
    id,
    jsonrpc: "2.0",
    error: formatErrorMessage(error, data)
  };
}
function formatErrorMessage(error, data) {
  if (typeof error === "undefined") {
    return getError(INTERNAL_ERROR);
  }
  if (typeof error === "string") {
    error = Object.assign(Object.assign({}, getError(SERVER_ERROR)), { message: error });
  }
  if (typeof data !== "undefined") {
    error.data = data;
  }
  if (isReservedErrorCode(error.code)) {
    error = getErrorByCode(error.code);
  }
  return error;
}

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js
function isValidRoute(route) {
  if (route.includes("*")) {
    return isValidWildcardRoute(route);
  }
  if (/\W/g.test(route)) {
    return false;
  }
  return true;
}
function isValidDefaultRoute(route) {
  return route === "*";
}
function isValidWildcardRoute(route) {
  if (isValidDefaultRoute(route)) {
    return true;
  }
  if (!route.includes("*")) {
    return false;
  }
  if (route.split("*").length !== 2) {
    return false;
  }
  if (route.split("*").filter((x8) => x8.trim() === "").length !== 1) {
    return false;
  }
  return true;
}
function isValidLeadingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[0].trim();
}
function isValidTrailingWildcardRoute(route) {
  return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split("*")[1].trim();
}

// ../node_modules/@walletconnect/jsonrpc-types/dist/index.es.js
var e2 = class {
};
var o2 = class extends e2 {
  constructor(c8) {
    super();
  }
};
var n4 = class extends e2 {
  constructor() {
    super();
  }
};
var r2 = class extends n4 {
  constructor(c8) {
    super();
  }
};

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js
var HTTP_REGEX = "^https?:";
var WS_REGEX = "^wss?:";
function getUrlProtocol(url) {
  const matches = url.match(new RegExp(/^\w+:/, "gi"));
  if (!matches || !matches.length)
    return;
  return matches[0];
}
function matchRegexProtocol(url, regex) {
  const protocol = getUrlProtocol(url);
  if (typeof protocol === "undefined")
    return false;
  return new RegExp(regex).test(protocol);
}
function isHttpUrl(url) {
  return matchRegexProtocol(url, HTTP_REGEX);
}
function isWsUrl(url) {
  return matchRegexProtocol(url, WS_REGEX);
}
function isLocalhostUrl(url) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(url);
}

// ../node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js
function isJsonRpcPayload(payload) {
  return typeof payload === "object" && "id" in payload && "jsonrpc" in payload && payload.jsonrpc === "2.0";
}
function isJsonRpcRequest(payload) {
  return isJsonRpcPayload(payload) && "method" in payload;
}
function isJsonRpcResponse(payload) {
  return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));
}
function isJsonRpcResult(payload) {
  return "result" in payload;
}
function isJsonRpcError(payload) {
  return "error" in payload;
}
function isJsonRpcValidationInvalid(validation) {
  return "error" in validation && validation.valid === false;
}

// ../node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js
var o3 = class extends r2 {
  constructor(t2) {
    super(t2), this.events = new import_events5.EventEmitter(), this.hasRegisteredEventListeners = false, this.connection = this.setConnection(t2), this.connection.connected && this.registerEventListeners();
  }
  async connect(t2 = this.connection) {
    await this.open(t2);
  }
  async disconnect() {
    await this.close();
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async request(t2, e3) {
    return this.requestStrict(formatJsonRpcRequest(t2.method, t2.params || [], t2.id || getBigIntRpcId().toString()), e3);
  }
  async requestStrict(t2, e3) {
    return new Promise(async (i5, s4) => {
      if (!this.connection.connected) try {
        await this.open();
      } catch (n5) {
        s4(n5);
      }
      this.events.on(`${t2.id}`, (n5) => {
        isJsonRpcError(n5) ? s4(n5.error) : i5(n5.result);
      });
      try {
        await this.connection.send(t2, e3);
      } catch (n5) {
        s4(n5);
      }
    });
  }
  setConnection(t2 = this.connection) {
    return t2;
  }
  onPayload(t2) {
    this.events.emit("payload", t2), isJsonRpcResponse(t2) ? this.events.emit(`${t2.id}`, t2) : this.events.emit("message", { type: t2.method, data: t2.params });
  }
  onClose(t2) {
    t2 && t2.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${t2.code} ${t2.reason ? `(${t2.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(t2 = this.connection) {
    this.connection === t2 && this.connection.connected || (this.connection.connected && this.close(), typeof t2 == "string" && (await this.connection.open(t2), t2 = this.connection), this.connection = this.setConnection(t2), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (t2) => this.onPayload(t2)), this.connection.on("close", (t2) => this.onClose(t2)), this.connection.on("error", (t2) => this.events.emit("error", t2)), this.connection.on("register_error", (t2) => this.onClose()), this.hasRegisteredEventListeners = true);
  }
};

// ../node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js
var import_events6 = __toESM(require_events());
var v3 = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require_browser2();
var w2 = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u";
var d3 = (r3) => r3.split("?")[0];
var h5 = 10;
var b3 = v3();
var f5 = class {
  constructor(e3) {
    if (this.url = e3, this.events = new import_events6.EventEmitter(), this.registering = false, !isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    this.url = e3;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async open(e3 = this.url) {
    await this.register(e3);
  }
  async close() {
    return new Promise((e3, t2) => {
      if (typeof this.socket > "u") {
        t2(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (n5) => {
        this.onClose(n5), e3();
      }, this.socket.close();
    });
  }
  async send(e3) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(safeJsonStringify(e3));
    } catch (t2) {
      this.onError(e3.id, t2);
    }
  }
  register(e3 = this.url) {
    if (!isWsUrl(e3)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e3}`);
    if (this.registering) {
      const t2 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t2 || this.events.listenerCount("open") >= t2) && this.events.setMaxListeners(t2 + 1), new Promise((n5, s4) => {
        this.events.once("register_error", (o6) => {
          this.resetMaxListeners(), s4(o6);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u") return s4(new Error("WebSocket connection is missing or invalid"));
          n5(this.socket);
        });
      });
    }
    return this.url = e3, this.registering = true, new Promise((t2, n5) => {
      const s4 = (0, esm_exports.isReactNative)() ? void 0 : { rejectUnauthorized: !isLocalhostUrl(e3) }, o6 = new b3(e3, [], s4);
      w2() ? o6.onerror = (i5) => {
        const a3 = i5;
        n5(this.emitError(a3.error));
      } : o6.on("error", (i5) => {
        n5(this.emitError(i5));
      }), o6.onopen = () => {
        this.onOpen(o6), t2(o6);
      };
    });
  }
  onOpen(e3) {
    e3.onmessage = (t2) => this.onPayload(t2), e3.onclose = (t2) => this.onClose(t2), this.socket = e3, this.registering = false, this.events.emit("open");
  }
  onClose(e3) {
    this.socket = void 0, this.registering = false, this.events.emit("close", e3);
  }
  onPayload(e3) {
    if (typeof e3.data > "u") return;
    const t2 = typeof e3.data == "string" ? safeJsonParse(e3.data) : e3.data;
    this.events.emit("payload", t2);
  }
  onError(e3, t2) {
    const n5 = this.parseError(t2), s4 = n5.message || n5.toString(), o6 = formatJsonRpcError(e3, s4);
    this.events.emit("payload", o6);
  }
  parseError(e3, t2 = this.url) {
    return parseConnectionError(e3, d3(t2), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > h5 && this.events.setMaxListeners(h5);
  }
  emitError(e3) {
    const t2 = this.parseError(new Error((e3 == null ? void 0 : e3.message) || `WebSocket connection failed for host: ${d3(this.url)}`));
    return this.events.emit("register_error", t2), t2;
  }
};

// ../node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze3 = "wc";
var Le2 = 2;
var he2 = "core";
var B2 = `${ze3}@2:${he2}:`;
var Et3 = { name: he2, logger: "error" };
var It3 = { database: ":memory:" };
var Tt2 = "crypto";
var ke2 = "client_ed25519_seed";
var Ct2 = import_time4.ONE_DAY;
var Pt2 = "keychain";
var St3 = "0.3";
var Rt2 = "messages";
var Ot3 = "0.3";
var je3 = import_time4.SIX_HOURS;
var At2 = "publisher";
var xt3 = "irn";
var Nt3 = "error";
var Ue3 = "wss://relay.walletconnect.org";
var $t2 = "relayer";
var C3 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt3 = "_subscription";
var L2 = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt3 = 0.1;
var _e3 = "2.19.1";
var Q2 = { link_mode: "link_mode", relay: "relay" };
var le2 = { inbound: "inbound", outbound: "outbound" };
var kt3 = "0.3";
var jt3 = "WALLETCONNECT_CLIENT_ID";
var Me2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut3 = "subscription";
var Mt2 = "0.3";
var Hs2 = import_time4.FIVE_SECONDS * 1e3;
var Ft3 = "pairing";
var Kt2 = "0.3";
var ie2 = { wc_pairingDelete: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time4.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time4.ONE_DAY, prompt: false, tag: 0 } } };
var se2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var M4 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt2 = "history";
var Vt2 = "0.3";
var qt2 = "expirer";
var F2 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt3 = "0.3";
var Wt3 = "verify-api";
var Xs2 = "https://verify.walletconnect.com";
var Ht2 = "https://verify.walletconnect.org";
var ue2 = Ht2;
var Yt3 = `${ue2}/v3`;
var Jt3 = [Xs2, Ht2];
var Xt2 = "echo";
var Zt2 = "https://echo.walletconnect.com";
var G2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var Qs2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var er3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var tr3 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var ir3 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt2 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii2 = "https://pulse.walletconnect.org/batch";
function sr3(r3, e3) {
  if (r3.length >= 255) throw new TypeError("Alphabet too long");
  for (var t2 = new Uint8Array(256), s4 = 0; s4 < t2.length; s4++) t2[s4] = 255;
  for (var i5 = 0; i5 < r3.length; i5++) {
    var n5 = r3.charAt(i5), o6 = n5.charCodeAt(0);
    if (t2[o6] !== 255) throw new TypeError(n5 + " is ambiguous");
    t2[o6] = i5;
  }
  var a3 = r3.length, c8 = r3.charAt(0), h6 = Math.log(a3) / Math.log(256), u4 = Math.log(256) / Math.log(a3);
  function d6(l8) {
    if (l8 instanceof Uint8Array || (ArrayBuffer.isView(l8) ? l8 = new Uint8Array(l8.buffer, l8.byteOffset, l8.byteLength) : Array.isArray(l8) && (l8 = Uint8Array.from(l8))), !(l8 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (l8.length === 0) return "";
    for (var b6 = 0, x8 = 0, I4 = 0, D3 = l8.length; I4 !== D3 && l8[I4] === 0; ) I4++, b6++;
    for (var j4 = (D3 - I4) * u4 + 1 >>> 0, T4 = new Uint8Array(j4); I4 !== D3; ) {
      for (var q3 = l8[I4], J8 = 0, K9 = j4 - 1; (q3 !== 0 || J8 < x8) && K9 !== -1; K9--, J8++) q3 += 256 * T4[K9] >>> 0, T4[K9] = q3 % a3 >>> 0, q3 = q3 / a3 >>> 0;
      if (q3 !== 0) throw new Error("Non-zero carry");
      x8 = J8, I4++;
    }
    for (var H5 = j4 - x8; H5 !== j4 && T4[H5] === 0; ) H5++;
    for (var me7 = c8.repeat(b6); H5 < j4; ++H5) me7 += r3.charAt(T4[H5]);
    return me7;
  }
  function g5(l8) {
    if (typeof l8 != "string") throw new TypeError("Expected String");
    if (l8.length === 0) return new Uint8Array();
    var b6 = 0;
    if (l8[b6] !== " ") {
      for (var x8 = 0, I4 = 0; l8[b6] === c8; ) x8++, b6++;
      for (var D3 = (l8.length - b6) * h6 + 1 >>> 0, j4 = new Uint8Array(D3); l8[b6]; ) {
        var T4 = t2[l8.charCodeAt(b6)];
        if (T4 === 255) return;
        for (var q3 = 0, J8 = D3 - 1; (T4 !== 0 || q3 < I4) && J8 !== -1; J8--, q3++) T4 += a3 * j4[J8] >>> 0, j4[J8] = T4 % 256 >>> 0, T4 = T4 / 256 >>> 0;
        if (T4 !== 0) throw new Error("Non-zero carry");
        I4 = q3, b6++;
      }
      if (l8[b6] !== " ") {
        for (var K9 = D3 - I4; K9 !== D3 && j4[K9] === 0; ) K9++;
        for (var H5 = new Uint8Array(x8 + (D3 - K9)), me7 = x8; K9 !== D3; ) H5[me7++] = j4[K9++];
        return H5;
      }
    }
  }
  function _4(l8) {
    var b6 = g5(l8);
    if (b6) return b6;
    throw new Error(`Non-${e3} character`);
  }
  return { encode: d6, decodeUnsafe: g5, decode: _4 };
}
var rr3 = sr3;
var nr3 = rr3;
var si2 = (r3) => {
  if (r3 instanceof Uint8Array && r3.constructor.name === "Uint8Array") return r3;
  if (r3 instanceof ArrayBuffer) return new Uint8Array(r3);
  if (ArrayBuffer.isView(r3)) return new Uint8Array(r3.buffer, r3.byteOffset, r3.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var or4 = (r3) => new TextEncoder().encode(r3);
var ar3 = (r3) => new TextDecoder().decode(r3);
var cr3 = class {
  constructor(e3, t2, s4) {
    this.name = e3, this.prefix = t2, this.baseEncode = s4;
  }
  encode(e3) {
    if (e3 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e3)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var hr2 = class {
  constructor(e3, t2, s4) {
    if (this.name = e3, this.prefix = t2, t2.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t2.codePointAt(0), this.baseDecode = s4;
  }
  decode(e3) {
    if (typeof e3 == "string") {
      if (e3.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e3)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e3.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e3) {
    return ri2(this, e3);
  }
};
var lr2 = class {
  constructor(e3) {
    this.decoders = e3;
  }
  or(e3) {
    return ri2(this, e3);
  }
  decode(e3) {
    const t2 = e3[0], s4 = this.decoders[t2];
    if (s4) return s4.decode(e3);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e3)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r3, e3) => new lr2({ ...r3.decoders || { [r3.prefix]: r3 }, ...e3.decoders || { [e3.prefix]: e3 } });
var ur2 = class {
  constructor(e3, t2, s4, i5) {
    this.name = e3, this.prefix = t2, this.baseEncode = s4, this.baseDecode = i5, this.encoder = new cr3(e3, t2, s4), this.decoder = new hr2(e3, t2, i5);
  }
  encode(e3) {
    return this.encoder.encode(e3);
  }
  decode(e3) {
    return this.decoder.decode(e3);
  }
};
var Ee3 = ({ name: r3, prefix: e3, encode: t2, decode: s4 }) => new ur2(r3, e3, t2, s4);
var de3 = ({ prefix: r3, name: e3, alphabet: t2 }) => {
  const { encode: s4, decode: i5 } = nr3(t2, e3);
  return Ee3({ prefix: r3, name: e3, encode: s4, decode: (n5) => si2(i5(n5)) });
};
var dr2 = (r3, e3, t2, s4) => {
  const i5 = {};
  for (let u4 = 0; u4 < e3.length; ++u4) i5[e3[u4]] = u4;
  let n5 = r3.length;
  for (; r3[n5 - 1] === "="; ) --n5;
  const o6 = new Uint8Array(n5 * t2 / 8 | 0);
  let a3 = 0, c8 = 0, h6 = 0;
  for (let u4 = 0; u4 < n5; ++u4) {
    const d6 = i5[r3[u4]];
    if (d6 === void 0) throw new SyntaxError(`Non-${s4} character`);
    c8 = c8 << t2 | d6, a3 += t2, a3 >= 8 && (a3 -= 8, o6[h6++] = 255 & c8 >> a3);
  }
  if (a3 >= t2 || 255 & c8 << 8 - a3) throw new SyntaxError("Unexpected end of data");
  return o6;
};
var gr2 = (r3, e3, t2) => {
  const s4 = e3[e3.length - 1] === "=", i5 = (1 << t2) - 1;
  let n5 = "", o6 = 0, a3 = 0;
  for (let c8 = 0; c8 < r3.length; ++c8) for (a3 = a3 << 8 | r3[c8], o6 += 8; o6 > t2; ) o6 -= t2, n5 += e3[i5 & a3 >> o6];
  if (o6 && (n5 += e3[i5 & a3 << t2 - o6]), s4) for (; n5.length * t2 & 7; ) n5 += "=";
  return n5;
};
var P4 = ({ name: r3, prefix: e3, bitsPerChar: t2, alphabet: s4 }) => Ee3({ prefix: e3, name: r3, encode(i5) {
  return gr2(i5, s4, t2);
}, decode(i5) {
  return dr2(i5, s4, t2, r3);
} });
var pr2 = Ee3({ prefix: "\0", name: "identity", encode: (r3) => ar3(r3), decode: (r3) => or4(r3) });
var yr3 = Object.freeze({ __proto__: null, identity: pr2 });
var br2 = P4({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var mr3 = Object.freeze({ __proto__: null, base2: br2 });
var fr2 = P4({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Dr3 = Object.freeze({ __proto__: null, base8: fr2 });
var vr2 = de3({ prefix: "9", name: "base10", alphabet: "0123456789" });
var wr2 = Object.freeze({ __proto__: null, base10: vr2 });
var _r3 = P4({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Er2 = P4({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Ir2 = Object.freeze({ __proto__: null, base16: _r3, base16upper: Er2 });
var Tr3 = P4({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Cr2 = P4({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Pr2 = P4({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Sr2 = P4({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Rr3 = P4({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Or2 = P4({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var Ar2 = P4({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var xr2 = P4({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var Nr2 = P4({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var $r3 = Object.freeze({ __proto__: null, base32: Tr3, base32upper: Cr2, base32pad: Pr2, base32padupper: Sr2, base32hex: Rr3, base32hexupper: Or2, base32hexpad: Ar2, base32hexpadupper: xr2, base32z: Nr2 });
var zr3 = de3({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var Lr3 = de3({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var kr2 = Object.freeze({ __proto__: null, base36: zr3, base36upper: Lr3 });
var jr2 = de3({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Ur3 = de3({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Mr2 = Object.freeze({ __proto__: null, base58btc: jr2, base58flickr: Ur3 });
var Fr2 = P4({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Kr3 = P4({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Br3 = P4({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var Vr2 = P4({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var qr2 = Object.freeze({ __proto__: null, base64: Fr2, base64pad: Kr3, base64url: Br3, base64urlpad: Vr2 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Gr2 = ni2.reduce((r3, e3, t2) => (r3[t2] = e3, r3), []);
var Wr2 = ni2.reduce((r3, e3, t2) => (r3[e3.codePointAt(0)] = t2, r3), []);
function Hr2(r3) {
  return r3.reduce((e3, t2) => (e3 += Gr2[t2], e3), "");
}
function Yr3(r3) {
  const e3 = [];
  for (const t2 of r3) {
    const s4 = Wr2[t2.codePointAt(0)];
    if (s4 === void 0) throw new Error(`Non-base256emoji character: ${t2}`);
    e3.push(s4);
  }
  return new Uint8Array(e3);
}
var Jr3 = Ee3({ prefix: "🚀", name: "base256emoji", encode: Hr2, decode: Yr3 });
var Xr3 = Object.freeze({ __proto__: null, base256emoji: Jr3 });
var Zr2 = ai2;
var oi2 = 128;
var Qr3 = 127;
var en2 = ~Qr3;
var tn = Math.pow(2, 31);
function ai2(r3, e3, t2) {
  e3 = e3 || [], t2 = t2 || 0;
  for (var s4 = t2; r3 >= tn; ) e3[t2++] = r3 & 255 | oi2, r3 /= 128;
  for (; r3 & en2; ) e3[t2++] = r3 & 255 | oi2, r3 >>>= 7;
  return e3[t2] = r3 | 0, ai2.bytes = t2 - s4 + 1, e3;
}
var sn3 = Fe2;
var rn2 = 128;
var ci2 = 127;
function Fe2(r3, s4) {
  var t2 = 0, s4 = s4 || 0, i5 = 0, n5 = s4, o6, a3 = r3.length;
  do {
    if (n5 >= a3) throw Fe2.bytes = 0, new RangeError("Could not decode varint");
    o6 = r3[n5++], t2 += i5 < 28 ? (o6 & ci2) << i5 : (o6 & ci2) * Math.pow(2, i5), i5 += 7;
  } while (o6 >= rn2);
  return Fe2.bytes = n5 - s4, t2;
}
var nn2 = Math.pow(2, 7);
var on2 = Math.pow(2, 14);
var an2 = Math.pow(2, 21);
var cn2 = Math.pow(2, 28);
var hn2 = Math.pow(2, 35);
var ln2 = Math.pow(2, 42);
var un2 = Math.pow(2, 49);
var dn2 = Math.pow(2, 56);
var gn3 = Math.pow(2, 63);
var pn2 = function(r3) {
  return r3 < nn2 ? 1 : r3 < on2 ? 2 : r3 < an2 ? 3 : r3 < cn2 ? 4 : r3 < hn2 ? 5 : r3 < ln2 ? 6 : r3 < un2 ? 7 : r3 < dn2 ? 8 : r3 < gn3 ? 9 : 10;
};
var yn2 = { encode: Zr2, decode: sn3, encodingLength: pn2 };
var hi2 = yn2;
var li2 = (r3, e3, t2 = 0) => (hi2.encode(r3, e3, t2), e3);
var ui2 = (r3) => hi2.encodingLength(r3);
var Ke3 = (r3, e3) => {
  const t2 = e3.byteLength, s4 = ui2(r3), i5 = s4 + ui2(t2), n5 = new Uint8Array(i5 + t2);
  return li2(r3, n5, 0), li2(t2, n5, s4), n5.set(e3, i5), new bn2(r3, t2, e3, n5);
};
var bn2 = class {
  constructor(e3, t2, s4, i5) {
    this.code = e3, this.size = t2, this.digest = s4, this.bytes = i5;
  }
};
var di2 = ({ name: r3, code: e3, encode: t2 }) => new mn2(r3, e3, t2);
var mn2 = class {
  constructor(e3, t2, s4) {
    this.name = e3, this.code = t2, this.encode = s4;
  }
  digest(e3) {
    if (e3 instanceof Uint8Array) {
      const t2 = this.encode(e3);
      return t2 instanceof Uint8Array ? Ke3(this.code, t2) : t2.then((s4) => Ke3(this.code, s4));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r3) => async (e3) => new Uint8Array(await crypto.subtle.digest(r3, e3));
var fn2 = di2({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var Dn2 = di2({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var vn2 = Object.freeze({ __proto__: null, sha256: fn2, sha512: Dn2 });
var pi2 = 0;
var wn = "identity";
var yi2 = si2;
var _n2 = (r3) => Ke3(pi2, yi2(r3));
var En2 = { code: pi2, name: wn, encode: yi2, digest: _n2 };
var In2 = Object.freeze({ __proto__: null, identity: En2 });
new TextEncoder(), new TextDecoder();
var bi2 = { ...yr3, ...mr3, ...Dr3, ...wr2, ...Ir2, ...$r3, ...kr2, ...Mr2, ...qr2, ...Xr3 };
({ ...vn2, ...In2 });
function Tn2(r3 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r3) : new Uint8Array(r3);
}
function mi2(r3, e3, t2, s4) {
  return { name: r3, prefix: e3, encoder: { name: r3, prefix: e3, encode: t2 }, decoder: { decode: s4 } };
}
var fi2 = mi2("utf8", "u", (r3) => "u" + new TextDecoder("utf8").decode(r3), (r3) => new TextEncoder().encode(r3.substring(1)));
var Be2 = mi2("ascii", "a", (r3) => {
  let e3 = "a";
  for (let t2 = 0; t2 < r3.length; t2++) e3 += String.fromCharCode(r3[t2]);
  return e3;
}, (r3) => {
  r3 = r3.substring(1);
  const e3 = Tn2(r3.length);
  for (let t2 = 0; t2 < r3.length; t2++) e3[t2] = r3.charCodeAt(t2);
  return e3;
});
var Cn3 = { utf8: fi2, "utf-8": fi2, hex: bi2.base16, latin1: Be2, ascii: Be2, binary: Be2, ...bi2 };
function Pn2(r3, e3 = "utf8") {
  const t2 = Cn3[e3];
  if (!t2) throw new Error(`Unsupported encoding "${e3}"`);
  return (e3 === "utf8" || e3 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r3, "utf8") : t2.decoder.decode(`${t2.prefix}${r3}`);
}
var Sn2 = Object.defineProperty;
var Rn2 = (r3, e3, t2) => e3 in r3 ? Sn2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var W2 = (r3, e3, t2) => Rn2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Di = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, W2(this, "keychain", /* @__PURE__ */ new Map()), W2(this, "name", Pt2), W2(this, "version", St3), W2(this, "initialized", false), W2(this, "storagePrefix", B2), W2(this, "init", async () => {
      if (!this.initialized) {
        const s4 = await this.getKeyChain();
        typeof s4 < "u" && (this.keychain = s4), this.initialized = true;
      }
    }), W2(this, "has", (s4) => (this.isInitialized(), this.keychain.has(s4))), W2(this, "set", async (s4, i5) => {
      this.isInitialized(), this.keychain.set(s4, i5), await this.persist();
    }), W2(this, "get", (s4) => {
      this.isInitialized();
      const i5 = this.keychain.get(s4);
      if (typeof i5 > "u") {
        const { message: n5 } = te2("NO_MATCHING_KEY", `${this.name}: ${s4}`);
        throw new Error(n5);
      }
      return i5;
    }), W2(this, "del", async (s4) => {
      this.isInitialized(), this.keychain.delete(s4), await this.persist();
    }), this.core = e3, this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e3) {
    await this.core.storage.setItem(this.storageKey, ro2(e3));
  }
  async getKeyChain() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var On2 = Object.defineProperty;
var An2 = (r3, e3, t2) => e3 in r3 ? On2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var S3 = (r3, e3, t2) => An2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var vi2 = class {
  constructor(e3, t2, s4) {
    this.core = e3, this.logger = t2, S3(this, "name", Tt2), S3(this, "keychain"), S3(this, "randomSessionIdentifier", oi()), S3(this, "initialized", false), S3(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S3(this, "hasKeys", (i5) => (this.isInitialized(), this.keychain.has(i5))), S3(this, "getClientId", async () => {
      this.isInitialized();
      const i5 = await this.getClientSeed(), n5 = Po(i5);
      return Qe(n5.publicKey);
    }), S3(this, "generateKeyPair", () => {
      this.isInitialized();
      const i5 = ri();
      return this.setPrivateKey(i5.publicKey, i5.privateKey);
    }), S3(this, "signJWT", async (i5) => {
      this.isInitialized();
      const n5 = await this.getClientSeed(), o6 = Po(n5), a3 = this.randomSessionIdentifier, c8 = Ct2;
      return await Qo(a3, i5, c8, o6);
    }), S3(this, "generateSharedKey", (i5, n5, o6) => {
      this.isInitialized();
      const a3 = this.getPrivateKey(i5), c8 = si(a3, n5);
      return this.setSymKey(c8, o6);
    }), S3(this, "setSymKey", async (i5, n5) => {
      this.isInitialized();
      const o6 = n5 || ii(i5);
      return await this.keychain.set(o6, i5), o6;
    }), S3(this, "deleteKeyPair", async (i5) => {
      this.isInitialized(), await this.keychain.del(i5);
    }), S3(this, "deleteSymKey", async (i5) => {
      this.isInitialized(), await this.keychain.del(i5);
    }), S3(this, "encode", async (i5, n5, o6) => {
      this.isInitialized();
      const a3 = rr2(o6), c8 = safeJsonStringify(n5);
      if (pi(a3)) return fi(c8, o6 == null ? void 0 : o6.encoding);
      if (hi(a3)) {
        const g5 = a3.senderPublicKey, _4 = a3.receiverPublicKey;
        i5 = await this.generateSharedKey(g5, _4);
      }
      const h6 = this.getSymKey(i5), { type: u4, senderPublicKey: d6 } = a3;
      return ai({ type: u4, symKey: h6, message: c8, senderPublicKey: d6, encoding: o6 == null ? void 0 : o6.encoding });
    }), S3(this, "decode", async (i5, n5, o6) => {
      this.isInitialized();
      const a3 = di(n5, o6);
      if (pi(a3)) {
        const c8 = li(n5, o6 == null ? void 0 : o6.encoding);
        return safeJsonParse(c8);
      }
      if (hi(a3)) {
        const c8 = a3.receiverPublicKey, h6 = a3.senderPublicKey;
        i5 = await this.generateSharedKey(c8, h6);
      }
      try {
        const c8 = this.getSymKey(i5), h6 = ui({ symKey: c8, encoded: n5, encoding: o6 == null ? void 0 : o6.encoding });
        return safeJsonParse(h6);
      } catch (c8) {
        this.logger.error(`Failed to decode message from topic: '${i5}', clientId: '${await this.getClientId()}'`), this.logger.error(c8);
      }
    }), S3(this, "getPayloadType", (i5, n5 = At) => {
      const o6 = Fe({ encoded: i5, encoding: n5 });
      return fe2(o6.type);
    }), S3(this, "getPayloadSenderPublicKey", (i5, n5 = At) => {
      const o6 = Fe({ encoded: i5, encoding: n5 });
      return o6.senderPublicKey ? toString3(o6.senderPublicKey, V2) : void 0;
    }), this.core = e3, this.logger = E2(t2, this.name), this.keychain = s4 || new Di(this.core, this.logger);
  }
  get context() {
    return y3(this.logger);
  }
  async setPrivateKey(e3, t2) {
    return await this.keychain.set(e3, t2), e3;
  }
  getPrivateKey(e3) {
    return this.keychain.get(e3);
  }
  async getClientSeed() {
    let e3 = "";
    try {
      e3 = this.keychain.get(ke2);
    } catch {
      e3 = oi(), await this.keychain.set(ke2, e3);
    }
    return Pn2(e3, "base16");
  }
  getSymKey(e3) {
    return this.keychain.get(e3);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var xn2 = Object.defineProperty;
var Nn2 = Object.defineProperties;
var $n2 = Object.getOwnPropertyDescriptors;
var wi2 = Object.getOwnPropertySymbols;
var zn3 = Object.prototype.hasOwnProperty;
var Ln3 = Object.prototype.propertyIsEnumerable;
var Ve3 = (r3, e3, t2) => e3 in r3 ? xn2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var kn3 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) zn3.call(e3, t2) && Ve3(r3, t2, e3[t2]);
  if (wi2) for (var t2 of wi2(e3)) Ln3.call(e3, t2) && Ve3(r3, t2, e3[t2]);
  return r3;
};
var jn3 = (r3, e3) => Nn2(r3, $n2(e3));
var k5 = (r3, e3, t2) => Ve3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var _i = class extends y4 {
  constructor(e3, t2) {
    super(e3, t2), this.logger = e3, this.core = t2, k5(this, "messages", /* @__PURE__ */ new Map()), k5(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k5(this, "name", Rt2), k5(this, "version", Ot3), k5(this, "initialized", false), k5(this, "storagePrefix", B2), k5(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s4 = await this.getRelayerMessages();
          typeof s4 < "u" && (this.messages = s4);
          const i5 = await this.getRelayerMessagesWithoutClientAck();
          typeof i5 < "u" && (this.messagesWithoutClientAck = i5), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s4) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s4);
        } finally {
          this.initialized = true;
        }
      }
    }), k5(this, "set", async (s4, i5, n5) => {
      this.isInitialized();
      const o6 = ci(i5);
      let a3 = this.messages.get(s4);
      if (typeof a3 > "u" && (a3 = {}), typeof a3[o6] < "u") return o6;
      if (a3[o6] = i5, this.messages.set(s4, a3), n5 === le2.inbound) {
        const c8 = this.messagesWithoutClientAck.get(s4) || {};
        this.messagesWithoutClientAck.set(s4, jn3(kn3({}, c8), { [o6]: i5 }));
      }
      return await this.persist(), o6;
    }), k5(this, "get", (s4) => {
      this.isInitialized();
      let i5 = this.messages.get(s4);
      return typeof i5 > "u" && (i5 = {}), i5;
    }), k5(this, "getWithoutAck", (s4) => {
      this.isInitialized();
      const i5 = {};
      for (const n5 of s4) {
        const o6 = this.messagesWithoutClientAck.get(n5) || {};
        i5[n5] = Object.values(o6);
      }
      return i5;
    }), k5(this, "has", (s4, i5) => {
      this.isInitialized();
      const n5 = this.get(s4), o6 = ci(i5);
      return typeof n5[o6] < "u";
    }), k5(this, "ack", async (s4, i5) => {
      this.isInitialized();
      const n5 = this.messagesWithoutClientAck.get(s4);
      if (typeof n5 > "u") return;
      const o6 = ci(i5);
      delete n5[o6], Object.keys(n5).length === 0 ? this.messagesWithoutClientAck.delete(s4) : this.messagesWithoutClientAck.set(s4, n5), await this.persist();
    }), k5(this, "del", async (s4) => {
      this.isInitialized(), this.messages.delete(s4), this.messagesWithoutClientAck.delete(s4), await this.persist();
    }), this.logger = E2(e3, this.name), this.core = t2;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e3) {
    await this.core.storage.setItem(this.storageKey, ro2(e3));
  }
  async setRelayerMessagesWithoutClientAck(e3) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, ro2(e3));
  }
  async getRelayerMessages() {
    const e3 = await this.core.storage.getItem(this.storageKey);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e3 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e3 < "u" ? oo2(e3) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Un2 = Object.defineProperty;
var Mn3 = Object.defineProperties;
var Fn3 = Object.getOwnPropertyDescriptors;
var Ei2 = Object.getOwnPropertySymbols;
var Kn3 = Object.prototype.hasOwnProperty;
var Bn3 = Object.prototype.propertyIsEnumerable;
var qe2 = (r3, e3, t2) => e3 in r3 ? Un2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var Ie3 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) Kn3.call(e3, t2) && qe2(r3, t2, e3[t2]);
  if (Ei2) for (var t2 of Ei2(e3)) Bn3.call(e3, t2) && qe2(r3, t2, e3[t2]);
  return r3;
};
var Ge2 = (r3, e3) => Mn3(r3, Fn3(e3));
var V3 = (r3, e3, t2) => qe2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Vn3 = class extends m2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, V3(this, "events", new import_events7.EventEmitter()), V3(this, "name", At2), V3(this, "queue", /* @__PURE__ */ new Map()), V3(this, "publishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), V3(this, "initialPublishTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), V3(this, "needsTransportRestart", false), V3(this, "publish", async (s4, i5, n5) => {
      var o6;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s4, message: i5, opts: n5 } });
      const a3 = (n5 == null ? void 0 : n5.ttl) || je3, c8 = bi(n5), h6 = (n5 == null ? void 0 : n5.prompt) || false, u4 = (n5 == null ? void 0 : n5.tag) || 0, d6 = (n5 == null ? void 0 : n5.id) || getBigIntRpcId().toString(), g5 = { topic: s4, message: i5, opts: { ttl: a3, relay: c8, prompt: h6, tag: u4, id: d6, attestation: n5 == null ? void 0 : n5.attestation, tvf: n5 == null ? void 0 : n5.tvf } }, _4 = `Failed to publish payload, please try again. id:${d6} tag:${u4}`;
      try {
        const l8 = new Promise(async (b6) => {
          const x8 = ({ id: D3 }) => {
            g5.opts.id === D3 && (this.removeRequestFromQueue(D3), this.relayer.events.removeListener(C3.publish, x8), b6(g5));
          };
          this.relayer.events.on(C3.publish, x8);
          const I4 = uo2(new Promise((D3, j4) => {
            this.rpcPublish({ topic: s4, message: i5, ttl: a3, prompt: h6, tag: u4, id: d6, attestation: n5 == null ? void 0 : n5.attestation, tvf: n5 == null ? void 0 : n5.tvf }).then(D3).catch((T4) => {
              this.logger.warn(T4, T4 == null ? void 0 : T4.message), j4(T4);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d6} tag:${u4}`);
          try {
            await I4, this.events.removeListener(C3.publish, x8);
          } catch (D3) {
            this.queue.set(d6, Ge2(Ie3({}, g5), { attempt: 1 })), this.logger.warn(D3, D3 == null ? void 0 : D3.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d6, topic: s4, message: i5, opts: n5 } }), await uo2(l8, this.publishTimeout, _4);
      } catch (l8) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(l8), (o6 = n5 == null ? void 0 : n5.internal) != null && o6.throwOnFailedPublish) throw l8;
      } finally {
        this.queue.delete(d6);
      }
    }), V3(this, "on", (s4, i5) => {
      this.events.on(s4, i5);
    }), V3(this, "once", (s4, i5) => {
      this.events.once(s4, i5);
    }), V3(this, "off", (s4, i5) => {
      this.events.off(s4, i5);
    }), V3(this, "removeListener", (s4, i5) => {
      this.events.removeListener(s4, i5);
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.registerEventListeners();
  }
  get context() {
    return y3(this.logger);
  }
  async rpcPublish(e3) {
    var t2, s4, i5, n5;
    const { topic: o6, message: a3, ttl: c8 = je3, prompt: h6, tag: u4, id: d6, attestation: g5, tvf: _4 } = e3, l8 = { method: wi(bi().protocol).publish, params: Ie3({ topic: o6, message: a3, ttl: c8, prompt: h6, tag: u4, attestation: g5 }, _4), id: d6 };
    ae((t2 = l8.params) == null ? void 0 : t2.prompt) && ((s4 = l8.params) == null || delete s4.prompt), ae((i5 = l8.params) == null ? void 0 : i5.tag) && ((n5 = l8.params) == null || delete n5.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: l8 });
    const b6 = await this.relayer.request(l8);
    return this.relayer.events.emit(C3.publish, e3), this.logger.debug("Successfully Published Payload"), b6;
  }
  removeRequestFromQueue(e3) {
    this.queue.delete(e3);
  }
  checkQueue() {
    this.queue.forEach(async (e3, t2) => {
      const s4 = e3.attempt + 1;
      this.queue.set(t2, Ge2(Ie3({}, e3), { attempt: s4 }));
      const { topic: i5, message: n5, opts: o6, attestation: a3 } = e3;
      this.logger.warn({}, `Publisher: queue->publishing: ${e3.opts.id}, tag: ${e3.opts.tag}, attempt: ${s4}`), await this.rpcPublish(Ge2(Ie3({}, e3), { topic: i5, message: n5, ttl: o6.ttl, prompt: o6.prompt, tag: o6.tag, id: o6.id, attestation: a3, tvf: o6.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e3.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C3.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C3.message_ack, (e3) => {
      this.removeRequestFromQueue(e3.id.toString());
    });
  }
};
var qn3 = Object.defineProperty;
var Gn3 = (r3, e3, t2) => e3 in r3 ? qn3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var re = (r3, e3, t2) => Gn3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Wn3 = class {
  constructor() {
    re(this, "map", /* @__PURE__ */ new Map()), re(this, "set", (e3, t2) => {
      const s4 = this.get(e3);
      this.exists(e3, t2) || this.map.set(e3, [...s4, t2]);
    }), re(this, "get", (e3) => this.map.get(e3) || []), re(this, "exists", (e3, t2) => this.get(e3).includes(t2)), re(this, "delete", (e3, t2) => {
      if (typeof t2 > "u") {
        this.map.delete(e3);
        return;
      }
      if (!this.map.has(e3)) return;
      const s4 = this.get(e3);
      if (!this.exists(e3, t2)) return;
      const i5 = s4.filter((n5) => n5 !== t2);
      if (!i5.length) {
        this.map.delete(e3);
        return;
      }
      this.map.set(e3, i5);
    }), re(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Hn3 = Object.defineProperty;
var Yn3 = Object.defineProperties;
var Jn3 = Object.getOwnPropertyDescriptors;
var Ii = Object.getOwnPropertySymbols;
var Xn3 = Object.prototype.hasOwnProperty;
var Zn3 = Object.prototype.propertyIsEnumerable;
var We3 = (r3, e3, t2) => e3 in r3 ? Hn3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var ge2 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) Xn3.call(e3, t2) && We3(r3, t2, e3[t2]);
  if (Ii) for (var t2 of Ii(e3)) Zn3.call(e3, t2) && We3(r3, t2, e3[t2]);
  return r3;
};
var He3 = (r3, e3) => Yn3(r3, Jn3(e3));
var f6 = (r3, e3, t2) => We3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ti = class extends P2 {
  constructor(e3, t2) {
    super(e3, t2), this.relayer = e3, this.logger = t2, f6(this, "subscriptions", /* @__PURE__ */ new Map()), f6(this, "topicMap", new Wn3()), f6(this, "events", new import_events7.EventEmitter()), f6(this, "name", Ut3), f6(this, "version", Mt2), f6(this, "pending", /* @__PURE__ */ new Map()), f6(this, "cached", []), f6(this, "initialized", false), f6(this, "storagePrefix", B2), f6(this, "subscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_MINUTE)), f6(this, "initialSubscribeTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), f6(this, "clientId"), f6(this, "batchSubscribeTopicsLimit", 500), f6(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f6(this, "subscribe", async (s4, i5) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i5 } });
      try {
        const n5 = bi(i5), o6 = { topic: s4, relay: n5, transportType: i5 == null ? void 0 : i5.transportType };
        this.pending.set(s4, o6);
        const a3 = await this.rpcSubscribe(s4, n5, i5);
        return typeof a3 == "string" && (this.onSubscribe(a3, o6), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s4, opts: i5 } })), a3;
      } catch (n5) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n5), n5;
      }
    }), f6(this, "unsubscribe", async (s4, i5) => {
      this.isInitialized(), typeof (i5 == null ? void 0 : i5.id) < "u" ? await this.unsubscribeById(s4, i5.id, i5) : await this.unsubscribeByTopic(s4, i5);
    }), f6(this, "isSubscribed", (s4) => new Promise((i5) => {
      i5(this.topicMap.topics.includes(s4));
    })), f6(this, "isKnownTopic", (s4) => new Promise((i5) => {
      i5(this.topicMap.topics.includes(s4) || this.pending.has(s4) || this.cached.some((n5) => n5.topic === s4));
    })), f6(this, "on", (s4, i5) => {
      this.events.on(s4, i5);
    }), f6(this, "once", (s4, i5) => {
      this.events.once(s4, i5);
    }), f6(this, "off", (s4, i5) => {
      this.events.off(s4, i5);
    }), f6(this, "removeListener", (s4, i5) => {
      this.events.removeListener(s4, i5);
    }), f6(this, "start", async () => {
      await this.onConnect();
    }), f6(this, "stop", async () => {
      await this.onDisconnect();
    }), f6(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f6(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const s4 = [];
      this.pending.forEach((i5) => {
        s4.push(i5);
      }), await this.batchSubscribe(s4);
    }), f6(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (s4) => {
        const i5 = $.created;
        this.logger.info(`Emitting ${i5}`), this.logger.debug({ type: "event", event: i5, data: s4 }), await this.persist();
      }), this.events.on($.deleted, async (s4) => {
        const i5 = $.deleted;
        this.logger.info(`Emitting ${i5}`), this.logger.debug({ type: "event", event: i5, data: s4 }), await this.persist();
      });
    }), this.relayer = e3, this.logger = E2(t2, this.name), this.clientId = "";
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e3, t2) {
    let s4 = false;
    try {
      s4 = this.getSubscription(e3).topic === t2;
    } catch {
    }
    return s4;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e3, t2) {
    const s4 = this.topicMap.get(e3);
    await Promise.all(s4.map(async (i5) => await this.unsubscribeById(e3, i5, t2)));
  }
  async unsubscribeById(e3, t2, s4) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: s4 } });
    try {
      const i5 = bi(s4);
      await this.restartToComplete({ topic: e3, id: t2, relay: i5 }), await this.rpcUnsubscribe(e3, t2, i5);
      const n5 = de2("USER_DISCONNECTED", `${this.name}, ${e3}`);
      await this.onUnsubscribe(e3, t2, n5), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e3, id: t2, opts: s4 } });
    } catch (i5) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(i5), i5;
    }
  }
  async rpcSubscribe(e3, t2, s4) {
    var i5;
    (!s4 || (s4 == null ? void 0 : s4.transportType) === Q2.relay) && await this.restartToComplete({ topic: e3, id: e3, relay: t2 });
    const n5 = { method: wi(t2.protocol).subscribe, params: { topic: e3 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n5 });
    const o6 = (i5 = s4 == null ? void 0 : s4.internal) == null ? void 0 : i5.throwOnFailedPublish;
    try {
      const a3 = await this.getSubscriptionId(e3);
      if ((s4 == null ? void 0 : s4.transportType) === Q2.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n5).catch((u4) => this.logger.warn(u4));
      }, (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), a3;
      const c8 = new Promise(async (u4) => {
        const d6 = (g5) => {
          g5.topic === e3 && (this.events.removeListener($.created, d6), u4(g5.id));
        };
        this.events.on($.created, d6);
        try {
          const g5 = await uo2(new Promise((_4, l8) => {
            this.relayer.request(n5).catch((b6) => {
              this.logger.warn(b6, b6 == null ? void 0 : b6.message), l8(b6);
            }).then(_4);
          }), this.initialSubscribeTimeout, `Subscribing to ${e3} failed, please try again`);
          this.events.removeListener($.created, d6), u4(g5);
        } catch {
        }
      }), h6 = await uo2(c8, this.subscribeTimeout, `Subscribing to ${e3} failed, please try again`);
      if (!h6 && o6) throw new Error(`Subscribing to ${e3} failed, please try again`);
      return h6 ? a3 : null;
    } catch (a3) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C3.connection_stalled), o6) throw a3;
    }
    return null;
  }
  async rpcBatchSubscribe(e3) {
    if (!e3.length) return;
    const t2 = e3[0].relay, s4 = { method: wi(t2.protocol).batchSubscribe, params: { topics: e3.map((i5) => i5.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
    try {
      await await uo2(new Promise((i5) => {
        this.relayer.request(s4).catch((n5) => this.logger.warn(n5)).then(i5);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e3) {
    if (!e3.length) return;
    const t2 = e3[0].relay, s4 = { method: wi(t2.protocol).batchFetchMessages, params: { topics: e3.map((n5) => n5.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s4 });
    let i5;
    try {
      i5 = await await uo2(new Promise((n5, o6) => {
        this.relayer.request(s4).catch((a3) => {
          this.logger.warn(a3), o6(a3);
        }).then(n5);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C3.connection_stalled);
    }
    return i5;
  }
  rpcUnsubscribe(e3, t2, s4) {
    const i5 = { method: wi(s4.protocol).unsubscribe, params: { topic: e3, id: t2 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i5 }), this.relayer.request(i5);
  }
  onSubscribe(e3, t2) {
    this.setSubscription(e3, He3(ge2({}, t2), { id: e3 })), this.pending.delete(t2.topic);
  }
  onBatchSubscribe(e3) {
    e3.length && e3.forEach((t2) => {
      this.setSubscription(t2.id, ge2({}, t2)), this.pending.delete(t2.topic);
    });
  }
  async onUnsubscribe(e3, t2, s4) {
    this.events.removeAllListeners(t2), this.hasSubscription(t2, e3) && this.deleteSubscription(t2, s4), await this.relayer.messages.del(e3);
  }
  async setRelayerSubscriptions(e3) {
    await this.relayer.core.storage.setItem(this.storageKey, e3);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e3, t2) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e3, subscription: t2 }), this.addSubscription(e3, t2);
  }
  addSubscription(e3, t2) {
    this.subscriptions.set(e3, ge2({}, t2)), this.topicMap.set(t2.topic, e3), this.events.emit($.created, t2);
  }
  getSubscription(e3) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e3 });
    const t2 = this.subscriptions.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s4);
    }
    return t2;
  }
  deleteSubscription(e3, t2) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e3, reason: t2 });
    const s4 = this.getSubscription(e3);
    this.subscriptions.delete(e3), this.topicMap.delete(s4.topic, e3), this.events.emit($.deleted, He3(ge2({}, s4), { reason: t2 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e3 = [...this.cached], t2 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let s4 = 0; s4 < t2; s4++) {
        const i5 = e3.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(i5);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e3 = await this.getRelayerSubscriptions();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.subscriptions.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e3);
    }
  }
  async batchSubscribe(e3) {
    e3.length && (await this.rpcBatchSubscribe(e3), this.onBatchSubscribe(await Promise.all(e3.map(async (t2) => He3(ge2({}, t2), { id: await this.getSubscriptionId(t2.topic) })))));
  }
  async batchFetchMessages(e3) {
    if (!e3.length) return;
    this.logger.trace(`Fetching batch messages for ${e3.length} subscriptions`);
    const t2 = await this.rpcBatchFetchMessages(e3);
    t2 && t2.messages && (await xo2((0, import_time4.toMiliseconds)(import_time4.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t2.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async restartToComplete(e3) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e3), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e3) {
    return ci(e3 + await this.getClientId());
  }
};
var Qn3 = Object.defineProperty;
var Ci = Object.getOwnPropertySymbols;
var eo2 = Object.prototype.hasOwnProperty;
var to2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r3, e3, t2) => e3 in r3 ? Qn3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var Pi2 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) eo2.call(e3, t2) && Ye2(r3, t2, e3[t2]);
  if (Ci) for (var t2 of Ci(e3)) to2.call(e3, t2) && Ye2(r3, t2, e3[t2]);
  return r3;
};
var y5 = (r3, e3, t2) => Ye2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Si = class extends d2 {
  constructor(e3) {
    super(e3), y5(this, "protocol", "wc"), y5(this, "version", 2), y5(this, "core"), y5(this, "logger"), y5(this, "events", new import_events7.EventEmitter()), y5(this, "provider"), y5(this, "messages"), y5(this, "subscriber"), y5(this, "publisher"), y5(this, "name", $t2), y5(this, "transportExplicitlyClosed", false), y5(this, "initialized", false), y5(this, "connectionAttemptInProgress", false), y5(this, "relayUrl"), y5(this, "projectId"), y5(this, "packageName"), y5(this, "bundleId"), y5(this, "hasExperiencedNetworkDisruption", false), y5(this, "pingTimeout"), y5(this, "heartBeatTimeout", (0, import_time4.toMiliseconds)(import_time4.THIRTY_SECONDS + import_time4.FIVE_SECONDS)), y5(this, "reconnectTimeout"), y5(this, "connectPromise"), y5(this, "reconnectInProgress", false), y5(this, "requestsInFlight", []), y5(this, "connectTimeout", (0, import_time4.toMiliseconds)(import_time4.ONE_SECOND * 15)), y5(this, "request", async (t2) => {
      var s4, i5;
      this.logger.debug("Publishing Request Payload");
      const n5 = t2.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n5, method: t2.method, topic: (s4 = t2.params) == null ? void 0 : s4.topic }, "relayer.request - publishing...");
        const o6 = `${n5}:${((i5 = t2.params) == null ? void 0 : i5.tag) || ""}`;
        this.requestsInFlight.push(o6);
        const a3 = await this.provider.request(t2);
        return this.requestsInFlight = this.requestsInFlight.filter((c8) => c8 !== o6), a3;
      } catch (o6) {
        throw this.logger.debug(`Failed to Publish Request: ${n5}`), o6;
      }
    }), y5(this, "resetPingTimeout", () => {
      et() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t2, s4, i5, n5;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n5 = (i5 = (s4 = (t2 = this.provider) == null ? void 0 : t2.connection) == null ? void 0 : s4.socket) == null ? void 0 : i5.terminate) == null || n5.call(i5);
        } catch (o6) {
          this.logger.warn(o6, o6 == null ? void 0 : o6.message);
        }
      }, this.heartBeatTimeout));
    }), y5(this, "onPayloadHandler", (t2) => {
      this.onProviderPayload(t2), this.resetPingTimeout();
    }), y5(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C3.connect);
    }), y5(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y5(this, "onProviderErrorHandler", (t2) => {
      this.logger.fatal(`Fatal socket error: ${t2.message}`), this.events.emit(C3.error, t2), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y5(this, "registerProviderListeners", () => {
      this.provider.on(L2.payload, this.onPayloadHandler), this.provider.on(L2.connect, this.onConnectHandler), this.provider.on(L2.disconnect, this.onDisconnectHandler), this.provider.on(L2.error, this.onProviderErrorHandler);
    }), this.core = e3.core, this.logger = typeof e3.logger < "u" && typeof e3.logger != "string" ? E2(e3.logger, this.name) : (0, import_pino2.default)(k2({ level: e3.logger || Nt3 })), this.messages = new _i(this.logger, e3.core), this.subscriber = new Ti(this, this.logger), this.publisher = new Vn3(this, this.logger), this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.projectId = e3.projectId, zr2() ? this.packageName = Yr2() : Jr2() && (this.bundleId = Yr2()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics) try {
      await this.transportOpen();
    } catch (e3) {
      this.logger.warn(e3, e3 == null ? void 0 : e3.message);
    }
  }
  get context() {
    return y3(this.logger);
  }
  get connected() {
    var e3, t2, s4;
    return ((s4 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : s4.readyState) === 1 || false;
  }
  get connecting() {
    var e3, t2, s4;
    return ((s4 = (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) == null ? void 0 : t2.socket) == null ? void 0 : s4.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e3, t2, s4) {
    this.isInitialized(), await this.publisher.publish(e3, t2, s4), await this.recordMessageEvent({ topic: e3, message: t2, publishedAt: Date.now(), transportType: Q2.relay }, le2.outbound);
  }
  async subscribe(e3, t2) {
    var s4, i5, n5;
    this.isInitialized(), (!(t2 != null && t2.transportType) || (t2 == null ? void 0 : t2.transportType) === "relay") && await this.toEstablishConnection();
    const o6 = typeof ((s4 = t2 == null ? void 0 : t2.internal) == null ? void 0 : s4.throwOnFailedPublish) > "u" ? true : (i5 = t2 == null ? void 0 : t2.internal) == null ? void 0 : i5.throwOnFailedPublish;
    let a3 = ((n5 = this.subscriber.topicMap.get(e3)) == null ? void 0 : n5[0]) || "", c8;
    const h6 = (u4) => {
      u4.topic === e3 && (this.subscriber.off($.created, h6), c8());
    };
    return await Promise.all([new Promise((u4) => {
      c8 = u4, this.subscriber.on($.created, h6);
    }), new Promise(async (u4, d6) => {
      a3 = await this.subscriber.subscribe(e3, Pi2({ internal: { throwOnFailedPublish: o6 } }, t2)).catch((g5) => {
        o6 && d6(g5);
      }) || a3, u4();
    })]), a3;
  }
  async unsubscribe(e3, t2) {
    this.isInitialized(), await this.subscriber.unsubscribe(e3, t2);
  }
  on(e3, t2) {
    this.events.on(e3, t2);
  }
  once(e3, t2) {
    this.events.once(e3, t2);
  }
  off(e3, t2) {
    this.events.off(e3, t2);
  }
  removeListener(e3, t2) {
    this.events.removeListener(e3, t2);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await uo2(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e3) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t2, s4) => {
      await this.connect(e3).then(t2).catch(s4).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e3) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e3 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Zi()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e3) {
    if ((e3 == null ? void 0 : e3.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t2 = e3.sort((s4, i5) => s4.publishedAt - i5.publishedAt);
    this.logger.debug(`Batch of ${t2.length} message events sorted`);
    for (const s4 of t2) try {
      await this.onMessageEvent(s4);
    } catch (i5) {
      this.logger.warn(i5, "Error while processing batch message event: " + (i5 == null ? void 0 : i5.message));
    }
    this.logger.trace(`Batch of ${t2.length} message events processed`);
  }
  async onLinkMessageEvent(e3, t2) {
    const { topic: s4 } = e3;
    if (!t2.sessionExists) {
      const i5 = po2(import_time4.FIVE_MINUTES), n5 = { topic: s4, expiry: i5, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(s4, n5);
    }
    this.events.emit(C3.message, e3), await this.recordMessageEvent(e3, le2.inbound);
  }
  async connect(e3) {
    await this.confirmOnlineStateOrThrow(), e3 && e3 !== this.relayUrl && (this.relayUrl = e3, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t2 = 1;
    for (; t2 < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t2}...`), await this.createProvider(), await new Promise(async (s4, i5) => {
          const n5 = () => {
            i5(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L2.disconnect, n5), await uo2(new Promise((o6, a3) => {
            this.provider.connect().then(o6).catch(a3);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o6) => {
            i5(o6);
          }).finally(() => {
            this.provider.off(L2.disconnect, n5), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o6, a3) => {
            const c8 = () => {
              a3(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L2.disconnect, c8), await this.subscriber.start().then(o6).catch(a3).finally(() => {
              this.provider.off(L2.disconnect, c8);
            });
          }), this.hasExperiencedNetworkDisruption = false, s4();
        });
      } catch (s4) {
        await this.subscriber.stop();
        const i5 = s4;
        this.logger.warn({}, i5.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t2}`);
        break;
      }
      await new Promise((s4) => setTimeout(s4, (0, import_time4.toMiliseconds)(t2 * 1))), t2++;
    }
  }
  startPingTimeout() {
    var e3, t2, s4, i5, n5;
    if (et()) try {
      (t2 = (e3 = this.provider) == null ? void 0 : e3.connection) != null && t2.socket && ((n5 = (i5 = (s4 = this.provider) == null ? void 0 : s4.connection) == null ? void 0 : i5.socket) == null || n5.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o6) {
      this.logger.warn(o6, o6 == null ? void 0 : o6.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e3 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o3(new f5(Qr2({ sdkVersion: _e3, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e3, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e3, t2) {
    const { topic: s4, message: i5 } = e3;
    await this.messages.set(s4, i5, t2);
  }
  async shouldIgnoreMessageEvent(e3) {
    const { topic: t2, message: s4 } = e3;
    if (!s4 || s4.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${s4}`), true;
    if (!await this.subscriber.isKnownTopic(t2)) return this.logger.warn(`Ignoring message for unknown topic ${t2}`), true;
    const i5 = this.messages.has(t2, s4);
    return i5 && this.logger.warn(`Ignoring duplicate message: ${s4}`), i5;
  }
  async onProviderPayload(e3) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e3 }), isJsonRpcRequest(e3)) {
      if (!e3.method.endsWith(zt3)) return;
      const t2 = e3.params, { topic: s4, message: i5, publishedAt: n5, attestation: o6 } = t2.data, a3 = { topic: s4, message: i5, publishedAt: n5, transportType: Q2.relay, attestation: o6 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Pi2({ type: "event", event: t2.id }, a3)), this.events.emit(t2.id, a3), await this.acknowledgePayload(e3), await this.onMessageEvent(a3);
    } else isJsonRpcResponse(e3) && this.events.emit(C3.message_ack, e3);
  }
  async onMessageEvent(e3) {
    await this.shouldIgnoreMessageEvent(e3) || (await this.recordMessageEvent(e3, le2.inbound), this.events.emit(C3.message, e3));
  }
  async acknowledgePayload(e3) {
    const t2 = formatJsonRpcResult(e3.id, true);
    await this.provider.connection.send(t2);
  }
  unregisterProviderListeners() {
    this.provider.off(L2.payload, this.onPayloadHandler), this.provider.off(L2.connect, this.onConnectHandler), this.provider.off(L2.disconnect, this.onDisconnectHandler), this.provider.off(L2.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e3 = await Zi();
    Qi(async (t2) => {
      e3 !== t2 && (e3 = t2, t2 ? await this.transportOpen().catch((s4) => this.logger.error(s4, s4 == null ? void 0 : s4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C3.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e3) => this.logger.error(e3, e3 == null ? void 0 : e3.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time4.toMiliseconds)(Lt3)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  async toEstablishConnection() {
    await this.confirmOnlineStateOrThrow(), !this.connected && await this.connect();
  }
};
function io2() {
}
function Ri(r3) {
  if (!r3 || typeof r3 != "object") return false;
  const e3 = Object.getPrototypeOf(r3);
  return e3 === null || e3 === Object.prototype || Object.getPrototypeOf(e3) === null ? Object.prototype.toString.call(r3) === "[object Object]" : false;
}
function Oi(r3) {
  return Object.getOwnPropertySymbols(r3).filter((e3) => Object.prototype.propertyIsEnumerable.call(r3, e3));
}
function Ai(r3) {
  return r3 == null ? r3 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r3);
}
var so2 = "[object RegExp]";
var ro3 = "[object String]";
var no2 = "[object Number]";
var oo3 = "[object Boolean]";
var xi = "[object Arguments]";
var ao3 = "[object Symbol]";
var co2 = "[object Date]";
var ho3 = "[object Map]";
var lo3 = "[object Set]";
var uo3 = "[object Array]";
var go3 = "[object Function]";
var po3 = "[object ArrayBuffer]";
var Je2 = "[object Object]";
var yo3 = "[object Error]";
var bo2 = "[object DataView]";
var mo2 = "[object Uint8Array]";
var fo3 = "[object Uint8ClampedArray]";
var Do3 = "[object Uint16Array]";
var vo3 = "[object Uint32Array]";
var wo2 = "[object BigUint64Array]";
var _o3 = "[object Int8Array]";
var Eo3 = "[object Int16Array]";
var Io3 = "[object Int32Array]";
var To3 = "[object BigInt64Array]";
var Co3 = "[object Float32Array]";
var Po3 = "[object Float64Array]";
function So3(r3, e3) {
  return r3 === e3 || Number.isNaN(r3) && Number.isNaN(e3);
}
function Ro3(r3, e3, t2) {
  return pe2(r3, e3, void 0, void 0, void 0, void 0, t2);
}
function pe2(r3, e3, t2, s4, i5, n5, o6) {
  const a3 = o6(r3, e3, t2, s4, i5, n5);
  if (a3 !== void 0) return a3;
  if (typeof r3 == typeof e3) switch (typeof r3) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r3 === e3;
    case "number":
      return r3 === e3 || Object.is(r3, e3);
    case "function":
      return r3 === e3;
    case "object":
      return ye2(r3, e3, n5, o6);
  }
  return ye2(r3, e3, n5, o6);
}
function ye2(r3, e3, t2, s4) {
  if (Object.is(r3, e3)) return true;
  let i5 = Ai(r3), n5 = Ai(e3);
  if (i5 === xi && (i5 = Je2), n5 === xi && (n5 = Je2), i5 !== n5) return false;
  switch (i5) {
    case ro3:
      return r3.toString() === e3.toString();
    case no2: {
      const c8 = r3.valueOf(), h6 = e3.valueOf();
      return So3(c8, h6);
    }
    case oo3:
    case co2:
    case ao3:
      return Object.is(r3.valueOf(), e3.valueOf());
    case so2:
      return r3.source === e3.source && r3.flags === e3.flags;
    case go3:
      return r3 === e3;
  }
  t2 = t2 ?? /* @__PURE__ */ new Map();
  const o6 = t2.get(r3), a3 = t2.get(e3);
  if (o6 != null && a3 != null) return o6 === e3;
  t2.set(r3, e3), t2.set(e3, r3);
  try {
    switch (i5) {
      case ho3: {
        if (r3.size !== e3.size) return false;
        for (const [c8, h6] of r3.entries()) if (!e3.has(c8) || !pe2(h6, e3.get(c8), c8, r3, e3, t2, s4)) return false;
        return true;
      }
      case lo3: {
        if (r3.size !== e3.size) return false;
        const c8 = Array.from(r3.values()), h6 = Array.from(e3.values());
        for (let u4 = 0; u4 < c8.length; u4++) {
          const d6 = c8[u4], g5 = h6.findIndex((_4) => pe2(d6, _4, void 0, r3, e3, t2, s4));
          if (g5 === -1) return false;
          h6.splice(g5, 1);
        }
        return true;
      }
      case uo3:
      case mo2:
      case fo3:
      case Do3:
      case vo3:
      case wo2:
      case _o3:
      case Eo3:
      case Io3:
      case To3:
      case Co3:
      case Po3: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r3) !== Buffer.isBuffer(e3) || r3.length !== e3.length) return false;
        for (let c8 = 0; c8 < r3.length; c8++) if (!pe2(r3[c8], e3[c8], c8, r3, e3, t2, s4)) return false;
        return true;
      }
      case po3:
        return r3.byteLength !== e3.byteLength ? false : ye2(new Uint8Array(r3), new Uint8Array(e3), t2, s4);
      case bo2:
        return r3.byteLength !== e3.byteLength || r3.byteOffset !== e3.byteOffset ? false : ye2(new Uint8Array(r3), new Uint8Array(e3), t2, s4);
      case yo3:
        return r3.name === e3.name && r3.message === e3.message;
      case Je2: {
        if (!(ye2(r3.constructor, e3.constructor, t2, s4) || Ri(r3) && Ri(e3))) return false;
        const h6 = [...Object.keys(r3), ...Oi(r3)], u4 = [...Object.keys(e3), ...Oi(e3)];
        if (h6.length !== u4.length) return false;
        for (let d6 = 0; d6 < h6.length; d6++) {
          const g5 = h6[d6], _4 = r3[g5];
          if (!Object.hasOwn(e3, g5)) return false;
          const l8 = e3[g5];
          if (!pe2(_4, l8, g5, r3, e3, t2, s4)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t2.delete(r3), t2.delete(e3);
  }
}
function Oo3(r3, e3) {
  return Ro3(r3, e3, io2);
}
var Ao3 = Object.defineProperty;
var Ni = Object.getOwnPropertySymbols;
var xo3 = Object.prototype.hasOwnProperty;
var No3 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r3, e3, t2) => e3 in r3 ? Ao3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var $i = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) xo3.call(e3, t2) && Xe2(r3, t2, e3[t2]);
  if (Ni) for (var t2 of Ni(e3)) No3.call(e3, t2) && Xe2(r3, t2, e3[t2]);
  return r3;
};
var z4 = (r3, e3, t2) => Xe2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var zi = class extends f3 {
  constructor(e3, t2, s4, i5 = B2, n5 = void 0) {
    super(e3, t2, s4, i5), this.core = e3, this.logger = t2, this.name = s4, z4(this, "map", /* @__PURE__ */ new Map()), z4(this, "version", kt3), z4(this, "cached", []), z4(this, "initialized", false), z4(this, "getKey"), z4(this, "storagePrefix", B2), z4(this, "recentlyDeleted", []), z4(this, "recentlyDeletedLimit", 200), z4(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o6) => {
        this.getKey && o6 !== null && !ae(o6) ? this.map.set(this.getKey(o6), o6) : Li(o6) ? this.map.set(o6.id, o6) : ji(o6) && this.map.set(o6.topic, o6);
      }), this.cached = [], this.initialized = true);
    }), z4(this, "set", async (o6, a3) => {
      this.isInitialized(), this.map.has(o6) ? await this.update(o6, a3) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o6, value: a3 }), this.map.set(o6, a3), await this.persist());
    }), z4(this, "get", (o6) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o6 }), this.getData(o6))), z4(this, "getAll", (o6) => (this.isInitialized(), o6 ? this.values.filter((a3) => Object.keys(o6).every((c8) => Oo3(a3[c8], o6[c8]))) : this.values)), z4(this, "update", async (o6, a3) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o6, update: a3 });
      const c8 = $i($i({}, this.getData(o6)), a3);
      this.map.set(o6, c8), await this.persist();
    }), z4(this, "delete", async (o6, a3) => {
      this.isInitialized(), this.map.has(o6) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o6, reason: a3 }), this.map.delete(o6), this.addToRecentlyDeleted(o6), await this.persist());
    }), this.logger = E2(t2, this.name), this.storagePrefix = i5, this.getKey = n5;
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e3) {
    this.recentlyDeleted.push(e3), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e3) {
    const t2 = this.map.get(e3);
    if (!t2) {
      if (this.recentlyDeleted.includes(e3)) {
        const { message: i5 } = te2("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e3}`);
        throw this.logger.error(i5), new Error(i5);
      }
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.error(s4), new Error(s4);
    }
    return t2;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e3 = await this.getDataStore();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.map.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var $o3 = Object.defineProperty;
var zo2 = (r3, e3, t2) => e3 in r3 ? $o3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var p3 = (r3, e3, t2) => zo2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Li2 = class {
  constructor(e3, t2) {
    this.core = e3, this.logger = t2, p3(this, "name", Ft3), p3(this, "version", Kt2), p3(this, "events", new import_events7.default()), p3(this, "pairings"), p3(this, "initialized", false), p3(this, "storagePrefix", B2), p3(this, "ignoredPayloadTypes", [Oe2]), p3(this, "registeredMethods", []), p3(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p3(this, "register", ({ methods: s4 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s4])];
    }), p3(this, "create", async (s4) => {
      this.isInitialized();
      const i5 = oi(), n5 = await this.core.crypto.setSymKey(i5), o6 = po2(import_time4.FIVE_MINUTES), a3 = { protocol: xt3 }, c8 = { topic: n5, expiry: o6, relay: a3, active: false, methods: s4 == null ? void 0 : s4.methods }, h6 = vi({ protocol: this.core.protocol, version: this.core.version, topic: n5, symKey: i5, relay: a3, expiryTimestamp: o6, methods: s4 == null ? void 0 : s4.methods });
      return this.events.emit(se2.create, c8), this.core.expirer.set(n5, o6), await this.pairings.set(n5, c8), await this.core.relayer.subscribe(n5, { transportType: s4 == null ? void 0 : s4.transportType }), { topic: n5, uri: h6 };
    }), p3(this, "pair", async (s4) => {
      this.isInitialized();
      const i5 = this.core.eventClient.createEvent({ properties: { topic: s4 == null ? void 0 : s4.uri, trace: [G2.pairing_started] } });
      this.isValidPair(s4, i5);
      const { topic: n5, symKey: o6, relay: a3, expiryTimestamp: c8, methods: h6 } = Ei(s4.uri);
      i5.props.properties.topic = n5, i5.addTrace(G2.pairing_uri_validation_success), i5.addTrace(G2.pairing_uri_not_expired);
      let u4;
      if (this.pairings.keys.includes(n5)) {
        if (u4 = this.pairings.get(n5), i5.addTrace(G2.existing_pairing), u4.active) throw i5.setError(Y.active_pairing_already_exists), new Error(`Pairing already exists: ${n5}. Please try again with a new connection URI.`);
        i5.addTrace(G2.pairing_not_expired);
      }
      const d6 = c8 || po2(import_time4.FIVE_MINUTES), g5 = { topic: n5, relay: a3, expiry: d6, active: false, methods: h6 };
      this.core.expirer.set(n5, d6), await this.pairings.set(n5, g5), i5.addTrace(G2.store_new_pairing), s4.activatePairing && await this.activate({ topic: n5 }), this.events.emit(se2.create, g5), i5.addTrace(G2.emit_inactive_pairing), this.core.crypto.keychain.has(n5) || await this.core.crypto.setSymKey(o6, n5), i5.addTrace(G2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        i5.setError(Y.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n5, { relay: a3 });
      } catch (_4) {
        throw i5.setError(Y.subscribe_pairing_topic_failure), _4;
      }
      return i5.addTrace(G2.subscribe_pairing_topic_success), g5;
    }), p3(this, "activate", async ({ topic: s4 }) => {
      this.isInitialized();
      const i5 = po2(import_time4.FIVE_MINUTES);
      this.core.expirer.set(s4, i5), await this.pairings.update(s4, { active: true, expiry: i5 });
    }), p3(this, "ping", async (s4) => {
      this.isInitialized(), await this.isValidPing(s4), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: i5 } = s4;
      if (this.pairings.keys.includes(i5)) {
        const n5 = await this.sendRequest(i5, "wc_pairingPing", {}), { done: o6, resolve: a3, reject: c8 } = ao2();
        this.events.once(yo2("pairing_ping", n5), ({ error: h6 }) => {
          h6 ? c8(h6) : a3();
        }), await o6();
      }
    }), p3(this, "updateExpiry", async ({ topic: s4, expiry: i5 }) => {
      this.isInitialized(), await this.pairings.update(s4, { expiry: i5 });
    }), p3(this, "updateMetadata", async ({ topic: s4, metadata: i5 }) => {
      this.isInitialized(), await this.pairings.update(s4, { peerMetadata: i5 });
    }), p3(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p3(this, "disconnect", async (s4) => {
      this.isInitialized(), await this.isValidDisconnect(s4);
      const { topic: i5 } = s4;
      this.pairings.keys.includes(i5) && (await this.sendRequest(i5, "wc_pairingDelete", de2("USER_DISCONNECTED")), await this.deletePairing(i5));
    }), p3(this, "formatUriFromPairing", (s4) => {
      this.isInitialized();
      const { topic: i5, relay: n5, expiry: o6, methods: a3 } = s4, c8 = this.core.crypto.keychain.get(i5);
      return vi({ protocol: this.core.protocol, version: this.core.version, topic: i5, symKey: c8, relay: n5, expiryTimestamp: o6, methods: a3 });
    }), p3(this, "sendRequest", async (s4, i5, n5) => {
      const o6 = formatJsonRpcRequest(i5, n5), a3 = await this.core.crypto.encode(s4, o6), c8 = ie2[i5].req;
      return this.core.history.set(s4, o6), this.core.relayer.publish(s4, a3, c8), o6.id;
    }), p3(this, "sendResult", async (s4, i5, n5) => {
      const o6 = formatJsonRpcResult(s4, n5), a3 = await this.core.crypto.encode(i5, o6), c8 = (await this.core.history.get(i5, s4)).request.method, h6 = ie2[c8].res;
      await this.core.relayer.publish(i5, a3, h6), await this.core.history.resolve(o6);
    }), p3(this, "sendError", async (s4, i5, n5) => {
      const o6 = formatJsonRpcError(s4, n5), a3 = await this.core.crypto.encode(i5, o6), c8 = (await this.core.history.get(i5, s4)).request.method, h6 = ie2[c8] ? ie2[c8].res : ie2.unregistered_method.res;
      await this.core.relayer.publish(i5, a3, h6), await this.core.history.resolve(o6);
    }), p3(this, "deletePairing", async (s4, i5) => {
      await this.core.relayer.unsubscribe(s4), await Promise.all([this.pairings.delete(s4, de2("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s4), i5 ? Promise.resolve() : this.core.expirer.del(s4)]);
    }), p3(this, "cleanup", async () => {
      const s4 = this.pairings.getAll().filter((i5) => go2(i5.expiry));
      await Promise.all(s4.map((i5) => this.deletePairing(i5.topic)));
    }), p3(this, "onRelayEventRequest", async (s4) => {
      const { topic: i5, payload: n5 } = s4;
      switch (n5.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(i5, n5);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(i5, n5);
        default:
          return await this.onUnknownRpcMethodRequest(i5, n5);
      }
    }), p3(this, "onRelayEventResponse", async (s4) => {
      const { topic: i5, payload: n5 } = s4, o6 = (await this.core.history.get(i5, n5.id)).request.method;
      switch (o6) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(i5, n5);
        default:
          return this.onUnknownRpcMethodResponse(o6);
      }
    }), p3(this, "onPairingPingRequest", async (s4, i5) => {
      const { id: n5 } = i5;
      try {
        this.isValidPing({ topic: s4 }), await this.sendResult(n5, s4, true), this.events.emit(se2.ping, { id: n5, topic: s4 });
      } catch (o6) {
        await this.sendError(n5, s4, o6), this.logger.error(o6);
      }
    }), p3(this, "onPairingPingResponse", (s4, i5) => {
      const { id: n5 } = i5;
      setTimeout(() => {
        isJsonRpcResult(i5) ? this.events.emit(yo2("pairing_ping", n5), {}) : isJsonRpcError(i5) && this.events.emit(yo2("pairing_ping", n5), { error: i5.error });
      }, 500);
    }), p3(this, "onPairingDeleteRequest", async (s4, i5) => {
      const { id: n5 } = i5;
      try {
        this.isValidDisconnect({ topic: s4 }), await this.deletePairing(s4), this.events.emit(se2.delete, { id: n5, topic: s4 });
      } catch (o6) {
        await this.sendError(n5, s4, o6), this.logger.error(o6);
      }
    }), p3(this, "onUnknownRpcMethodRequest", async (s4, i5) => {
      const { id: n5, method: o6 } = i5;
      try {
        if (this.registeredMethods.includes(o6)) return;
        const a3 = de2("WC_METHOD_UNSUPPORTED", o6);
        await this.sendError(n5, s4, a3), this.logger.error(a3);
      } catch (a3) {
        await this.sendError(n5, s4, a3), this.logger.error(a3);
      }
    }), p3(this, "onUnknownRpcMethodResponse", (s4) => {
      this.registeredMethods.includes(s4) || this.logger.error(de2("WC_METHOD_UNSUPPORTED", s4));
    }), p3(this, "isValidPair", (s4, i5) => {
      var n5;
      if (!Vi(s4)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `pair() params: ${s4}`);
        throw i5.setError(Y.malformed_pairing_uri), new Error(a3);
      }
      if (!Bi(s4.uri)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", `pair() uri: ${s4.uri}`);
        throw i5.setError(Y.malformed_pairing_uri), new Error(a3);
      }
      const o6 = Ei(s4 == null ? void 0 : s4.uri);
      if (!((n5 = o6 == null ? void 0 : o6.relay) != null && n5.protocol)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw i5.setError(Y.malformed_pairing_uri), new Error(a3);
      }
      if (!(o6 != null && o6.symKey)) {
        const { message: a3 } = te2("MISSING_OR_INVALID", "pair() uri#symKey");
        throw i5.setError(Y.malformed_pairing_uri), new Error(a3);
      }
      if (o6 != null && o6.expiryTimestamp && (0, import_time4.toMiliseconds)(o6 == null ? void 0 : o6.expiryTimestamp) < Date.now()) {
        i5.setError(Y.pairing_expired);
        const { message: a3 } = te2("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a3);
      }
    }), p3(this, "isValidPing", async (s4) => {
      if (!Vi(s4)) {
        const { message: n5 } = te2("MISSING_OR_INVALID", `ping() params: ${s4}`);
        throw new Error(n5);
      }
      const { topic: i5 } = s4;
      await this.isValidPairingTopic(i5);
    }), p3(this, "isValidDisconnect", async (s4) => {
      if (!Vi(s4)) {
        const { message: n5 } = te2("MISSING_OR_INVALID", `disconnect() params: ${s4}`);
        throw new Error(n5);
      }
      const { topic: i5 } = s4;
      await this.isValidPairingTopic(i5);
    }), p3(this, "isValidPairingTopic", async (s4) => {
      if (!q(s4, false)) {
        const { message: i5 } = te2("MISSING_OR_INVALID", `pairing topic should be a string: ${s4}`);
        throw new Error(i5);
      }
      if (!this.pairings.keys.includes(s4)) {
        const { message: i5 } = te2("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s4}`);
        throw new Error(i5);
      }
      if (go2(this.pairings.get(s4).expiry)) {
        await this.deletePairing(s4);
        const { message: i5 } = te2("EXPIRED", `pairing topic: ${s4}`);
        throw new Error(i5);
      }
    }), this.core = e3, this.logger = E2(t2, this.name), this.pairings = new zi(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y3(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C3.message, async (e3) => {
      const { topic: t2, message: s4, transportType: i5 } = e3;
      if (this.pairings.keys.includes(t2) && i5 !== Q2.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s4))) try {
        const n5 = await this.core.crypto.decode(t2, s4);
        isJsonRpcRequest(n5) ? (this.core.history.set(t2, n5), await this.onRelayEventRequest({ topic: t2, payload: n5 })) : isJsonRpcResponse(n5) && (await this.core.history.resolve(n5), await this.onRelayEventResponse({ topic: t2, payload: n5 }), this.core.history.delete(t2, n5.id)), await this.core.relayer.messages.ack(t2, s4);
      } catch (n5) {
        this.logger.error(n5);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(F2.expired, async (e3) => {
      const { topic: t2 } = ho2(e3.target);
      t2 && this.pairings.keys.includes(t2) && (await this.deletePairing(t2, true), this.events.emit(se2.expire, { topic: t2 }));
    });
  }
};
var Lo3 = Object.defineProperty;
var ko3 = (r3, e3, t2) => e3 in r3 ? Lo3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var R2 = (r3, e3, t2) => ko3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ki = class extends I2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, R2(this, "records", /* @__PURE__ */ new Map()), R2(this, "events", new import_events7.EventEmitter()), R2(this, "name", Bt2), R2(this, "version", Vt2), R2(this, "cached", []), R2(this, "initialized", false), R2(this, "storagePrefix", B2), R2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.records.set(s4.id, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), R2(this, "set", (s4, i5, n5) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s4, request: i5, chainId: n5 }), this.records.has(i5.id)) return;
      const o6 = { id: i5.id, topic: s4, request: { method: i5.method, params: i5.params || null }, chainId: n5, expiry: po2(import_time4.THIRTY_DAYS) };
      this.records.set(o6.id, o6), this.persist(), this.events.emit(M4.created, o6);
    }), R2(this, "resolve", async (s4) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s4 }), !this.records.has(s4.id)) return;
      const i5 = await this.getRecord(s4.id);
      typeof i5.response > "u" && (i5.response = isJsonRpcError(s4) ? { error: s4.error } : { result: s4.result }, this.records.set(i5.id, i5), this.persist(), this.events.emit(M4.updated, i5));
    }), R2(this, "get", async (s4, i5) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s4, id: i5 }), await this.getRecord(i5))), R2(this, "delete", (s4, i5) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: i5 }), this.values.forEach((n5) => {
        if (n5.topic === s4) {
          if (typeof i5 < "u" && n5.id !== i5) return;
          this.records.delete(n5.id), this.events.emit(M4.deleted, n5);
        }
      }), this.persist();
    }), R2(this, "exists", async (s4, i5) => (this.isInitialized(), this.records.has(i5) ? (await this.getRecord(i5)).topic === s4 : false)), R2(this, "on", (s4, i5) => {
      this.events.on(s4, i5);
    }), R2(this, "once", (s4, i5) => {
      this.events.once(s4, i5);
    }), R2(this, "off", (s4, i5) => {
      this.events.off(s4, i5);
    }), R2(this, "removeListener", (s4, i5) => {
      this.events.removeListener(s4, i5);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e3 = [];
    return this.values.forEach((t2) => {
      if (typeof t2.response < "u") return;
      const s4 = { topic: t2.topic, request: formatJsonRpcRequest(t2.request.method, t2.request.params, t2.id), chainId: t2.chainId };
      return e3.push(s4);
    }), e3;
  }
  async setJsonRpcRecords(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e3) {
    this.isInitialized();
    const t2 = this.records.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw new Error(s4);
    }
    return t2;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(M4.sync);
  }
  async restore() {
    try {
      const e3 = await this.getJsonRpcRecords();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.records.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e3);
    }
  }
  registerEventListeners() {
    this.events.on(M4.created, (e3) => {
      const t2 = M4.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(M4.updated, (e3) => {
      const t2 = M4.updated;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.events.on(M4.deleted, (e3) => {
      const t2 = M4.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e3 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e3 = false;
      this.records.forEach((t2) => {
        (0, import_time4.toMiliseconds)(t2.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t2.id}`), this.records.delete(t2.id), this.events.emit(M4.deleted, t2, false), e3 = true);
      }), e3 && this.persist();
    } catch (e3) {
      this.logger.warn(e3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var jo3 = Object.defineProperty;
var Uo3 = (r3, e3, t2) => e3 in r3 ? jo3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var A2 = (r3, e3, t2) => Uo3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var ji2 = class extends S2 {
  constructor(e3, t2) {
    super(e3, t2), this.core = e3, this.logger = t2, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events7.EventEmitter()), A2(this, "name", qt2), A2(this, "version", Gt3), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B2), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s4) => this.expirations.set(s4.target, s4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (s4) => {
      try {
        const i5 = this.formatTarget(s4);
        return typeof this.getExpiration(i5) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (s4, i5) => {
      this.isInitialized();
      const n5 = this.formatTarget(s4), o6 = { target: n5, expiry: i5 };
      this.expirations.set(n5, o6), this.checkExpiry(n5, o6), this.events.emit(F2.created, { target: n5, expiration: o6 });
    }), A2(this, "get", (s4) => {
      this.isInitialized();
      const i5 = this.formatTarget(s4);
      return this.getExpiration(i5);
    }), A2(this, "del", (s4) => {
      if (this.isInitialized(), this.has(s4)) {
        const i5 = this.formatTarget(s4), n5 = this.getExpiration(i5);
        this.expirations.delete(i5), this.events.emit(F2.deleted, { target: i5, expiration: n5 });
      }
    }), A2(this, "on", (s4, i5) => {
      this.events.on(s4, i5);
    }), A2(this, "once", (s4, i5) => {
      this.events.once(s4, i5);
    }), A2(this, "off", (s4, i5) => {
      this.events.off(s4, i5);
    }), A2(this, "removeListener", (s4, i5) => {
      this.events.removeListener(s4, i5);
    }), this.logger = E2(t2, this.name);
  }
  get context() {
    return y3(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e3) {
    if (typeof e3 == "string") return fo2(e3);
    if (typeof e3 == "number") return lo2(e3);
    const { message: t2 } = te2("UNKNOWN_TYPE", `Target type: ${typeof e3}`);
    throw new Error(t2);
  }
  async setExpirations(e3) {
    await this.core.storage.setItem(this.storageKey, e3);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e3 = await this.getExpirations();
      if (typeof e3 > "u" || !e3.length) return;
      if (this.expirations.size) {
        const { message: t2 } = te2("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e3, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e3) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e3);
    }
  }
  getExpiration(e3) {
    const t2 = this.expirations.get(e3);
    if (!t2) {
      const { message: s4 } = te2("NO_MATCHING_KEY", `${this.name}: ${e3}`);
      throw this.logger.warn(s4), new Error(s4);
    }
    return t2;
  }
  checkExpiry(e3, t2) {
    const { expiry: s4 } = t2;
    (0, import_time4.toMiliseconds)(s4) - Date.now() <= 0 && this.expire(e3, t2);
  }
  expire(e3, t2) {
    this.expirations.delete(e3), this.events.emit(F2.expired, { target: e3, expiration: t2 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e3, t2) => this.checkExpiry(t2, e3));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(F2.created, (e3) => {
      const t2 = F2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(F2.expired, (e3) => {
      const t2 = F2.expired;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    }), this.events.on(F2.deleted, (e3) => {
      const t2 = F2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e3 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e3 } = te2("NOT_INITIALIZED", this.name);
      throw new Error(e3);
    }
  }
};
var Mo3 = Object.defineProperty;
var Fo2 = (r3, e3, t2) => e3 in r3 ? Mo3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var w3 = (r3, e3, t2) => Fo2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Ui = class extends M {
  constructor(e3, t2, s4) {
    super(e3, t2, s4), this.core = e3, this.logger = t2, this.store = s4, w3(this, "name", Wt3), w3(this, "abortController"), w3(this, "isDevEnv"), w3(this, "verifyUrlV3", Yt3), w3(this, "storagePrefix", B2), w3(this, "version", Le2), w3(this, "publicKey"), w3(this, "fetchPromise"), w3(this, "init", async () => {
      var i5;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time4.toMiliseconds)((i5 = this.publicKey) == null ? void 0 : i5.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w3(this, "register", async (i5) => {
      if (!Ae2() || this.isDevEnv) return;
      const n5 = window.location.origin, { id: o6, decryptedId: a3 } = i5, c8 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n5}&id=${o6}&decryptedId=${a3}`;
      try {
        const h6 = (0, import_window_getters2.getDocument)(), u4 = this.startAbortTimer(import_time4.ONE_SECOND * 5), d6 = await new Promise((g5, _4) => {
          const l8 = () => {
            window.removeEventListener("message", x8), h6.body.removeChild(b6), _4("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", l8);
          const b6 = h6.createElement("iframe");
          b6.src = c8, b6.style.display = "none", b6.addEventListener("error", l8, { signal: this.abortController.signal });
          const x8 = (I4) => {
            if (I4.data && typeof I4.data == "string") try {
              const D3 = JSON.parse(I4.data);
              if (D3.type === "verify_attestation") {
                if (sn(D3.attestation).payload.id !== o6) return;
                clearInterval(u4), h6.body.removeChild(b6), this.abortController.signal.removeEventListener("abort", l8), window.removeEventListener("message", x8), g5(D3.attestation === null ? "" : D3.attestation);
              }
            } catch (D3) {
              this.logger.warn(D3);
            }
          };
          h6.body.appendChild(b6), window.addEventListener("message", x8, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d6), d6;
      } catch (h6) {
        this.logger.warn(h6);
      }
      return "";
    }), w3(this, "resolve", async (i5) => {
      if (this.isDevEnv) return "";
      const { attestationId: n5, hash: o6, encryptedId: a3 } = i5;
      if (n5 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n5) {
        if (sn(n5).payload.id !== a3) return;
        const h6 = await this.isValidJwtAttestation(n5);
        if (h6) {
          if (!h6.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h6;
        }
      }
      if (!o6) return;
      const c8 = this.getVerifyUrl(i5 == null ? void 0 : i5.verifyUrl);
      return this.fetchAttestation(o6, c8);
    }), w3(this, "fetchAttestation", async (i5, n5) => {
      this.logger.debug(`resolving attestation: ${i5} from url: ${n5}`);
      const o6 = this.startAbortTimer(import_time4.ONE_SECOND * 5), a3 = await fetch(`${n5}/attestation/${i5}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o6), a3.status === 200 ? await a3.json() : void 0;
    }), w3(this, "getVerifyUrl", (i5) => {
      let n5 = i5 || ue2;
      return Jt3.includes(n5) || (this.logger.info(`verify url: ${n5}, not included in trusted list, assigning default: ${ue2}`), n5 = ue2), n5;
    }), w3(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const i5 = this.startAbortTimer(import_time4.FIVE_SECONDS), n5 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(i5), await n5.json();
      } catch (i5) {
        this.logger.warn(i5);
      }
    }), w3(this, "persistPublicKey", async (i5) => {
      this.logger.debug("persisting public key to local storage", i5), await this.store.setItem(this.storeKey, i5), this.publicKey = i5;
    }), w3(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w3(this, "isValidJwtAttestation", async (i5) => {
      const n5 = await this.getPublicKey();
      try {
        if (n5) return this.validateAttestation(i5, n5);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
      const o6 = await this.fetchAndPersistPublicKey();
      try {
        if (o6) return this.validateAttestation(i5, o6);
      } catch (a3) {
        this.logger.error(a3), this.logger.warn("error validating attestation");
      }
    }), w3(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w3(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n5) => {
        const o6 = await this.fetchPublicKey();
        o6 && (await this.persistPublicKey(o6), n5(o6));
      });
      const i5 = await this.fetchPromise;
      return this.fetchPromise = void 0, i5;
    }), w3(this, "validateAttestation", (i5, n5) => {
      const o6 = mi(i5, n5.publicKey), a3 = { hasExpired: (0, import_time4.toMiliseconds)(o6.exp) < Date.now(), payload: o6 };
      if (a3.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a3.payload.origin, isScam: a3.payload.isScam, isVerified: a3.payload.isVerified };
    }), this.logger = E2(t2, this.name), this.abortController = new AbortController(), this.isDevEnv = vo2(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y3(this.logger);
  }
  startAbortTimer(e3) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time4.toMiliseconds)(e3));
  }
};
var Ko2 = Object.defineProperty;
var Bo3 = (r3, e3, t2) => e3 in r3 ? Ko2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var Mi = (r3, e3, t2) => Bo3(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Fi = class extends O3 {
  constructor(e3, t2) {
    super(e3, t2), this.projectId = e3, this.logger = t2, Mi(this, "context", Xt2), Mi(this, "registerDeviceToken", async (s4) => {
      const { clientId: i5, token: n5, notificationType: o6, enableEncrypted: a3 = false } = s4, c8 = `${Zt2}/${this.projectId}/clients`;
      await fetch(c8, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: i5, type: o6, token: n5, always_raw: a3 }) });
    }), this.logger = E2(t2, this.context);
  }
};
var Vo3 = Object.defineProperty;
var Ki = Object.getOwnPropertySymbols;
var qo2 = Object.prototype.hasOwnProperty;
var Go2 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r3, e3, t2) => e3 in r3 ? Vo3(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var be3 = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) qo2.call(e3, t2) && Ze2(r3, t2, e3[t2]);
  if (Ki) for (var t2 of Ki(e3)) Go2.call(e3, t2) && Ze2(r3, t2, e3[t2]);
  return r3;
};
var E3 = (r3, e3, t2) => Ze2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Bi2 = class extends R {
  constructor(e3, t2, s4 = true) {
    super(e3, t2, s4), this.core = e3, this.logger = t2, E3(this, "context", ei2), E3(this, "storagePrefix", B2), E3(this, "storageVersion", Qt2), E3(this, "events", /* @__PURE__ */ new Map()), E3(this, "shouldPersist", false), E3(this, "init", async () => {
      if (!vo2()) try {
        const i5 = { eventId: Eo2(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Yt2(this.core.relayer.protocol, this.core.relayer.version, _e3) } } };
        await this.sendEvent([i5]);
      } catch (i5) {
        this.logger.warn(i5);
      }
    }), E3(this, "createEvent", (i5) => {
      const { event: n5 = "ERROR", type: o6 = "", properties: { topic: a3, trace: c8 } } = i5, h6 = Eo2(), u4 = this.core.projectId || "", d6 = Date.now(), g5 = be3({ eventId: h6, timestamp: d6, props: { event: n5, type: o6, properties: { topic: a3, trace: c8 } }, bundleId: u4, domain: this.getAppDomain() }, this.setMethods(h6));
      return this.telemetryEnabled && (this.events.set(h6, g5), this.shouldPersist = true), g5;
    }), E3(this, "getEvent", (i5) => {
      const { eventId: n5, topic: o6 } = i5;
      if (n5) return this.events.get(n5);
      const a3 = Array.from(this.events.values()).find((c8) => c8.props.properties.topic === o6);
      if (a3) return be3(be3({}, a3), this.setMethods(a3.eventId));
    }), E3(this, "deleteEvent", (i5) => {
      const { eventId: n5 } = i5;
      this.events.delete(n5), this.shouldPersist = true;
    }), E3(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((i5) => {
          (0, import_time4.fromMiliseconds)(Date.now()) - (0, import_time4.fromMiliseconds)(i5.timestamp) > ti && (this.events.delete(i5.eventId), this.shouldPersist = true);
        });
      });
    }), E3(this, "setMethods", (i5) => ({ addTrace: (n5) => this.addTrace(i5, n5), setError: (n5) => this.setError(i5, n5) })), E3(this, "addTrace", (i5, n5) => {
      const o6 = this.events.get(i5);
      o6 && (o6.props.properties.trace.push(n5), this.events.set(i5, o6), this.shouldPersist = true);
    }), E3(this, "setError", (i5, n5) => {
      const o6 = this.events.get(i5);
      o6 && (o6.props.type = n5, o6.timestamp = Date.now(), this.events.set(i5, o6), this.shouldPersist = true);
    }), E3(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E3(this, "restore", async () => {
      try {
        const i5 = await this.core.storage.getItem(this.storageKey) || [];
        if (!i5.length) return;
        i5.forEach((n5) => {
          this.events.set(n5.eventId, be3(be3({}, n5), this.setMethods(n5.eventId)));
        });
      } catch (i5) {
        this.logger.warn(i5);
      }
    }), E3(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const i5 = [];
      for (const [n5, o6] of this.events) o6.props.type && i5.push(o6);
      if (i5.length !== 0) try {
        if ((await this.sendEvent(i5)).ok) for (const n5 of i5) this.events.delete(n5.eventId), this.shouldPersist = true;
      } catch (n5) {
        this.logger.warn(n5);
      }
    }), E3(this, "sendEvent", async (i5) => {
      const n5 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii2}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e3}${n5}`, { method: "POST", body: JSON.stringify(i5) });
    }), E3(this, "getAppDomain", () => Xr2().url), this.logger = E2(t2, this.context), this.telemetryEnabled = s4, s4 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Wo2 = Object.defineProperty;
var Vi2 = Object.getOwnPropertySymbols;
var Ho3 = Object.prototype.hasOwnProperty;
var Yo2 = Object.prototype.propertyIsEnumerable;
var Qe2 = (r3, e3, t2) => e3 in r3 ? Wo2(r3, e3, { enumerable: true, configurable: true, writable: true, value: t2 }) : r3[e3] = t2;
var qi = (r3, e3) => {
  for (var t2 in e3 || (e3 = {})) Ho3.call(e3, t2) && Qe2(r3, t2, e3[t2]);
  if (Vi2) for (var t2 of Vi2(e3)) Yo2.call(e3, t2) && Qe2(r3, t2, e3[t2]);
  return r3;
};
var v4 = (r3, e3, t2) => Qe2(r3, typeof e3 != "symbol" ? e3 + "" : e3, t2);
var Te3 = class _Te extends h4 {
  constructor(e3) {
    var t2;
    super(e3), v4(this, "protocol", ze3), v4(this, "version", Le2), v4(this, "name", he2), v4(this, "relayUrl"), v4(this, "projectId"), v4(this, "customStoragePrefix"), v4(this, "events", new import_events7.EventEmitter()), v4(this, "logger"), v4(this, "heartbeat"), v4(this, "relayer"), v4(this, "crypto"), v4(this, "storage"), v4(this, "history"), v4(this, "expirer"), v4(this, "pairing"), v4(this, "verify"), v4(this, "echoClient"), v4(this, "linkModeSupportedApps"), v4(this, "eventClient"), v4(this, "initialized", false), v4(this, "logChunkController"), v4(this, "on", (o6, a3) => this.events.on(o6, a3)), v4(this, "once", (o6, a3) => this.events.once(o6, a3)), v4(this, "off", (o6, a3) => this.events.off(o6, a3)), v4(this, "removeListener", (o6, a3) => this.events.removeListener(o6, a3)), v4(this, "dispatchEnvelope", ({ topic: o6, message: a3, sessionExists: c8 }) => {
      if (!o6 || !a3) return;
      const h6 = { topic: o6, message: a3, publishedAt: Date.now(), transportType: Q2.link_mode };
      this.relayer.onLinkMessageEvent(h6, { sessionExists: c8 });
    }), this.projectId = e3 == null ? void 0 : e3.projectId, this.relayUrl = (e3 == null ? void 0 : e3.relayUrl) || Ue3, this.customStoragePrefix = e3 != null && e3.customStoragePrefix ? `:${e3.customStoragePrefix}` : "";
    const s4 = k2({ level: typeof (e3 == null ? void 0 : e3.logger) == "string" && e3.logger ? e3.logger : Et3.logger, name: he2 }), { logger: i5, chunkLoggerController: n5 } = A({ opts: s4, maxSizeInBytes: e3 == null ? void 0 : e3.maxLogBlobSizeInBytes, loggerOverride: e3 == null ? void 0 : e3.logger });
    this.logChunkController = n5, (t2 = this.logChunkController) != null && t2.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var o6, a3;
      (o6 = this.logChunkController) != null && o6.downloadLogsBlobInBrowser && ((a3 = this.logChunkController) == null || a3.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E2(i5, this.name), this.heartbeat = new i2(), this.crypto = new vi2(this, this.logger, e3 == null ? void 0 : e3.keychain), this.history = new ki(this, this.logger), this.expirer = new ji2(this, this.logger), this.storage = e3 != null && e3.storage ? e3.storage : new h2(qi(qi({}, It3), e3 == null ? void 0 : e3.storageOptions)), this.relayer = new Si({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Li2(this, this.logger), this.verify = new Ui(this, this.logger, this.storage), this.echoClient = new Fi(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi2(this, this.logger, e3 == null ? void 0 : e3.telemetryEnabled);
  }
  static async init(e3) {
    const t2 = new _Te(e3);
    await t2.initialize();
    const s4 = await t2.crypto.getClientId();
    return await t2.storage.setItem(jt3, s4), t2;
  }
  get context() {
    return y3(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e3;
    return (e3 = this.logChunkController) == null ? void 0 : e3.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e3) {
    this.linkModeSupportedApps.includes(e3) || (this.linkModeSupportedApps.push(e3), await this.storage.setItem(Me2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Me2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e3) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e3), this.logger.error(e3.message), e3;
    }
  }
};
var Jo2 = Te3;

// ../node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time6 = __toESM(require_cjs());

// ../node_modules/@walletconnect/sign-client/node_modules/@walletconnect/utils/dist/index.es.js
var import_time5 = __toESM(require_cjs());
var import_window_getters3 = __toESM(require_cjs2());
var import_window_metadata2 = __toESM(require_cjs3());

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress2(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey2({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k15 } = await import("./secp256k1-SCDHHZYZ.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r3, s: s4, v: v7, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v7);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k15.Signature(hexToBigInt(r3), hexToBigInt(s4)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    const yParityOrV = hexToNumber2(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k15.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress2({ hash, signature }) {
  return publicKeyToAddress2(await recoverPublicKey2({ hash, signature }));
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType2 = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction2(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber2(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber2(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType2[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList2(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction2 = defineFormatter2("transaction", formatTransaction2);
function formatAuthorizationList2(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock2(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction2(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock2 = defineFormatter2("block", formatBlock2);

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount2(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex2(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber2(count);
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction2 = 6;
var bytesPerFieldElement2 = 32;
var fieldElementsPerBlob2 = 4096;
var bytesPerBlob2 = bytesPerFieldElement2 * fieldElementsPerBlob2;
var maxBytesPerTransaction2 = bytesPerBlob2 * blobsPerTransaction2 - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob2 * blobsPerTransaction2;

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/formatters/log.js
function formatLog2(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace2 = new LruMap2(128);

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache2 = new LruMap2(8192);

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore2() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache2 = createIdStore2();

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses2 = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt2(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog2(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber2(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses2[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType2[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt2 = defineFormatter2("transactionReceipt", formatTransactionReceipt2);

// ../node_modules/@walletconnect/sign-client/node_modules/@noble/hashes/esm/ripemd160.js
var Rho2 = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id2 = new Uint8Array(new Array(16).fill(0).map((_4, i5) => i5));
var Pi3 = Id2.map((i5) => (9 * i5 + 5) % 16);
var idxL3 = [Id2];
var idxR3 = [Pi3];
for (let i5 = 0; i5 < 4; i5++)
  for (let j4 of [idxL3, idxR3])
    j4.push(j4[i5].map((k7) => Rho2[k7]));
var shifts2 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => new Uint8Array(i5));
var shiftsL2 = idxL3.map((idx, i5) => idx.map((j4) => shifts2[i5][j4]));
var shiftsR2 = idxR3.map((idx, i5) => idx.map((j4) => shifts2[i5][j4]));
var Kl2 = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr4 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f7(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  else if (group === 1)
    return x8 & y7 | ~x8 & z8;
  else if (group === 2)
    return (x8 | ~y7) ^ z8;
  else if (group === 3)
    return x8 & z8 | y7 & ~z8;
  else
    return x8 ^ (y7 | ~z8);
}
var R_BUF2 = new Uint32Array(16);
var RIPEMD1603 = class extends HashMD3 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      R_BUF2[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl2[group], hbr = Kr4[group];
      const rl = idxL3[group], rr4 = idxR3[group];
      const sl = shiftsL2[group], sr4 = shiftsR2[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl3(al + f7(group, bl, cl, dl) + R_BUF2[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl3(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl3(ar4 + f7(rGroup, br4, cr4, dr4) + R_BUF2[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl3(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF2.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1605 = wrapConstructor2(() => new RIPEMD1603());

// ../node_modules/@walletconnect/sign-client/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager2(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap2(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc2() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount2(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager2 = createNonceManager2({
  source: jsonRpc2()
});

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto3 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes4(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function anumber2(n5) {
  if (!Number.isSafeInteger(n5) || n5 < 0)
    throw new Error("positive integer expected, got " + n5);
}
function abytes2(b6, ...lengths) {
  if (!isBytes4(b6))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b6.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b6.length);
}
function aexists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput2(out, instance) {
  abytes2(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u322(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean3(...arrays) {
  for (let i5 = 0; i5 < arrays.length; i5++) {
    arrays[i5].fill(0);
  }
}
function createView2(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr2(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl6(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE2 = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap2(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap322(arr) {
  for (let i5 = 0; i5 < arr.length; i5++) {
    arr[i5] = byteSwap2(arr[i5]);
  }
  return arr;
}
var swap32IfBE2 = isLE2 ? (u4) => u4 : byteSwap322;
var hasHexBuiltin2 = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes3 = Array.from({ length: 256 }, (_4, i5) => i5.toString(16).padStart(2, "0"));
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes5(data) {
  if (typeof data === "string")
    data = utf8ToBytes2(data);
  abytes2(data);
  return data;
}
var Hash2 = class {
};
function createHasher3(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes5(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer2(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes5(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/curves/esm/utils.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/version.js
var version3 = "0.1.1";

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/internal/errors.js
function getVersion3() {
  return version3;
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Errors.js
var BaseError6 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x8) => typeof x8 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion3()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn5) {
    return walk2(this, fn5);
  }
};
function walk2(err, fn5) {
  if (fn5 == null ? void 0 : fn5(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk2(err.cause, fn5);
  return fn5 ? null : err;
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/internal/bytes.js
function assertSize3(bytes, size_) {
  if (size7(bytes) > size_)
    throw new SizeOverflowError4({
      givenSize: size7(bytes),
      maxSize: size_
    });
}
var charCodeMap2 = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase162(char) {
  if (char >= charCodeMap2.zero && char <= charCodeMap2.nine)
    return char - charCodeMap2.zero;
  if (char >= charCodeMap2.A && char <= charCodeMap2.F)
    return char - (charCodeMap2.A - 10);
  if (char >= charCodeMap2.a && char <= charCodeMap2.f)
    return char - (charCodeMap2.a - 10);
  return void 0;
}
function pad5(bytes, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return bytes;
  if (bytes.length > size14)
    throw new SizeExceedsPaddingSizeError4({
      size: bytes.length,
      targetSize: size14,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size14);
  for (let i5 = 0; i5 < size14; i5++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i5 : size14 - i5 - 1] = bytes[padEnd ? i5 : bytes.length - i5 - 1];
  }
  return paddedBytes;
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/internal/hex.js
function assertSize4(hex, size_) {
  if (size8(hex) > size_)
    throw new SizeOverflowError5({
      givenSize: size8(hex),
      maxSize: size_
    });
}
function pad6(hex_, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size14 * 2)
    throw new SizeExceedsPaddingSizeError5({
      size: Math.ceil(hex.length / 2),
      targetSize: size14,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size14 * 2, "0")}`;
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Bytes.js
var decoder2 = new TextDecoder();
var encoder3 = new TextEncoder();
function from9(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex4(value);
  return fromArray2(value);
}
function fromArray2(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex4(value, options = {}) {
  const { size: size14 } = options;
  let hex = value;
  if (size14) {
    assertSize4(value, size14);
    hex = padRight4(value, size14);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index2 = 0, j4 = 0; index2 < length2; index2++) {
    const nibbleLeft = charCodeToBase162(hexString.charCodeAt(j4++));
    const nibbleRight = charCodeToBase162(hexString.charCodeAt(j4++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError6(`Invalid byte sequence ("${hexString[j4 - 2]}${hexString[j4 - 1]}" in "${hexString}").`);
    }
    bytes[index2] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString7(value, options = {}) {
  const { size: size14 } = options;
  const bytes = encoder3.encode(value);
  if (typeof size14 === "number") {
    assertSize3(bytes, size14);
    return padRight5(bytes, size14);
  }
  return bytes;
}
function padRight5(value, size14) {
  return pad5(value, { dir: "right", size: size14 });
}
function size7(value) {
  return value.length;
}
var SizeOverflowError4 = class extends BaseError6 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError4 = class extends BaseError6 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Hex.js
var encoder4 = new TextEncoder();
var hexes4 = Array.from({ length: 256 }, (_v, i5) => i5.toString(16).padStart(2, "0"));
function concat6(...values) {
  return `0x${values.reduce((acc, x8) => acc + x8.replace("0x", ""), "")}`;
}
function fromBoolean3(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize4(hex, options.size);
    return padLeft3(hex, options.size);
  }
  return hex;
}
function fromBytes5(value, options = {}) {
  let string2 = "";
  for (let i5 = 0; i5 < value.length; i5++)
    string2 += hexes4[value[i5]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize4(hex, options.size);
    return padRight4(hex, options.size);
  }
  return hex;
}
function fromNumber3(value, options = {}) {
  const { signed, size: size14 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size14) {
    if (signed)
      maxValue = (1n << BigInt(size14) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size14) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError3({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size14,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size14 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size14)
    return padLeft3(hex, size14);
  return hex;
}
function fromString8(value, options = {}) {
  return fromBytes5(encoder4.encode(value), options);
}
function padLeft3(value, size14) {
  return pad6(value, { dir: "left", size: size14 });
}
function padRight4(value, size14) {
  return pad6(value, { dir: "right", size: size14 });
}
function size8(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError3 = class extends BaseError6 {
  constructor({ max, min, signed, size: size14, value }) {
    super(`Number \`${value}\` is not in safe${size14 ? ` ${size14 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError5 = class extends BaseError6 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError5 = class extends BaseError6 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint642(view, byteOffset, value, isLE4) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE4);
  const _32n4 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n4 & _u32_max);
  const wl = Number(value & _u32_max);
  const h6 = isLE4 ? 4 : 0;
  const l8 = isLE4 ? 0 : 4;
  view.setUint32(byteOffset + h6, wh, isLE4);
  view.setUint32(byteOffset + l8, wl, isLE4);
}
function Chi3(a3, b6, c8) {
  return a3 & b6 ^ ~a3 & c8;
}
function Maj3(a3, b6, c8) {
  return a3 & b6 ^ a3 & c8 ^ b6 & c8;
}
var HashMD6 = class extends Hash2 {
  constructor(blockLen, outputLen, padOffset, isLE4) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE4;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView2(this.buffer);
  }
  update(data) {
    aexists2(this);
    data = toBytes5(data);
    abytes2(data);
    const { view, buffer: buffer2, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView2(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists2(this);
    aoutput2(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE4 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    clean3(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i5 = pos; i5 < blockLen; i5++)
      buffer2[i5] = 0;
    setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE4);
    this.process(view, 0);
    const oview = createView2(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state24 = this.get();
    if (outLen > state24.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i5 = 0; i5 < outLen; i5++)
      oview.setUint32(4 * i5, state24[i5], isLE4);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    to3 || (to3 = new this.constructor());
    to3.set(...this.get());
    const { blockLen, buffer: buffer2, length: length2, finished, destroyed, pos } = this;
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length2;
    to3.pos = pos;
    if (length2 % blockLen)
      to3.buffer.set(buffer2);
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV2 = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV2 = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV2 = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV2 = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV2 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W2 = new Uint32Array(80);
var SHA12 = class extends HashMD6 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV2[0] | 0;
    this.B = SHA1_IV2[1] | 0;
    this.C = SHA1_IV2[2] | 0;
    this.D = SHA1_IV2[3] | 0;
    this.E = SHA1_IV2[4] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    return [A4, B4, C6, D3, E7];
  }
  set(A4, B4, C6, D3, E7) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA1_W2[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 80; i5++)
      SHA1_W2[i5] = rotl6(SHA1_W2[i5 - 3] ^ SHA1_W2[i5 - 8] ^ SHA1_W2[i5 - 14] ^ SHA1_W2[i5 - 16], 1);
    let { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      let F6, K9;
      if (i5 < 20) {
        F6 = Chi3(B4, C6, D3);
        K9 = 1518500249;
      } else if (i5 < 40) {
        F6 = B4 ^ C6 ^ D3;
        K9 = 1859775393;
      } else if (i5 < 60) {
        F6 = Maj3(B4, C6, D3);
        K9 = 2400959708;
      } else {
        F6 = B4 ^ C6 ^ D3;
        K9 = 3395469782;
      }
      const T4 = rotl6(A4, 5) + F6 + E7 + K9 + SHA1_W2[i5] | 0;
      E7 = D3;
      D3 = C6;
      C6 = rotl6(B4, 30);
      B4 = A4;
      A4 = T4;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    this.set(A4, B4, C6, D3, E7);
  }
  roundClean() {
    clean3(SHA1_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var sha12 = createHasher3(() => new SHA12());
var p322 = Math.pow(2, 32);
var K4 = Array.from({ length: 64 }, (_4, i5) => Math.floor(p322 * Math.abs(Math.sin(i5 + 1))));
var MD5_IV2 = SHA1_IV2.slice(0, 4);
var MD5_W2 = new Uint32Array(16);
var MD52 = class extends HashMD6 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV2[0] | 0;
    this.B = MD5_IV2[1] | 0;
    this.C = MD5_IV2[2] | 0;
    this.D = MD5_IV2[3] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3 } = this;
    return [A4, B4, C6, D3];
  }
  set(A4, B4, C6, D3) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      MD5_W2[i5] = view.getUint32(offset, true);
    let { A: A4, B: B4, C: C6, D: D3 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      let F6, g5, s4;
      if (i5 < 16) {
        F6 = Chi3(B4, C6, D3);
        g5 = i5;
        s4 = [7, 12, 17, 22];
      } else if (i5 < 32) {
        F6 = Chi3(D3, B4, C6);
        g5 = (5 * i5 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i5 < 48) {
        F6 = B4 ^ C6 ^ D3;
        g5 = (3 * i5 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F6 = C6 ^ (B4 | ~D3);
        g5 = 7 * i5 % 16;
        s4 = [6, 10, 15, 21];
      }
      F6 = F6 + A4 + K4[i5] + MD5_W2[g5];
      A4 = D3;
      D3 = C6;
      C6 = B4;
      B4 = B4 + rotl6(F6, s4[i5 % 4]);
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A4, B4, C6, D3);
  }
  roundClean() {
    clean3(MD5_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var md52 = createHasher3(() => new MD52());
var Rho1602 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1602 = (() => Uint8Array.from(new Array(16).fill(0).map((_4, i5) => i5)))();
var Pi1602 = (() => Id1602.map((i5) => (9 * i5 + 5) % 16))();
var idxLR2 = (() => {
  const L5 = [Id1602];
  const R3 = [Pi1602];
  const res = [L5, R3];
  for (let i5 = 0; i5 < 4; i5++)
    for (let j4 of res)
      j4.push(j4[i5].map((k7) => Rho1602[k7]));
  return res;
})();
var idxL4 = (() => idxLR2[0])();
var idxR4 = (() => idxLR2[1])();
var shifts1602 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => Uint8Array.from(i5));
var shiftsL1602 = idxL4.map((idx, i5) => idx.map((j4) => shifts1602[i5][j4]));
var shiftsR1602 = idxR4.map((idx, i5) => idx.map((j4) => shifts1602[i5][j4]));
var Kl1602 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1602 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f2(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  if (group === 1)
    return x8 & y7 | ~x8 & z8;
  if (group === 2)
    return (x8 | ~y7) ^ z8;
  if (group === 3)
    return x8 & z8 | y7 & ~z8;
  return x8 ^ (y7 | ~z8);
}
var BUF_1602 = new Uint32Array(16);
var RIPEMD1604 = class extends HashMD6 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      BUF_1602[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1602[group], hbr = Kr1602[group];
      const rl = idxL4[group], rr4 = idxR4[group];
      const sl = shiftsL1602[group], sr4 = shiftsR1602[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl6(al + ripemd_f2(group, bl, cl, dl) + BUF_1602[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl6(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl6(ar4 + ripemd_f2(rGroup, br4, cr4, dr4) + BUF_1602[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl6(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean3(BUF_1602);
  }
  destroy() {
    this.destroyed = true;
    clean3(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1607 = createHasher3(() => new RIPEMD1604());

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK642 = BigInt(2 ** 32 - 1);
var _32n2 = BigInt(32);
function fromBig2(n5, le5 = false) {
  if (le5)
    return { h: Number(n5 & U32_MASK642), l: Number(n5 >> _32n2 & U32_MASK642) };
  return { h: Number(n5 >> _32n2 & U32_MASK642) | 0, l: Number(n5 & U32_MASK642) | 0 };
}
function split2(lst, le5 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i5 = 0; i5 < len; i5++) {
    const { h: h6, l: l8 } = fromBig2(lst[i5], le5);
    [Ah[i5], Al[i5]] = [h6, l8];
  }
  return [Ah, Al];
}
var shrSH2 = (h6, _l, s4) => h6 >>> s4;
var shrSL2 = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrSH2 = (h6, l8, s4) => h6 >>> s4 | l8 << 32 - s4;
var rotrSL2 = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrBH2 = (h6, l8, s4) => h6 << 64 - s4 | l8 >>> s4 - 32;
var rotrBL2 = (h6, l8, s4) => h6 >>> s4 - 32 | l8 << 64 - s4;
var rotlSH2 = (h6, l8, s4) => h6 << s4 | l8 >>> 32 - s4;
var rotlSL2 = (h6, l8, s4) => l8 << s4 | h6 >>> 32 - s4;
var rotlBH2 = (h6, l8, s4) => l8 << s4 - 32 | h6 >>> 64 - s4;
var rotlBL2 = (h6, l8, s4) => h6 << s4 - 32 | l8 >>> 64 - s4;
function add2(Ah, Al, Bh, Bl) {
  const l8 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l8 / 2 ** 32 | 0) | 0, l: l8 | 0 };
}
var add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
var _2n2 = BigInt(2);
var _7n2 = BigInt(7);
var _256n2 = BigInt(256);
var _0x71n2 = BigInt(113);
var SHA3_PI2 = [];
var SHA3_ROTL2 = [];
var _SHA3_IOTA2 = [];
for (let round2 = 0, R3 = _1n4, x8 = 1, y7 = 0; round2 < 24; round2++) {
  [x8, y7] = [y7, (2 * x8 + 3 * y7) % 5];
  SHA3_PI2.push(2 * (5 * y7 + x8));
  SHA3_ROTL2.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t2 = _0n4;
  for (let j4 = 0; j4 < 7; j4++) {
    R3 = (R3 << _1n4 ^ (R3 >> _7n2) * _0x71n2) % _256n2;
    if (R3 & _2n2)
      t2 ^= _1n4 << (_1n4 << BigInt(j4)) - _1n4;
  }
  _SHA3_IOTA2.push(t2);
}
var IOTAS2 = split2(_SHA3_IOTA2, true);
var SHA3_IOTA_H2 = IOTAS2[0];
var SHA3_IOTA_L2 = IOTAS2[1];
var rotlH2 = (h6, l8, s4) => s4 > 32 ? rotlBH2(h6, l8, s4) : rotlSH2(h6, l8, s4);
var rotlL2 = (h6, l8, s4) => s4 > 32 ? rotlBL2(h6, l8, s4) : rotlSL2(h6, l8, s4);
function keccakP2(s4, rounds = 24) {
  const B4 = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x8 = 0; x8 < 10; x8++)
      B4[x8] = s4[x8] ^ s4[x8 + 10] ^ s4[x8 + 20] ^ s4[x8 + 30] ^ s4[x8 + 40];
    for (let x8 = 0; x8 < 10; x8 += 2) {
      const idx1 = (x8 + 8) % 10;
      const idx0 = (x8 + 2) % 10;
      const B0 = B4[idx0];
      const B1 = B4[idx0 + 1];
      const Th = rotlH2(B0, B1, 1) ^ B4[idx1];
      const Tl = rotlL2(B0, B1, 1) ^ B4[idx1 + 1];
      for (let y7 = 0; y7 < 50; y7 += 10) {
        s4[x8 + y7] ^= Th;
        s4[x8 + y7 + 1] ^= Tl;
      }
    }
    let curH = s4[2];
    let curL = s4[3];
    for (let t2 = 0; t2 < 24; t2++) {
      const shift = SHA3_ROTL2[t2];
      const Th = rotlH2(curH, curL, shift);
      const Tl = rotlL2(curH, curL, shift);
      const PI = SHA3_PI2[t2];
      curH = s4[PI];
      curL = s4[PI + 1];
      s4[PI] = Th;
      s4[PI + 1] = Tl;
    }
    for (let y7 = 0; y7 < 50; y7 += 10) {
      for (let x8 = 0; x8 < 10; x8++)
        B4[x8] = s4[y7 + x8];
      for (let x8 = 0; x8 < 10; x8++)
        s4[y7 + x8] ^= ~B4[(x8 + 2) % 10] & B4[(x8 + 4) % 10];
    }
    s4[0] ^= SHA3_IOTA_H2[round2];
    s4[1] ^= SHA3_IOTA_L2[round2];
  }
  clean3(B4);
}
var Keccak2 = class _Keccak extends Hash2 {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber2(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u322(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE2(this.state32);
    keccakP2(this.state32, this.rounds);
    swap32IfBE2(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists2(this);
    data = toBytes5(data);
    abytes2(data);
    const { blockLen, state: state24 } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i5 = 0; i5 < take; i5++)
        state24[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state24, suffix, pos, blockLen } = this;
    state24[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state24[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists2(this, false);
    abytes2(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber2(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput2(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean3(this.state);
  }
  _cloneInto(to3) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to3 || (to3 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to3.state32.set(this.state32);
    to3.pos = this.pos;
    to3.posOut = this.posOut;
    to3.finished = this.finished;
    to3.rounds = rounds;
    to3.suffix = suffix;
    to3.outputLen = outputLen;
    to3.enableXOF = enableXOF;
    to3.destroyed = this.destroyed;
    return to3;
  }
};
var gen2 = (suffix, blockLen, outputLen) => createHasher3(() => new Keccak2(blockLen, suffix, outputLen));
var sha3_2242 = (() => gen2(6, 144, 224 / 8))();
var sha3_2562 = (() => gen2(6, 136, 256 / 8))();
var sha3_3842 = (() => gen2(6, 104, 384 / 8))();
var sha3_5122 = (() => gen2(6, 72, 512 / 8))();
var keccak_2242 = (() => gen2(1, 144, 224 / 8))();
var keccak_2563 = (() => gen2(1, 136, 256 / 8))();
var keccak_3842 = (() => gen2(1, 104, 384 / 8))();
var keccak_5122 = (() => gen2(1, 72, 512 / 8))();
var genShake2 = (suffix, blockLen, outputLen) => createXOFer2((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake1282 = (() => genShake2(31, 168, 128 / 8))();
var shake2562 = (() => genShake2(31, 136, 256 / 8))();

// ../node_modules/@walletconnect/sign-client/node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K2 = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W2 = new Uint32Array(64);
var SHA2562 = class extends HashMD6 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV2[0] | 0;
    this.B = SHA256_IV2[1] | 0;
    this.C = SHA256_IV2[2] | 0;
    this.D = SHA256_IV2[3] | 0;
    this.E = SHA256_IV2[4] | 0;
    this.F = SHA256_IV2[5] | 0;
    this.G = SHA256_IV2[6] | 0;
    this.H = SHA256_IV2[7] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    return [A4, B4, C6, D3, E7, F6, G4, H5];
  }
  // prettier-ignore
  set(A4, B4, C6, D3, E7, F6, G4, H5) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
    this.F = F6 | 0;
    this.G = G4 | 0;
    this.H = H5 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA256_W2[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 64; i5++) {
      const W15 = SHA256_W2[i5 - 15];
      const W22 = SHA256_W2[i5 - 2];
      const s0 = rotr2(W15, 7) ^ rotr2(W15, 18) ^ W15 >>> 3;
      const s1 = rotr2(W22, 17) ^ rotr2(W22, 19) ^ W22 >>> 10;
      SHA256_W2[i5] = s1 + SHA256_W2[i5 - 7] + s0 + SHA256_W2[i5 - 16] | 0;
    }
    let { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      const sigma1 = rotr2(E7, 6) ^ rotr2(E7, 11) ^ rotr2(E7, 25);
      const T1 = H5 + sigma1 + Chi3(E7, F6, G4) + SHA256_K2[i5] + SHA256_W2[i5] | 0;
      const sigma0 = rotr2(A4, 2) ^ rotr2(A4, 13) ^ rotr2(A4, 22);
      const T22 = sigma0 + Maj3(A4, B4, C6) | 0;
      H5 = G4;
      G4 = F6;
      F6 = E7;
      E7 = D3 + T1 | 0;
      D3 = C6;
      C6 = B4;
      B4 = A4;
      A4 = T1 + T22 | 0;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    F6 = F6 + this.F | 0;
    G4 = G4 + this.G | 0;
    H5 = H5 + this.H | 0;
    this.set(A4, B4, C6, D3, E7, F6, G4, H5);
  }
  roundClean() {
    clean3(SHA256_W2);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean3(this.buffer);
  }
};
var SHA2242 = class extends SHA2562 {
  constructor() {
    super(28);
    this.A = SHA224_IV2[0] | 0;
    this.B = SHA224_IV2[1] | 0;
    this.C = SHA224_IV2[2] | 0;
    this.D = SHA224_IV2[3] | 0;
    this.E = SHA224_IV2[4] | 0;
    this.F = SHA224_IV2[5] | 0;
    this.G = SHA224_IV2[6] | 0;
    this.H = SHA224_IV2[7] | 0;
  }
};
var K5122 = (() => split2([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n5) => BigInt(n5))))();
var SHA512_Kh2 = (() => K5122[0])();
var SHA512_Kl2 = (() => K5122[1])();
var SHA512_W_H2 = new Uint32Array(80);
var SHA512_W_L2 = new Uint32Array(80);
var SHA5122 = class extends HashMD6 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV2[0] | 0;
    this.Al = SHA512_IV2[1] | 0;
    this.Bh = SHA512_IV2[2] | 0;
    this.Bl = SHA512_IV2[3] | 0;
    this.Ch = SHA512_IV2[4] | 0;
    this.Cl = SHA512_IV2[5] | 0;
    this.Dh = SHA512_IV2[6] | 0;
    this.Dl = SHA512_IV2[7] | 0;
    this.Eh = SHA512_IV2[8] | 0;
    this.El = SHA512_IV2[9] | 0;
    this.Fh = SHA512_IV2[10] | 0;
    this.Fl = SHA512_IV2[11] | 0;
    this.Gh = SHA512_IV2[12] | 0;
    this.Gl = SHA512_IV2[13] | 0;
    this.Hh = SHA512_IV2[14] | 0;
    this.Hl = SHA512_IV2[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4) {
      SHA512_W_H2[i5] = view.getUint32(offset);
      SHA512_W_L2[i5] = view.getUint32(offset += 4);
    }
    for (let i5 = 16; i5 < 80; i5++) {
      const W15h = SHA512_W_H2[i5 - 15] | 0;
      const W15l = SHA512_W_L2[i5 - 15] | 0;
      const s0h = rotrSH2(W15h, W15l, 1) ^ rotrSH2(W15h, W15l, 8) ^ shrSH2(W15h, W15l, 7);
      const s0l = rotrSL2(W15h, W15l, 1) ^ rotrSL2(W15h, W15l, 8) ^ shrSL2(W15h, W15l, 7);
      const W2h = SHA512_W_H2[i5 - 2] | 0;
      const W2l = SHA512_W_L2[i5 - 2] | 0;
      const s1h = rotrSH2(W2h, W2l, 19) ^ rotrBH2(W2h, W2l, 61) ^ shrSH2(W2h, W2l, 6);
      const s1l = rotrSL2(W2h, W2l, 19) ^ rotrBL2(W2h, W2l, 61) ^ shrSL2(W2h, W2l, 6);
      const SUMl = add4L2(s0l, s1l, SHA512_W_L2[i5 - 7], SHA512_W_L2[i5 - 16]);
      const SUMh = add4H2(SUMl, s0h, s1h, SHA512_W_H2[i5 - 7], SHA512_W_H2[i5 - 16]);
      SHA512_W_H2[i5] = SUMh | 0;
      SHA512_W_L2[i5] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      const sigma1h = rotrSH2(Eh, El, 14) ^ rotrSH2(Eh, El, 18) ^ rotrBH2(Eh, El, 41);
      const sigma1l = rotrSL2(Eh, El, 14) ^ rotrSL2(Eh, El, 18) ^ rotrBL2(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L2(Hl, sigma1l, CHIl, SHA512_Kl2[i5], SHA512_W_L2[i5]);
      const T1h = add5H2(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i5], SHA512_W_H2[i5]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH2(Ah, Al, 28) ^ rotrBH2(Ah, Al, 34) ^ rotrBH2(Ah, Al, 39);
      const sigma0l = rotrSL2(Ah, Al, 28) ^ rotrBL2(Ah, Al, 34) ^ rotrBL2(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add2(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L2(T1l, sigma0l, MAJl);
      Ah = add3H2(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add2(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add2(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add2(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add2(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add2(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add2(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add2(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add2(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean3(SHA512_W_H2, SHA512_W_L2);
  }
  destroy() {
    clean3(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA3842 = class extends SHA5122 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV2[0] | 0;
    this.Al = SHA384_IV2[1] | 0;
    this.Bh = SHA384_IV2[2] | 0;
    this.Bl = SHA384_IV2[3] | 0;
    this.Ch = SHA384_IV2[4] | 0;
    this.Cl = SHA384_IV2[5] | 0;
    this.Dh = SHA384_IV2[6] | 0;
    this.Dl = SHA384_IV2[7] | 0;
    this.Eh = SHA384_IV2[8] | 0;
    this.El = SHA384_IV2[9] | 0;
    this.Fh = SHA384_IV2[10] | 0;
    this.Fl = SHA384_IV2[11] | 0;
    this.Gh = SHA384_IV2[12] | 0;
    this.Gl = SHA384_IV2[13] | 0;
    this.Hh = SHA384_IV2[14] | 0;
    this.Hl = SHA384_IV2[15] | 0;
  }
};
var T224_IV2 = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV2 = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_2242 = class extends SHA5122 {
  constructor() {
    super(28);
    this.Ah = T224_IV2[0] | 0;
    this.Al = T224_IV2[1] | 0;
    this.Bh = T224_IV2[2] | 0;
    this.Bl = T224_IV2[3] | 0;
    this.Ch = T224_IV2[4] | 0;
    this.Cl = T224_IV2[5] | 0;
    this.Dh = T224_IV2[6] | 0;
    this.Dl = T224_IV2[7] | 0;
    this.Eh = T224_IV2[8] | 0;
    this.El = T224_IV2[9] | 0;
    this.Fh = T224_IV2[10] | 0;
    this.Fl = T224_IV2[11] | 0;
    this.Gh = T224_IV2[12] | 0;
    this.Gl = T224_IV2[13] | 0;
    this.Hh = T224_IV2[14] | 0;
    this.Hl = T224_IV2[15] | 0;
  }
};
var SHA512_2562 = class extends SHA5122 {
  constructor() {
    super(32);
    this.Ah = T256_IV2[0] | 0;
    this.Al = T256_IV2[1] | 0;
    this.Bh = T256_IV2[2] | 0;
    this.Bl = T256_IV2[3] | 0;
    this.Ch = T256_IV2[4] | 0;
    this.Cl = T256_IV2[5] | 0;
    this.Dh = T256_IV2[6] | 0;
    this.Dl = T256_IV2[7] | 0;
    this.Eh = T256_IV2[8] | 0;
    this.El = T256_IV2[9] | 0;
    this.Fh = T256_IV2[10] | 0;
    this.Fl = T256_IV2[11] | 0;
    this.Gh = T256_IV2[12] | 0;
    this.Gl = T256_IV2[13] | 0;
    this.Hh = T256_IV2[14] | 0;
    this.Hl = T256_IV2[15] | 0;
  }
};
var sha2569 = createHasher3(() => new SHA2562());
var sha2242 = createHasher3(() => new SHA2242());
var sha5123 = createHasher3(() => new SHA5122());
var sha3842 = createHasher3(() => new SHA3842());
var sha512_2562 = createHasher3(() => new SHA512_2562());
var sha512_2242 = createHasher3(() => new SHA512_2242());

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Hash.js
function keccak2564(value, options = {}) {
  const { as: as4 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_2563(from9(value));
  if (as4 === "Bytes")
    return bytes;
  return fromBytes5(bytes);
}

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/internal/lru.js
var LruMap6 = class extends Map {
  constructor(size14) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size14;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Caches.js
var caches2 = {
  checksum: new LruMap6(8192)
};
var checksum3 = caches2.checksum;

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Address.js
var addressRegex2 = /^0x[a-fA-F0-9]{40}$/;
function assert2(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex2.test(value))
    throw new InvalidAddressError5({
      address: value,
      cause: new InvalidInputError2()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum4(value) !== value)
      throw new InvalidAddressError5({
        address: value,
        cause: new InvalidChecksumError2()
      });
  }
}
function checksum4(address) {
  if (checksum3.has(address))
    return checksum3.get(address);
  assert2(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2564(fromString7(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i5 = 0; i5 < 40; i5 += 2) {
    if (hash[i5 >> 1] >> 4 >= 8 && characters[i5]) {
      characters[i5] = characters[i5].toUpperCase();
    }
    if ((hash[i5 >> 1] & 15) >= 8 && characters[i5 + 1]) {
      characters[i5 + 1] = characters[i5 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum3.set(address, result);
  return result;
}
var InvalidAddressError5 = class extends BaseError6 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError2 = class extends BaseError6 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError2 = class extends BaseError6 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/Solidity.js
var arrayRegex4 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex4 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex4 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt83 = 2n ** (8n - 1n) - 1n;
var maxInt163 = 2n ** (16n - 1n) - 1n;
var maxInt243 = 2n ** (24n - 1n) - 1n;
var maxInt323 = 2n ** (32n - 1n) - 1n;
var maxInt403 = 2n ** (40n - 1n) - 1n;
var maxInt483 = 2n ** (48n - 1n) - 1n;
var maxInt563 = 2n ** (56n - 1n) - 1n;
var maxInt643 = 2n ** (64n - 1n) - 1n;
var maxInt723 = 2n ** (72n - 1n) - 1n;
var maxInt803 = 2n ** (80n - 1n) - 1n;
var maxInt883 = 2n ** (88n - 1n) - 1n;
var maxInt963 = 2n ** (96n - 1n) - 1n;
var maxInt1043 = 2n ** (104n - 1n) - 1n;
var maxInt1123 = 2n ** (112n - 1n) - 1n;
var maxInt1203 = 2n ** (120n - 1n) - 1n;
var maxInt1283 = 2n ** (128n - 1n) - 1n;
var maxInt1363 = 2n ** (136n - 1n) - 1n;
var maxInt1443 = 2n ** (144n - 1n) - 1n;
var maxInt1523 = 2n ** (152n - 1n) - 1n;
var maxInt1603 = 2n ** (160n - 1n) - 1n;
var maxInt1683 = 2n ** (168n - 1n) - 1n;
var maxInt1763 = 2n ** (176n - 1n) - 1n;
var maxInt1843 = 2n ** (184n - 1n) - 1n;
var maxInt1923 = 2n ** (192n - 1n) - 1n;
var maxInt2003 = 2n ** (200n - 1n) - 1n;
var maxInt2083 = 2n ** (208n - 1n) - 1n;
var maxInt2163 = 2n ** (216n - 1n) - 1n;
var maxInt2243 = 2n ** (224n - 1n) - 1n;
var maxInt2323 = 2n ** (232n - 1n) - 1n;
var maxInt2403 = 2n ** (240n - 1n) - 1n;
var maxInt2483 = 2n ** (248n - 1n) - 1n;
var maxInt2563 = 2n ** (256n - 1n) - 1n;
var minInt83 = -(2n ** (8n - 1n));
var minInt163 = -(2n ** (16n - 1n));
var minInt243 = -(2n ** (24n - 1n));
var minInt323 = -(2n ** (32n - 1n));
var minInt403 = -(2n ** (40n - 1n));
var minInt483 = -(2n ** (48n - 1n));
var minInt563 = -(2n ** (56n - 1n));
var minInt643 = -(2n ** (64n - 1n));
var minInt723 = -(2n ** (72n - 1n));
var minInt803 = -(2n ** (80n - 1n));
var minInt883 = -(2n ** (88n - 1n));
var minInt963 = -(2n ** (96n - 1n));
var minInt1043 = -(2n ** (104n - 1n));
var minInt1123 = -(2n ** (112n - 1n));
var minInt1203 = -(2n ** (120n - 1n));
var minInt1283 = -(2n ** (128n - 1n));
var minInt1363 = -(2n ** (136n - 1n));
var minInt1443 = -(2n ** (144n - 1n));
var minInt1523 = -(2n ** (152n - 1n));
var minInt1603 = -(2n ** (160n - 1n));
var minInt1683 = -(2n ** (168n - 1n));
var minInt1763 = -(2n ** (176n - 1n));
var minInt1843 = -(2n ** (184n - 1n));
var minInt1923 = -(2n ** (192n - 1n));
var minInt2003 = -(2n ** (200n - 1n));
var minInt2083 = -(2n ** (208n - 1n));
var minInt2163 = -(2n ** (216n - 1n));
var minInt2243 = -(2n ** (224n - 1n));
var minInt2323 = -(2n ** (232n - 1n));
var minInt2403 = -(2n ** (240n - 1n));
var minInt2483 = -(2n ** (248n - 1n));
var minInt2563 = -(2n ** (256n - 1n));
var maxUint83 = 2n ** 8n - 1n;
var maxUint163 = 2n ** 16n - 1n;
var maxUint243 = 2n ** 24n - 1n;
var maxUint323 = 2n ** 32n - 1n;
var maxUint403 = 2n ** 40n - 1n;
var maxUint483 = 2n ** 48n - 1n;
var maxUint563 = 2n ** 56n - 1n;
var maxUint643 = 2n ** 64n - 1n;
var maxUint723 = 2n ** 72n - 1n;
var maxUint803 = 2n ** 80n - 1n;
var maxUint883 = 2n ** 88n - 1n;
var maxUint963 = 2n ** 96n - 1n;
var maxUint1043 = 2n ** 104n - 1n;
var maxUint1123 = 2n ** 112n - 1n;
var maxUint1203 = 2n ** 120n - 1n;
var maxUint1283 = 2n ** 128n - 1n;
var maxUint1363 = 2n ** 136n - 1n;
var maxUint1443 = 2n ** 144n - 1n;
var maxUint1523 = 2n ** 152n - 1n;
var maxUint1603 = 2n ** 160n - 1n;
var maxUint1683 = 2n ** 168n - 1n;
var maxUint1763 = 2n ** 176n - 1n;
var maxUint1843 = 2n ** 184n - 1n;
var maxUint1923 = 2n ** 192n - 1n;
var maxUint2003 = 2n ** 200n - 1n;
var maxUint2083 = 2n ** 208n - 1n;
var maxUint2163 = 2n ** 216n - 1n;
var maxUint2243 = 2n ** 224n - 1n;
var maxUint2323 = 2n ** 232n - 1n;
var maxUint2403 = 2n ** 240n - 1n;
var maxUint2483 = 2n ** 248n - 1n;
var maxUint2565 = 2n ** 256n - 1n;

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor2 = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError2({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError4({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError2({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size14) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size14 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError2 = class extends BaseError6 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError4 = class extends BaseError6 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError2 = class extends BaseError6 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked4(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError2({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i5 = 0; i5 < types.length; i5++) {
    const type = types[i5];
    const value = values[i5];
    data.push(encodePacked4.encode(type, value));
  }
  return concat6(...data);
}
(function(encodePacked9) {
  function encode17(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert2(address);
      return padLeft3(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString8(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft3(fromBoolean3(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex4);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size14 = Number.parseInt(bits) / 8;
      return fromNumber3(value, {
        size: isArray ? 32 : size14,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex4);
    if (bytesMatch) {
      const [_type, size14] = bytesMatch;
      if (Number.parseInt(size14) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError4({
          expectedSize: Number.parseInt(size14),
          value
        });
      return padRight4(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex4);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i5 = 0; i5 < value.length; i5++) {
        data.push(encode17(childType, value[i5], true));
      }
      if (data.length === 0)
        return "0x";
      return concat6(...data);
    }
    throw new InvalidTypeError2(type);
  }
  encodePacked9.encode = encode17;
})(encodePacked4 || (encodePacked4 = {}));
var BytesSizeMismatchError4 = class extends BaseError6 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size8(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError2 = class extends BaseError6 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError2 = class extends BaseError6 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../node_modules/@walletconnect/sign-client/node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic2 = __toESM(require_elliptic());
var Pe3 = ":";
function Ye3(e3) {
  const [t2, n5] = e3.split(Pe3);
  return { namespace: t2, reference: n5 };
}
function Be3(e3, t2) {
  return e3.includes(":") ? [e3] : t2.chains || [];
}
var Ft4 = "ReactNative";
var H3 = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
function et2() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function ne2() {
  return !(0, import_window_getters3.getDocument)() && !!(0, import_window_getters3.getNavigator)() && navigator.product === Ft4;
}
function Ae3() {
  return !et2() && !!(0, import_window_getters3.getNavigator)() && !!(0, import_window_getters3.getDocument)();
}
function ue3() {
  return ne2() ? H3.reactNative : et2() ? H3.node : Ae3() ? H3.browser : H3.unknown;
}
function Xr4() {
  return (0, import_window_metadata2.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function re2(e3, t2) {
  return e3.filter((n5) => t2.includes(n5)).length === e3.length;
}
function ao4(e3 = import_time5.FIVE_MINUTES, t2) {
  const n5 = (0, import_time5.toMiliseconds)(e3 || import_time5.FIVE_MINUTES);
  let r3, o6, s4, i5;
  return { resolve: (c8) => {
    s4 && r3 && (clearTimeout(s4), r3(c8), i5 = Promise.resolve(c8));
  }, reject: (c8) => {
    s4 && o6 && (clearTimeout(s4), o6(c8));
  }, done: () => new Promise((c8, u4) => {
    if (i5) return c8(i5);
    s4 = setTimeout(() => {
      const a3 = new Error(t2);
      i5 = Promise.reject(a3), u4(a3);
    }, n5), r3 = c8, o6 = u4;
  }) };
}
function ho4(e3) {
  const [t2, n5] = e3.split(":"), r3 = { id: void 0, topic: void 0 };
  if (t2 === "topic" && typeof n5 == "string") r3.topic = n5;
  else if (t2 === "id" && Number.isInteger(Number(n5))) r3.id = Number(n5);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${t2}:${n5}`);
  return r3;
}
function po4(e3, t2) {
  return (0, import_time5.fromMiliseconds)((t2 || Date.now()) + (0, import_time5.toMiliseconds)(e3));
}
function go4(e3) {
  return Date.now() >= (0, import_time5.toMiliseconds)(e3);
}
function yo4(e3, t2) {
  return `${e3}${t2 ? `:${t2}` : ""}`;
}
function Q3(e3 = [], t2 = []) {
  return [.../* @__PURE__ */ new Set([...e3, ...t2])];
}
async function mo3({ id: e3, topic: t2, wcDeepLink: n5 }) {
  var r3;
  try {
    if (!n5) return;
    const o6 = typeof n5 == "string" ? JSON.parse(n5) : n5, s4 = o6 == null ? void 0 : o6.href;
    if (typeof s4 != "string") return;
    const i5 = en3(s4, e3, t2), c8 = ue3();
    if (c8 === H3.browser) {
      if (!((r3 = (0, import_window_getters3.getDocument)()) != null && r3.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      tn2(i5);
    } else c8 === H3.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(i5);
  } catch (o6) {
    console.error(o6);
  }
}
function en3(e3, t2, n5) {
  const r3 = `requestId=${t2}&sessionTopic=${n5}`;
  e3.endsWith("/") && (e3 = e3.slice(0, -1));
  let o6 = `${e3}`;
  if (e3.startsWith("https://t.me")) {
    const s4 = e3.includes("?") ? "&startapp=" : "?startapp=";
    o6 = `${o6}${s4}${on3(r3, true)}`;
  } else o6 = `${o6}/wc?${r3}`;
  return o6;
}
function tn2(e3) {
  let t2 = "_self";
  rn3() ? t2 = "_top" : (nn3() || e3.startsWith("https://") || e3.startsWith("http://")) && (t2 = "_blank"), window.open(e3, t2, "noreferrer noopener");
}
async function bo3(e3, t2) {
  let n5 = "";
  try {
    if (Ae3() && (n5 = localStorage.getItem(t2), n5)) return n5;
    n5 = await e3.getItem(t2);
  } catch (r3) {
    console.error(r3);
  }
  return n5;
}
function wo3(e3, t2) {
  if (!e3.includes(t2)) return null;
  const n5 = e3.split(/([&,?,=])/), r3 = n5.indexOf(t2);
  return n5[r3 + 2];
}
function vo4() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function nn3() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function rn3() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function on3(e3, t2 = false) {
  const n5 = Buffer.from(e3).toString("base64");
  return t2 ? n5.replace(/[=]/g, "") : n5;
}
function Ne3(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Io4(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function je4(e3, ...t2) {
  if (!Io4(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function ot2(e3) {
  if (typeof e3 != "function" || typeof e3.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Ne3(e3.outputLen), Ne3(e3.blockLen);
}
function me3(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function sn4(e3, t2) {
  je4(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var Ce4 = BigInt(2 ** 32 - 1);
var cn3 = BigInt(32);
function Oo4(e3, t2 = false) {
  return t2 ? { h: Number(e3 & Ce4), l: Number(e3 >> cn3 & Ce4) } : { h: Number(e3 >> cn3 & Ce4) | 0, l: Number(e3 & Ce4) | 0 };
}
function Ao4(e3, t2 = false) {
  let n5 = new Uint32Array(e3.length), r3 = new Uint32Array(e3.length);
  for (let o6 = 0; o6 < e3.length; o6++) {
    const { h: s4, l: i5 } = Oo4(e3[o6], t2);
    [n5[o6], r3[o6]] = [s4, i5];
  }
  return [n5, r3];
}
var No4 = (e3, t2, n5) => e3 << n5 | t2 >>> 32 - n5;
var So4 = (e3, t2, n5) => t2 << n5 | e3 >>> 32 - n5;
var Uo4 = (e3, t2, n5) => t2 << n5 - 32 | e3 >>> 64 - n5;
var _o4 = (e3, t2, n5) => e3 << n5 - 32 | t2 >>> 64 - n5;
var be4 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function To4(e3) {
  return new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
}
function st2(e3) {
  return new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
}
function J4(e3, t2) {
  return e3 << 32 - t2 | e3 >>> t2;
}
var an3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function $o4(e3) {
  return e3 << 24 & 4278190080 | e3 << 8 & 16711680 | e3 >>> 8 & 65280 | e3 >>> 24 & 255;
}
function un3(e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2] = $o4(e3[t2]);
}
function Ro4(e3) {
  if (typeof e3 != "string") throw new Error("utf8ToBytes expected string, got " + typeof e3);
  return new Uint8Array(new TextEncoder().encode(e3));
}
function we3(e3) {
  return typeof e3 == "string" && (e3 = Ro4(e3)), je4(e3), e3;
}
var it4 = class {
  clone() {
    return this._cloneInto();
  }
};
function fn3(e3) {
  const t2 = (r3) => e3().update(we3(r3)).digest(), n5 = e3();
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = () => e3(), t2;
}
function Se4(e3 = 32) {
  if (be4 && typeof be4.getRandomValues == "function") return be4.getRandomValues(new Uint8Array(e3));
  if (be4 && typeof be4.randomBytes == "function") return be4.randomBytes(e3);
  throw new Error("crypto.getRandomValues must be defined");
}
var ln3 = [];
var dn3 = [];
var hn3 = [];
var Po4 = BigInt(0);
var Ue4 = BigInt(1);
var Bo4 = BigInt(2);
var Lo4 = BigInt(7);
var jo4 = BigInt(256);
var Co4 = BigInt(113);
for (let e3 = 0, t2 = Ue4, n5 = 1, r3 = 0; e3 < 24; e3++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], ln3.push(2 * (5 * r3 + n5)), dn3.push((e3 + 1) * (e3 + 2) / 2 % 64);
  let o6 = Po4;
  for (let s4 = 0; s4 < 7; s4++) t2 = (t2 << Ue4 ^ (t2 >> Lo4) * Co4) % jo4, t2 & Bo4 && (o6 ^= Ue4 << (Ue4 << BigInt(s4)) - Ue4);
  hn3.push(o6);
}
var [ko4, Do4] = Ao4(hn3, true);
var pn3 = (e3, t2, n5) => n5 > 32 ? Uo4(e3, t2, n5) : No4(e3, t2, n5);
var gn4 = (e3, t2, n5) => n5 > 32 ? _o4(e3, t2, n5) : So4(e3, t2, n5);
function Mo4(e3, t2 = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - t2; r3 < 24; r3++) {
    for (let i5 = 0; i5 < 10; i5++) n5[i5] = e3[i5] ^ e3[i5 + 10] ^ e3[i5 + 20] ^ e3[i5 + 30] ^ e3[i5 + 40];
    for (let i5 = 0; i5 < 10; i5 += 2) {
      const c8 = (i5 + 8) % 10, u4 = (i5 + 2) % 10, a3 = n5[u4], l8 = n5[u4 + 1], f10 = pn3(a3, l8, 1) ^ n5[c8], d6 = gn4(a3, l8, 1) ^ n5[c8 + 1];
      for (let g5 = 0; g5 < 50; g5 += 10) e3[i5 + g5] ^= f10, e3[i5 + g5 + 1] ^= d6;
    }
    let o6 = e3[2], s4 = e3[3];
    for (let i5 = 0; i5 < 24; i5++) {
      const c8 = dn3[i5], u4 = pn3(o6, s4, c8), a3 = gn4(o6, s4, c8), l8 = ln3[i5];
      o6 = e3[l8], s4 = e3[l8 + 1], e3[l8] = u4, e3[l8 + 1] = a3;
    }
    for (let i5 = 0; i5 < 50; i5 += 10) {
      for (let c8 = 0; c8 < 10; c8++) n5[c8] = e3[i5 + c8];
      for (let c8 = 0; c8 < 10; c8++) e3[i5 + c8] ^= ~n5[(c8 + 2) % 10] & n5[(c8 + 4) % 10];
    }
    e3[0] ^= ko4[r3], e3[1] ^= Do4[r3];
  }
  n5.fill(0);
}
var Lt4 = class _Lt extends it4 {
  constructor(t2, n5, r3, o6 = false, s4 = 24) {
    if (super(), this.blockLen = t2, this.suffix = n5, this.outputLen = r3, this.enableXOF = o6, this.rounds = s4, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Ne3(r3), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = To4(this.state);
  }
  keccak() {
    an3 || un3(this.state32), Mo4(this.state32, this.rounds), an3 || un3(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t2) {
    me3(this);
    const { blockLen: n5, state: r3 } = this;
    t2 = we3(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(n5 - this.pos, o6 - s4);
      for (let c8 = 0; c8 < i5; c8++) r3[this.pos++] ^= t2[s4++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: t2, suffix: n5, pos: r3, blockLen: o6 } = this;
    t2[r3] ^= n5, (n5 & 128) !== 0 && r3 === o6 - 1 && this.keccak(), t2[o6 - 1] ^= 128, this.keccak();
  }
  writeInto(t2) {
    me3(this, false), je4(t2), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o6 = 0, s4 = t2.length; o6 < s4; ) {
      this.posOut >= r3 && this.keccak();
      const i5 = Math.min(r3 - this.posOut, s4 - o6);
      t2.set(n5.subarray(this.posOut, this.posOut + i5), o6), this.posOut += i5, o6 += i5;
    }
    return t2;
  }
  xofInto(t2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(t2);
  }
  xof(t2) {
    return Ne3(t2), this.xofInto(new Uint8Array(t2));
  }
  digestInto(t2) {
    if (sn4(t2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(t2), this.destroy(), t2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(t2) {
    const { blockLen: n5, suffix: r3, outputLen: o6, rounds: s4, enableXOF: i5 } = this;
    return t2 || (t2 = new _Lt(n5, r3, o6, i5, s4)), t2.state32.set(this.state32), t2.pos = this.pos, t2.posOut = this.posOut, t2.finished = this.finished, t2.rounds = s4, t2.suffix = r3, t2.outputLen = o6, t2.enableXOF = i5, t2.destroyed = this.destroyed, t2;
  }
};
var Vo4 = (e3, t2, n5) => fn3(() => new Lt4(t2, e3, n5));
var Ho4 = Vo4(1, 136, 256 / 8);
var Ko3 = "https://rpc.walletconnect.org/v1";
function ct2(e3) {
  const t2 = `Ethereum Signed Message:
${e3.length}`, n5 = new TextEncoder().encode(t2 + e3);
  return "0x" + Buffer.from(Ho4(n5)).toString("hex");
}
async function yn3(e3, t2, n5, r3, o6, s4) {
  switch (n5.t) {
    case "eip191":
      return await mn3(e3, t2, n5.s);
    case "eip1271":
      return await bn3(e3, t2, n5.s, r3, o6, s4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n5.t}`);
  }
}
async function mn3(e3, t2, n5) {
  return (await recoverAddress2({ hash: ct2(t2), signature: n5 })).toLowerCase() === e3.toLowerCase();
}
async function bn3(e3, t2, n5, r3, o6, s4) {
  const i5 = Ye3(r3);
  if (!i5.namespace || !i5.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r3}`);
  try {
    const c8 = "0x1626ba7e", u4 = "0000000000000000000000000000000000000000000000000000000000000040", a3 = "0000000000000000000000000000000000000000000000000000000000000041", l8 = n5.substring(2), f10 = ct2(t2).substring(2), d6 = c8 + f10 + u4 + a3 + l8, g5 = await fetch(`${s4 || Ko3}/?chainId=${r3}&projectId=${o6}`, { method: "POST", body: JSON.stringify({ id: Fo3(), jsonrpc: "2.0", method: "eth_call", params: [{ to: e3, data: d6 }, "latest"] }) }), { result: y7 } = await g5.json();
    return y7 ? y7.slice(0, c8.length).toLowerCase() === c8.toLowerCase() : false;
  } catch (c8) {
    return console.error("isValidEip1271Signature: ", c8), false;
  }
}
function Fo3() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function qo3(e3) {
  const t2 = atob(e3), n5 = new Uint8Array(t2.length);
  for (let i5 = 0; i5 < t2.length; i5++) n5[i5] = t2.charCodeAt(i5);
  const r3 = n5[0];
  if (r3 === 0) throw new Error("No signatures found");
  const o6 = 1 + r3 * 64;
  if (n5.length < o6) throw new Error("Transaction data too short for claimed signature count");
  if (n5.length < 100) throw new Error("Transaction too short");
  const s4 = Buffer.from(e3, "base64").slice(1, 65);
  return esm_default.encode(s4);
}
var Go3 = Object.defineProperty;
var Wo3 = Object.defineProperties;
var zo3 = Object.getOwnPropertyDescriptors;
var wn2 = Object.getOwnPropertySymbols;
var Jo3 = Object.prototype.hasOwnProperty;
var Yo3 = Object.prototype.propertyIsEnumerable;
var En3 = (e3, t2, n5) => t2 in e3 ? Go3(e3, t2, { enumerable: true, configurable: true, writable: true, value: n5 }) : e3[t2] = n5;
var at = (e3, t2) => {
  for (var n5 in t2 || (t2 = {})) Jo3.call(t2, n5) && En3(e3, n5, t2[n5]);
  if (wn2) for (var n5 of wn2(t2)) Yo3.call(t2, n5) && En3(e3, n5, t2[n5]);
  return e3;
};
var vn3 = (e3, t2) => Wo3(e3, zo3(t2));
var Xo = "did:pkh:";
var ke3 = (e3) => e3 == null ? void 0 : e3.split(":");
var xn3 = (e3) => {
  const t2 = e3 && ke3(e3);
  if (t2) return e3.includes(Xo) ? t2[3] : t2[1];
};
var In3 = (e3) => {
  const t2 = e3 && ke3(e3);
  if (t2) return t2[2] + ":" + t2[3];
};
var ut2 = (e3) => {
  const t2 = e3 && ke3(e3);
  if (t2) return t2.pop();
};
async function Zo2(e3) {
  const { cacao: t2, projectId: n5 } = e3, { s: r3, p: o6 } = t2, s4 = On3(o6, o6.iss), i5 = ut2(o6.iss);
  return await yn3(i5, s4, r3, In3(o6.iss), n5);
}
var On3 = (e3, t2) => {
  const n5 = `${e3.domain} wants you to sign in with your Ethereum account:`, r3 = ut2(t2);
  if (!e3.aud && !e3.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o6 = e3.statement || void 0;
  const s4 = `URI: ${e3.aud || e3.uri}`, i5 = `Version: ${e3.version}`, c8 = `Chain ID: ${xn3(t2)}`, u4 = `Nonce: ${e3.nonce}`, a3 = `Issued At: ${e3.iat}`, l8 = e3.exp ? `Expiration Time: ${e3.exp}` : void 0, f10 = e3.nbf ? `Not Before: ${e3.nbf}` : void 0, d6 = e3.requestId ? `Request ID: ${e3.requestId}` : void 0, g5 = e3.resources ? `Resources:${e3.resources.map((h6) => `
- ${h6}`).join("")}` : void 0, y7 = Me3(e3.resources);
  if (y7) {
    const h6 = oe(y7);
    o6 = dt2(o6, h6);
  }
  return [n5, r3, "", o6, "", s4, i5, c8, u4, a3, l8, f10, d6, g5].filter((h6) => h6 != null).join(`
`);
};
function Un3(e3) {
  return Buffer.from(JSON.stringify(e3)).toString("base64");
}
function _n3(e3) {
  return JSON.parse(Buffer.from(e3, "base64").toString("utf-8"));
}
function Y2(e3) {
  if (!e3) throw new Error("No recap provided, value is undefined");
  if (!e3.att) throw new Error("No `att` property found");
  const t2 = Object.keys(e3.att);
  if (!(t2 != null && t2.length)) throw new Error("No resources found in `att` property");
  t2.forEach((n5) => {
    const r3 = e3.att[n5];
    if (Array.isArray(r3)) throw new Error(`Resource must be an object: ${n5}`);
    if (typeof r3 != "object") throw new Error(`Resource must be an object: ${n5}`);
    if (!Object.keys(r3).length) throw new Error(`Resource object is empty: ${n5}`);
    Object.keys(r3).forEach((o6) => {
      const s4 = r3[o6];
      if (!Array.isArray(s4)) throw new Error(`Ability limits ${o6} must be an array of objects, found: ${s4}`);
      if (!s4.length) throw new Error(`Value of ${o6} is empty array, must be an array with objects`);
      s4.forEach((i5) => {
        if (typeof i5 != "object") throw new Error(`Ability limits (${o6}) must be an array of objects, found: ${i5}`);
      });
    });
  });
}
function Tn3(e3, t2, n5, r3 = {}) {
  return n5 == null ? void 0 : n5.sort((o6, s4) => o6.localeCompare(s4)), { att: { [e3]: ft2(t2, n5, r3) } };
}
function ft2(e3, t2, n5 = {}) {
  t2 = t2 == null ? void 0 : t2.sort((o6, s4) => o6.localeCompare(s4));
  const r3 = t2.map((o6) => ({ [`${e3}/${o6}`]: [n5] }));
  return Object.assign({}, ...r3);
}
function De2(e3) {
  return Y2(e3), `urn:recap:${Un3(e3).replace(/=/g, "")}`;
}
function oe(e3) {
  const t2 = _n3(e3.replace("urn:recap:", ""));
  return Y2(t2), t2;
}
function rs(e3, t2, n5) {
  const r3 = Tn3(e3, t2, n5);
  return De2(r3);
}
function lt2(e3) {
  return e3 && e3.includes("urn:recap:");
}
function os(e3, t2) {
  const n5 = oe(e3), r3 = oe(t2), o6 = Rn3(n5, r3);
  return De2(o6);
}
function Rn3(e3, t2) {
  Y2(e3), Y2(t2);
  const n5 = Object.keys(e3.att).concat(Object.keys(t2.att)).sort((o6, s4) => o6.localeCompare(s4)), r3 = { att: {} };
  return n5.forEach((o6) => {
    var s4, i5;
    Object.keys(((s4 = e3.att) == null ? void 0 : s4[o6]) || {}).concat(Object.keys(((i5 = t2.att) == null ? void 0 : i5[o6]) || {})).sort((c8, u4) => c8.localeCompare(u4)).forEach((c8) => {
      var u4, a3;
      r3.att[o6] = vn3(at({}, r3.att[o6]), { [c8]: ((u4 = e3.att[o6]) == null ? void 0 : u4[c8]) || ((a3 = t2.att[o6]) == null ? void 0 : a3[c8]) });
    });
  }), r3;
}
function dt2(e3 = "", t2) {
  Y2(t2);
  const n5 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (e3.includes(n5)) return e3;
  const r3 = [];
  let o6 = 0;
  Object.keys(t2.att).forEach((c8) => {
    const u4 = Object.keys(t2.att[c8]).map((f10) => ({ ability: f10.split("/")[0], action: f10.split("/")[1] }));
    u4.sort((f10, d6) => f10.action.localeCompare(d6.action));
    const a3 = {};
    u4.forEach((f10) => {
      a3[f10.ability] || (a3[f10.ability] = []), a3[f10.ability].push(f10.action);
    });
    const l8 = Object.keys(a3).map((f10) => (o6++, `(${o6}) '${f10}': '${a3[f10].join("', '")}' for '${c8}'.`));
    r3.push(l8.join(", ").replace(".,", "."));
  });
  const s4 = r3.join(" "), i5 = `${n5}${s4}`;
  return `${e3 ? e3 + " " : ""}${i5}`;
}
function ss(e3) {
  var t2;
  const n5 = oe(e3);
  Y2(n5);
  const r3 = (t2 = n5.att) == null ? void 0 : t2.eip155;
  return r3 ? Object.keys(r3).map((o6) => o6.split("/")[1]) : [];
}
function is(e3) {
  const t2 = oe(e3);
  Y2(t2);
  const n5 = [];
  return Object.values(t2.att).forEach((r3) => {
    Object.values(r3).forEach((o6) => {
      var s4;
      (s4 = o6 == null ? void 0 : o6[0]) != null && s4.chains && n5.push(o6[0].chains);
    });
  }), [...new Set(n5.flat())];
}
function Me3(e3) {
  if (!e3) return;
  const t2 = e3 == null ? void 0 : e3[e3.length - 1];
  return lt2(t2) ? t2 : void 0;
}
function ht3(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Bn4(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function F3(e3, ...t2) {
  if (!Bn4(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function Ln4(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function cs3(e3, t2) {
  F3(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jn4(e3) {
  if (typeof e3 != "boolean") throw new Error(`boolean expected, not ${e3}`);
}
var se3 = (e3) => new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
var as2 = (e3) => new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
var us2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!us2) throw new Error("Non little-endian hardware is not supported");
function fs2(e3) {
  if (typeof e3 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(e3));
}
function pt2(e3) {
  if (typeof e3 == "string") e3 = fs2(e3);
  else if (Bn4(e3)) e3 = gt3(e3);
  else throw new Error("Uint8Array expected, got " + typeof e3);
  return e3;
}
function ls2(e3, t2) {
  if (t2 == null || typeof t2 != "object") throw new Error("options must be defined");
  return Object.assign(e3, t2);
}
function ds2(e3, t2) {
  if (e3.length !== t2.length) return false;
  let n5 = 0;
  for (let r3 = 0; r3 < e3.length; r3++) n5 |= e3[r3] ^ t2[r3];
  return n5 === 0;
}
var hs2 = (e3, t2) => {
  function n5(r3, ...o6) {
    if (F3(r3), e3.nonceLength !== void 0) {
      const l8 = o6[0];
      if (!l8) throw new Error("nonce / iv required");
      e3.varSizeNonce ? F3(l8) : F3(l8, e3.nonceLength);
    }
    const s4 = e3.tagLength;
    s4 && o6[1] !== void 0 && F3(o6[1]);
    const i5 = t2(r3, ...o6), c8 = (l8, f10) => {
      if (f10 !== void 0) {
        if (l8 !== 2) throw new Error("cipher output not supported");
        F3(f10);
      }
    };
    let u4 = false;
    return { encrypt(l8, f10) {
      if (u4) throw new Error("cannot encrypt() twice with same key + nonce");
      return u4 = true, F3(l8), c8(i5.encrypt.length, f10), i5.encrypt(l8, f10);
    }, decrypt(l8, f10) {
      if (F3(l8), s4 && l8.length < s4) throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return c8(i5.decrypt.length, f10), i5.decrypt(l8, f10);
    } };
  }
  return Object.assign(n5, e3), n5;
};
function Cn4(e3, t2, n5 = true) {
  if (t2 === void 0) return new Uint8Array(e3);
  if (t2.length !== e3) throw new Error("invalid output length, expected " + e3 + ", got: " + t2.length);
  if (n5 && !ps2(t2)) throw new Error("invalid output, must be aligned");
  return t2;
}
function kn4(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function ps2(e3) {
  return e3.byteOffset % 4 === 0;
}
function gt3(e3) {
  return Uint8Array.from(e3);
}
function Ee4(...e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2].fill(0);
}
var Dn3 = (e3) => Uint8Array.from(e3.split("").map((t2) => t2.charCodeAt(0)));
var gs2 = Dn3("expand 16-byte k");
var ys2 = Dn3("expand 32-byte k");
var ms2 = se3(gs2);
var bs2 = se3(ys2);
function x5(e3, t2) {
  return e3 << t2 | e3 >>> 32 - t2;
}
function yt3(e3) {
  return e3.byteOffset % 4 === 0;
}
var Ve4 = 64;
var ws2 = 16;
var Mn4 = 2 ** 32 - 1;
var Vn4 = new Uint32Array();
function Es2(e3, t2, n5, r3, o6, s4, i5, c8) {
  const u4 = o6.length, a3 = new Uint8Array(Ve4), l8 = se3(a3), f10 = yt3(o6) && yt3(s4), d6 = f10 ? se3(o6) : Vn4, g5 = f10 ? se3(s4) : Vn4;
  for (let y7 = 0; y7 < u4; i5++) {
    if (e3(t2, n5, r3, l8, i5, c8), i5 >= Mn4) throw new Error("arx: counter overflow");
    const h6 = Math.min(Ve4, u4 - y7);
    if (f10 && h6 === Ve4) {
      const m4 = y7 / 4;
      if (y7 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let L5 = 0, b6; L5 < ws2; L5++) b6 = m4 + L5, g5[b6] = d6[b6] ^ l8[L5];
      y7 += Ve4;
      continue;
    }
    for (let m4 = 0, L5; m4 < h6; m4++) L5 = y7 + m4, s4[L5] = o6[L5] ^ a3[m4];
    y7 += h6;
  }
}
function vs2(e3, t2) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o6, counterRight: s4, rounds: i5 } = ls2({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, t2);
  if (typeof e3 != "function") throw new Error("core must be a function");
  return ht3(o6), ht3(i5), jn4(s4), jn4(n5), (c8, u4, a3, l8, f10 = 0) => {
    F3(c8), F3(u4), F3(a3);
    const d6 = a3.length;
    if (l8 === void 0 && (l8 = new Uint8Array(d6)), F3(l8), ht3(f10), f10 < 0 || f10 >= Mn4) throw new Error("arx: counter overflow");
    if (l8.length < d6) throw new Error(`arx: output (${l8.length}) is shorter than data (${d6})`);
    const g5 = [];
    let y7 = c8.length, h6, m4;
    if (y7 === 32) g5.push(h6 = gt3(c8)), m4 = bs2;
    else if (y7 === 16 && n5) h6 = new Uint8Array(32), h6.set(c8), h6.set(c8, 16), m4 = ms2, g5.push(h6);
    else throw new Error(`arx: invalid 32-byte key, got length=${y7}`);
    yt3(u4) || g5.push(u4 = gt3(u4));
    const L5 = se3(h6);
    if (r3) {
      if (u4.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(m4, L5, se3(u4.subarray(0, 16)), L5), u4 = u4.subarray(16);
    }
    const b6 = 16 - o6;
    if (b6 !== u4.length) throw new Error(`arx: nonce must be ${b6} or 16 bytes`);
    if (b6 !== 12) {
      const O7 = new Uint8Array(12);
      O7.set(u4, s4 ? 0 : 12 - u4.length), u4 = O7, g5.push(u4);
    }
    const _4 = se3(u4);
    return Es2(e3, m4, L5, _4, a3, l8, f10, i5), Ee4(...g5), l8;
  };
}
var M5 = (e3, t2) => e3[t2++] & 255 | (e3[t2++] & 255) << 8;
var xs2 = class {
  constructor(t2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, t2 = pt2(t2), F3(t2, 32);
    const n5 = M5(t2, 0), r3 = M5(t2, 2), o6 = M5(t2, 4), s4 = M5(t2, 6), i5 = M5(t2, 8), c8 = M5(t2, 10), u4 = M5(t2, 12), a3 = M5(t2, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o6 << 6) & 7939, this.r[3] = (o6 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i5 << 12) & 255, this.r[5] = i5 >>> 1 & 8190, this.r[6] = (i5 >>> 14 | c8 << 2) & 8191, this.r[7] = (c8 >>> 11 | u4 << 5) & 8065, this.r[8] = (u4 >>> 8 | a3 << 8) & 8191, this.r[9] = a3 >>> 5 & 127;
    for (let l8 = 0; l8 < 8; l8++) this.pad[l8] = M5(t2, 16 + 2 * l8);
  }
  process(t2, n5, r3 = false) {
    const o6 = r3 ? 0 : 2048, { h: s4, r: i5 } = this, c8 = i5[0], u4 = i5[1], a3 = i5[2], l8 = i5[3], f10 = i5[4], d6 = i5[5], g5 = i5[6], y7 = i5[7], h6 = i5[8], m4 = i5[9], L5 = M5(t2, n5 + 0), b6 = M5(t2, n5 + 2), _4 = M5(t2, n5 + 4), O7 = M5(t2, n5 + 6), k7 = M5(t2, n5 + 8), E7 = M5(t2, n5 + 10), B4 = M5(t2, n5 + 12), j4 = M5(t2, n5 + 14);
    let v7 = s4[0] + (L5 & 8191), I4 = s4[1] + ((L5 >>> 13 | b6 << 3) & 8191), w6 = s4[2] + ((b6 >>> 10 | _4 << 6) & 8191), R3 = s4[3] + ((_4 >>> 7 | O7 << 9) & 8191), A4 = s4[4] + ((O7 >>> 4 | k7 << 12) & 8191), T4 = s4[5] + (k7 >>> 1 & 8191), N12 = s4[6] + ((k7 >>> 14 | E7 << 2) & 8191), S5 = s4[7] + ((E7 >>> 11 | B4 << 5) & 8191), U3 = s4[8] + ((B4 >>> 8 | j4 << 8) & 8191), $4 = s4[9] + (j4 >>> 5 | o6), p6 = 0, C6 = p6 + v7 * c8 + I4 * (5 * m4) + w6 * (5 * h6) + R3 * (5 * y7) + A4 * (5 * g5);
    p6 = C6 >>> 13, C6 &= 8191, C6 += T4 * (5 * d6) + N12 * (5 * f10) + S5 * (5 * l8) + U3 * (5 * a3) + $4 * (5 * u4), p6 += C6 >>> 13, C6 &= 8191;
    let D3 = p6 + v7 * u4 + I4 * c8 + w6 * (5 * m4) + R3 * (5 * h6) + A4 * (5 * y7);
    p6 = D3 >>> 13, D3 &= 8191, D3 += T4 * (5 * g5) + N12 * (5 * d6) + S5 * (5 * f10) + U3 * (5 * l8) + $4 * (5 * a3), p6 += D3 >>> 13, D3 &= 8191;
    let P7 = p6 + v7 * a3 + I4 * u4 + w6 * c8 + R3 * (5 * m4) + A4 * (5 * h6);
    p6 = P7 >>> 13, P7 &= 8191, P7 += T4 * (5 * y7) + N12 * (5 * g5) + S5 * (5 * d6) + U3 * (5 * f10) + $4 * (5 * l8), p6 += P7 >>> 13, P7 &= 8191;
    let G4 = p6 + v7 * l8 + I4 * a3 + w6 * u4 + R3 * c8 + A4 * (5 * m4);
    p6 = G4 >>> 13, G4 &= 8191, G4 += T4 * (5 * h6) + N12 * (5 * y7) + S5 * (5 * g5) + U3 * (5 * d6) + $4 * (5 * f10), p6 += G4 >>> 13, G4 &= 8191;
    let X = p6 + v7 * f10 + I4 * l8 + w6 * a3 + R3 * u4 + A4 * c8;
    p6 = X >>> 13, X &= 8191, X += T4 * (5 * m4) + N12 * (5 * h6) + S5 * (5 * y7) + U3 * (5 * g5) + $4 * (5 * d6), p6 += X >>> 13, X &= 8191;
    let Z2 = p6 + v7 * d6 + I4 * f10 + w6 * l8 + R3 * a3 + A4 * u4;
    p6 = Z2 >>> 13, Z2 &= 8191, Z2 += T4 * c8 + N12 * (5 * m4) + S5 * (5 * h6) + U3 * (5 * y7) + $4 * (5 * g5), p6 += Z2 >>> 13, Z2 &= 8191;
    let he4 = p6 + v7 * g5 + I4 * d6 + w6 * f10 + R3 * l8 + A4 * a3;
    p6 = he4 >>> 13, he4 &= 8191, he4 += T4 * u4 + N12 * c8 + S5 * (5 * m4) + U3 * (5 * h6) + $4 * (5 * y7), p6 += he4 >>> 13, he4 &= 8191;
    let pe4 = p6 + v7 * y7 + I4 * g5 + w6 * d6 + R3 * f10 + A4 * l8;
    p6 = pe4 >>> 13, pe4 &= 8191, pe4 += T4 * a3 + N12 * u4 + S5 * c8 + U3 * (5 * m4) + $4 * (5 * h6), p6 += pe4 >>> 13, pe4 &= 8191;
    let ge4 = p6 + v7 * h6 + I4 * y7 + w6 * g5 + R3 * d6 + A4 * f10;
    p6 = ge4 >>> 13, ge4 &= 8191, ge4 += T4 * l8 + N12 * a3 + S5 * u4 + U3 * c8 + $4 * (5 * m4), p6 += ge4 >>> 13, ge4 &= 8191;
    let ye4 = p6 + v7 * m4 + I4 * h6 + w6 * y7 + R3 * g5 + A4 * d6;
    p6 = ye4 >>> 13, ye4 &= 8191, ye4 += T4 * f10 + N12 * l8 + S5 * a3 + U3 * u4 + $4 * c8, p6 += ye4 >>> 13, ye4 &= 8191, p6 = (p6 << 2) + p6 | 0, p6 = p6 + C6 | 0, C6 = p6 & 8191, p6 = p6 >>> 13, D3 += p6, s4[0] = C6, s4[1] = D3, s4[2] = P7, s4[3] = G4, s4[4] = X, s4[5] = Z2, s4[6] = he4, s4[7] = pe4, s4[8] = ge4, s4[9] = ye4;
  }
  finalize() {
    const { h: t2, pad: n5 } = this, r3 = new Uint16Array(10);
    let o6 = t2[1] >>> 13;
    t2[1] &= 8191;
    for (let c8 = 2; c8 < 10; c8++) t2[c8] += o6, o6 = t2[c8] >>> 13, t2[c8] &= 8191;
    t2[0] += o6 * 5, o6 = t2[0] >>> 13, t2[0] &= 8191, t2[1] += o6, o6 = t2[1] >>> 13, t2[1] &= 8191, t2[2] += o6, r3[0] = t2[0] + 5, o6 = r3[0] >>> 13, r3[0] &= 8191;
    for (let c8 = 1; c8 < 10; c8++) r3[c8] = t2[c8] + o6, o6 = r3[c8] >>> 13, r3[c8] &= 8191;
    r3[9] -= 8192;
    let s4 = (o6 ^ 1) - 1;
    for (let c8 = 0; c8 < 10; c8++) r3[c8] &= s4;
    s4 = ~s4;
    for (let c8 = 0; c8 < 10; c8++) t2[c8] = t2[c8] & s4 | r3[c8];
    t2[0] = (t2[0] | t2[1] << 13) & 65535, t2[1] = (t2[1] >>> 3 | t2[2] << 10) & 65535, t2[2] = (t2[2] >>> 6 | t2[3] << 7) & 65535, t2[3] = (t2[3] >>> 9 | t2[4] << 4) & 65535, t2[4] = (t2[4] >>> 12 | t2[5] << 1 | t2[6] << 14) & 65535, t2[5] = (t2[6] >>> 2 | t2[7] << 11) & 65535, t2[6] = (t2[7] >>> 5 | t2[8] << 8) & 65535, t2[7] = (t2[8] >>> 8 | t2[9] << 5) & 65535;
    let i5 = t2[0] + n5[0];
    t2[0] = i5 & 65535;
    for (let c8 = 1; c8 < 8; c8++) i5 = (t2[c8] + n5[c8] | 0) + (i5 >>> 16) | 0, t2[c8] = i5 & 65535;
    Ee4(r3);
  }
  update(t2) {
    Ln4(this);
    const { buffer: n5, blockLen: r3 } = this;
    t2 = pt2(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(r3 - this.pos, o6 - s4);
      if (i5 === r3) {
        for (; r3 <= o6 - s4; s4 += r3) this.process(t2, s4);
        continue;
      }
      n5.set(t2.subarray(s4, s4 + i5), this.pos), this.pos += i5, s4 += i5, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Ee4(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(t2) {
    Ln4(this), cs3(t2, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o6 } = this;
    if (o6) {
      for (n5[o6++] = 1; o6 < 16; o6++) n5[o6] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i5 = 0; i5 < 8; i5++) t2[s4++] = r3[i5] >>> 0, t2[s4++] = r3[i5] >>> 8;
    return t2;
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
};
function Is2(e3) {
  const t2 = (r3, o6) => e3(o6).update(pt2(r3)).digest(), n5 = e3(new Uint8Array(32));
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = (r3) => e3(r3), t2;
}
var Os2 = Is2((e3) => new xs2(e3));
function As2(e3, t2, n5, r3, o6, s4 = 20) {
  let i5 = e3[0], c8 = e3[1], u4 = e3[2], a3 = e3[3], l8 = t2[0], f10 = t2[1], d6 = t2[2], g5 = t2[3], y7 = t2[4], h6 = t2[5], m4 = t2[6], L5 = t2[7], b6 = o6, _4 = n5[0], O7 = n5[1], k7 = n5[2], E7 = i5, B4 = c8, j4 = u4, v7 = a3, I4 = l8, w6 = f10, R3 = d6, A4 = g5, T4 = y7, N12 = h6, S5 = m4, U3 = L5, $4 = b6, p6 = _4, C6 = O7, D3 = k7;
  for (let G4 = 0; G4 < s4; G4 += 2) E7 = E7 + I4 | 0, $4 = x5($4 ^ E7, 16), T4 = T4 + $4 | 0, I4 = x5(I4 ^ T4, 12), E7 = E7 + I4 | 0, $4 = x5($4 ^ E7, 8), T4 = T4 + $4 | 0, I4 = x5(I4 ^ T4, 7), B4 = B4 + w6 | 0, p6 = x5(p6 ^ B4, 16), N12 = N12 + p6 | 0, w6 = x5(w6 ^ N12, 12), B4 = B4 + w6 | 0, p6 = x5(p6 ^ B4, 8), N12 = N12 + p6 | 0, w6 = x5(w6 ^ N12, 7), j4 = j4 + R3 | 0, C6 = x5(C6 ^ j4, 16), S5 = S5 + C6 | 0, R3 = x5(R3 ^ S5, 12), j4 = j4 + R3 | 0, C6 = x5(C6 ^ j4, 8), S5 = S5 + C6 | 0, R3 = x5(R3 ^ S5, 7), v7 = v7 + A4 | 0, D3 = x5(D3 ^ v7, 16), U3 = U3 + D3 | 0, A4 = x5(A4 ^ U3, 12), v7 = v7 + A4 | 0, D3 = x5(D3 ^ v7, 8), U3 = U3 + D3 | 0, A4 = x5(A4 ^ U3, 7), E7 = E7 + w6 | 0, D3 = x5(D3 ^ E7, 16), S5 = S5 + D3 | 0, w6 = x5(w6 ^ S5, 12), E7 = E7 + w6 | 0, D3 = x5(D3 ^ E7, 8), S5 = S5 + D3 | 0, w6 = x5(w6 ^ S5, 7), B4 = B4 + R3 | 0, $4 = x5($4 ^ B4, 16), U3 = U3 + $4 | 0, R3 = x5(R3 ^ U3, 12), B4 = B4 + R3 | 0, $4 = x5($4 ^ B4, 8), U3 = U3 + $4 | 0, R3 = x5(R3 ^ U3, 7), j4 = j4 + A4 | 0, p6 = x5(p6 ^ j4, 16), T4 = T4 + p6 | 0, A4 = x5(A4 ^ T4, 12), j4 = j4 + A4 | 0, p6 = x5(p6 ^ j4, 8), T4 = T4 + p6 | 0, A4 = x5(A4 ^ T4, 7), v7 = v7 + I4 | 0, C6 = x5(C6 ^ v7, 16), N12 = N12 + C6 | 0, I4 = x5(I4 ^ N12, 12), v7 = v7 + I4 | 0, C6 = x5(C6 ^ v7, 8), N12 = N12 + C6 | 0, I4 = x5(I4 ^ N12, 7);
  let P7 = 0;
  r3[P7++] = i5 + E7 | 0, r3[P7++] = c8 + B4 | 0, r3[P7++] = u4 + j4 | 0, r3[P7++] = a3 + v7 | 0, r3[P7++] = l8 + I4 | 0, r3[P7++] = f10 + w6 | 0, r3[P7++] = d6 + R3 | 0, r3[P7++] = g5 + A4 | 0, r3[P7++] = y7 + T4 | 0, r3[P7++] = h6 + N12 | 0, r3[P7++] = m4 + S5 | 0, r3[P7++] = L5 + U3 | 0, r3[P7++] = b6 + $4 | 0, r3[P7++] = _4 + p6 | 0, r3[P7++] = O7 + C6 | 0, r3[P7++] = k7 + D3 | 0;
}
var Ns2 = vs2(As2, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ss2 = new Uint8Array(16);
var Hn4 = (e3, t2) => {
  e3.update(t2);
  const n5 = t2.length % 16;
  n5 && e3.update(Ss2.subarray(n5));
};
var Us2 = new Uint8Array(32);
function Kn4(e3, t2, n5, r3, o6) {
  const s4 = e3(t2, n5, Us2), i5 = Os2.create(s4);
  o6 && Hn4(i5, o6), Hn4(i5, r3);
  const c8 = new Uint8Array(16), u4 = as2(c8);
  kn4(u4, 0, BigInt(o6 ? o6.length : 0), true), kn4(u4, 8, BigInt(r3.length), true), i5.update(c8);
  const a3 = i5.digest();
  return Ee4(s4, c8), a3;
}
var _s2 = (e3) => (t2, n5, r3) => ({ encrypt(s4, i5) {
  const c8 = s4.length;
  i5 = Cn4(c8 + 16, i5, false), i5.set(s4);
  const u4 = i5.subarray(0, -16);
  e3(t2, n5, u4, u4, 1);
  const a3 = Kn4(e3, t2, n5, u4, r3);
  return i5.set(a3, c8), Ee4(a3), i5;
}, decrypt(s4, i5) {
  i5 = Cn4(s4.length - 16, i5, false);
  const c8 = s4.subarray(0, -16), u4 = s4.subarray(-16), a3 = Kn4(e3, t2, n5, c8, r3);
  if (!ds2(u4, a3)) throw new Error("invalid tag");
  return i5.set(s4.subarray(0, -16)), e3(t2, n5, i5, i5, 1), Ee4(a3), i5;
} });
var Fn4 = hs2({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _s2(Ns2));
var qn4 = class extends it4 {
  constructor(t2, n5) {
    super(), this.finished = false, this.destroyed = false, ot2(t2);
    const r3 = we3(n5);
    if (this.iHash = t2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o6 = this.blockLen, s4 = new Uint8Array(o6);
    s4.set(r3.length > o6 ? t2.create().update(r3).digest() : r3);
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 54;
    this.iHash.update(s4), this.oHash = t2.create();
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 106;
    this.oHash.update(s4), s4.fill(0);
  }
  update(t2) {
    return me3(this), this.iHash.update(t2), this;
  }
  digestInto(t2) {
    me3(this), je4(t2, this.outputLen), this.finished = true, this.iHash.digestInto(t2), this.oHash.update(t2), this.oHash.digestInto(t2), this.destroy();
  }
  digest() {
    const t2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t2), t2;
  }
  _cloneInto(t2) {
    t2 || (t2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o6, destroyed: s4, blockLen: i5, outputLen: c8 } = this;
    return t2 = t2, t2.finished = o6, t2.destroyed = s4, t2.blockLen = i5, t2.outputLen = c8, t2.oHash = n5._cloneInto(t2.oHash), t2.iHash = r3._cloneInto(t2.iHash), t2;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var mt2 = (e3, t2, n5) => new qn4(e3, t2).update(n5).digest();
mt2.create = (e3, t2) => new qn4(e3, t2);
var bt3 = new Uint8Array([0]);
var Gn4 = new Uint8Array();
function Ps2(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function Bs2(e3, t2, n5) {
  return e3 & t2 ^ ~e3 & n5;
}
function Ls2(e3, t2, n5) {
  return e3 & t2 ^ e3 & n5 ^ t2 & n5;
}
var js2 = class extends it4 {
  constructor(t2, n5, r3, o6) {
    super(), this.blockLen = t2, this.outputLen = n5, this.padOffset = r3, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(t2), this.view = st2(this.buffer);
  }
  update(t2) {
    me3(this);
    const { view: n5, buffer: r3, blockLen: o6 } = this;
    t2 = we3(t2);
    const s4 = t2.length;
    for (let i5 = 0; i5 < s4; ) {
      const c8 = Math.min(o6 - this.pos, s4 - i5);
      if (c8 === o6) {
        const u4 = st2(t2);
        for (; o6 <= s4 - i5; i5 += o6) this.process(u4, i5);
        continue;
      }
      r3.set(t2.subarray(i5, i5 + c8), this.pos), this.pos += c8, i5 += c8, this.pos === o6 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += t2.length, this.roundClean(), this;
  }
  digestInto(t2) {
    me3(this), sn4(t2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o6, isLE: s4 } = this;
    let { pos: i5 } = this;
    n5[i5++] = 128, this.buffer.subarray(i5).fill(0), this.padOffset > o6 - i5 && (this.process(r3, 0), i5 = 0);
    for (let f10 = i5; f10 < o6; f10++) n5[f10] = 0;
    Ps2(r3, o6 - 8, BigInt(this.length * 8), s4), this.process(r3, 0);
    const c8 = st2(t2), u4 = this.outputLen;
    if (u4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const a3 = u4 / 4, l8 = this.get();
    if (a3 > l8.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f10 = 0; f10 < a3; f10++) c8.setUint32(4 * f10, l8[f10], s4);
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(t2) {
    t2 || (t2 = new this.constructor()), t2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o6, finished: s4, destroyed: i5, pos: c8 } = this;
    return t2.length = o6, t2.pos = c8, t2.finished = s4, t2.destroyed = i5, o6 % n5 && t2.buffer.set(r3), t2;
  }
};
var Cs2 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var ie3 = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var ce2 = new Uint32Array(64);
var ks2 = class extends js2 {
  constructor() {
    super(64, 32, 8, false), this.A = ie3[0] | 0, this.B = ie3[1] | 0, this.C = ie3[2] | 0, this.D = ie3[3] | 0, this.E = ie3[4] | 0, this.F = ie3[5] | 0, this.G = ie3[6] | 0, this.H = ie3[7] | 0;
  }
  get() {
    const { A: t2, B: n5, C: r3, D: o6, E: s4, F: i5, G: c8, H: u4 } = this;
    return [t2, n5, r3, o6, s4, i5, c8, u4];
  }
  set(t2, n5, r3, o6, s4, i5, c8, u4) {
    this.A = t2 | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o6 | 0, this.E = s4 | 0, this.F = i5 | 0, this.G = c8 | 0, this.H = u4 | 0;
  }
  process(t2, n5) {
    for (let f10 = 0; f10 < 16; f10++, n5 += 4) ce2[f10] = t2.getUint32(n5, false);
    for (let f10 = 16; f10 < 64; f10++) {
      const d6 = ce2[f10 - 15], g5 = ce2[f10 - 2], y7 = J4(d6, 7) ^ J4(d6, 18) ^ d6 >>> 3, h6 = J4(g5, 17) ^ J4(g5, 19) ^ g5 >>> 10;
      ce2[f10] = h6 + ce2[f10 - 7] + y7 + ce2[f10 - 16] | 0;
    }
    let { A: r3, B: o6, C: s4, D: i5, E: c8, F: u4, G: a3, H: l8 } = this;
    for (let f10 = 0; f10 < 64; f10++) {
      const d6 = J4(c8, 6) ^ J4(c8, 11) ^ J4(c8, 25), g5 = l8 + d6 + Bs2(c8, u4, a3) + Cs2[f10] + ce2[f10] | 0, h6 = (J4(r3, 2) ^ J4(r3, 13) ^ J4(r3, 22)) + Ls2(r3, o6, s4) | 0;
      l8 = a3, a3 = u4, u4 = c8, c8 = i5 + g5 | 0, i5 = s4, s4 = o6, o6 = r3, r3 = g5 + h6 | 0;
    }
    r3 = r3 + this.A | 0, o6 = o6 + this.B | 0, s4 = s4 + this.C | 0, i5 = i5 + this.D | 0, c8 = c8 + this.E | 0, u4 = u4 + this.F | 0, a3 = a3 + this.G | 0, l8 = l8 + this.H | 0, this.set(r3, o6, s4, i5, c8, u4, a3, l8);
  }
  roundClean() {
    ce2.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var He4 = fn3(() => new ks2());
var Wn4 = BigInt(0);
function wt3(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function zn4(e3) {
  if (!wt3(e3)) throw new Error("Uint8Array expected");
}
var Ds2 = Array.from({ length: 256 }, (e3, t2) => t2.toString(16).padStart(2, "0"));
function Ms2(e3) {
  zn4(e3);
  let t2 = "";
  for (let n5 = 0; n5 < e3.length; n5++) t2 += Ds2[e3[n5]];
  return t2;
}
function Vs3(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  return e3 === "" ? Wn4 : BigInt("0x" + e3);
}
var ee3 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Jn4(e3) {
  if (e3 >= ee3._0 && e3 <= ee3._9) return e3 - ee3._0;
  if (e3 >= ee3.A && e3 <= ee3.F) return e3 - (ee3.A - 10);
  if (e3 >= ee3.a && e3 <= ee3.f) return e3 - (ee3.a - 10);
}
function Yn4(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  const t2 = e3.length, n5 = t2 / 2;
  if (t2 % 2) throw new Error("hex string expected, got unpadded hex of length " + t2);
  const r3 = new Uint8Array(n5);
  for (let o6 = 0, s4 = 0; o6 < n5; o6++, s4 += 2) {
    const i5 = Jn4(e3.charCodeAt(s4)), c8 = Jn4(e3.charCodeAt(s4 + 1));
    if (i5 === void 0 || c8 === void 0) {
      const u4 = e3[s4] + e3[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + u4 + '" at index ' + s4);
    }
    r3[o6] = i5 * 16 + c8;
  }
  return r3;
}
function Xn4(e3) {
  return zn4(e3), Vs3(Ms2(Uint8Array.from(e3).reverse()));
}
function Hs3(e3, t2) {
  return Yn4(e3.toString(16).padStart(t2 * 2, "0"));
}
function Ks2(e3, t2) {
  return Hs3(e3, t2).reverse();
}
function Zn4(e3, t2, n5) {
  let r3;
  if (typeof t2 == "string") try {
    r3 = Yn4(t2);
  } catch (s4) {
    throw new Error(e3 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (wt3(t2)) r3 = Uint8Array.from(t2);
  else throw new Error(e3 + " must be hex string or Uint8Array");
  const o6 = r3.length;
  if (typeof n5 == "number" && o6 !== n5) throw new Error(e3 + " of length " + n5 + " expected, got " + o6);
  return r3;
}
var Et4 = (e3) => typeof e3 == "bigint" && Wn4 <= e3;
function Fs2(e3, t2, n5) {
  return Et4(e3) && Et4(t2) && Et4(n5) && t2 <= e3 && e3 < n5;
}
function Qn4(e3, t2, n5, r3) {
  if (!Fs2(t2, n5, r3)) throw new Error("expected valid " + e3 + ": " + n5 + " <= n < " + r3 + ", got " + t2);
}
var qs2 = { bigint: (e3) => typeof e3 == "bigint", function: (e3) => typeof e3 == "function", boolean: (e3) => typeof e3 == "boolean", string: (e3) => typeof e3 == "string", stringOrUint8Array: (e3) => typeof e3 == "string" || wt3(e3), isSafeInteger: (e3) => Number.isSafeInteger(e3), array: (e3) => Array.isArray(e3), field: (e3, t2) => t2.Fp.isValid(e3), hash: (e3) => typeof e3 == "function" && Number.isSafeInteger(e3.outputLen) };
function Gs2(e3, t2, n5 = {}) {
  const r3 = (o6, s4, i5) => {
    const c8 = qs2[s4];
    if (typeof c8 != "function") throw new Error("invalid validator function");
    const u4 = e3[o6];
    if (!(i5 && u4 === void 0) && !c8(u4, e3)) throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + u4);
  };
  for (const [o6, s4] of Object.entries(t2)) r3(o6, s4, false);
  for (const [o6, s4] of Object.entries(n5)) r3(o6, s4, true);
  return e3;
}
var ve3 = BigInt(0);
var Ke4 = BigInt(1);
function er4(e3, t2) {
  const n5 = e3 % t2;
  return n5 >= ve3 ? n5 : t2 + n5;
}
function Ws2(e3, t2, n5) {
  if (t2 < ve3) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= ve3) throw new Error("invalid modulus");
  if (n5 === Ke4) return ve3;
  let r3 = Ke4;
  for (; t2 > ve3; ) t2 & Ke4 && (r3 = r3 * e3 % n5), e3 = e3 * e3 % n5, t2 >>= Ke4;
  return r3;
}
function z5(e3, t2, n5) {
  let r3 = e3;
  for (; t2-- > ve3; ) r3 *= r3, r3 %= n5;
  return r3;
}
BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var xe3 = BigInt(0);
var vt3 = BigInt(1);
function zs2(e3) {
  return Gs2(e3, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...e3 });
}
function Js2(e3) {
  const t2 = zs2(e3), { P: n5 } = t2, r3 = (b6) => er4(b6, n5), o6 = t2.montgomeryBits, s4 = Math.ceil(o6 / 8), i5 = t2.nByteLength, c8 = t2.adjustScalarBytes || ((b6) => b6), u4 = t2.powPminus2 || ((b6) => Ws2(b6, n5 - BigInt(2), n5));
  function a3(b6, _4, O7) {
    const k7 = r3(b6 * (_4 - O7));
    return _4 = r3(_4 - k7), O7 = r3(O7 + k7), [_4, O7];
  }
  const l8 = (t2.a - BigInt(2)) / BigInt(4);
  function f10(b6, _4) {
    Qn4("u", b6, xe3, n5), Qn4("scalar", _4, xe3, n5);
    const O7 = _4, k7 = b6;
    let E7 = vt3, B4 = xe3, j4 = b6, v7 = vt3, I4 = xe3, w6;
    for (let A4 = BigInt(o6 - 1); A4 >= xe3; A4--) {
      const T4 = O7 >> A4 & vt3;
      I4 ^= T4, w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1], I4 = T4;
      const N12 = E7 + B4, S5 = r3(N12 * N12), U3 = E7 - B4, $4 = r3(U3 * U3), p6 = S5 - $4, C6 = j4 + v7, D3 = j4 - v7, P7 = r3(D3 * N12), G4 = r3(C6 * U3), X = P7 + G4, Z2 = P7 - G4;
      j4 = r3(X * X), v7 = r3(k7 * r3(Z2 * Z2)), E7 = r3(S5 * $4), B4 = r3(p6 * (S5 + r3(l8 * p6)));
    }
    w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1];
    const R3 = u4(B4);
    return r3(E7 * R3);
  }
  function d6(b6) {
    return Ks2(r3(b6), s4);
  }
  function g5(b6) {
    const _4 = Zn4("u coordinate", b6, s4);
    return i5 === 32 && (_4[31] &= 127), Xn4(_4);
  }
  function y7(b6) {
    const _4 = Zn4("scalar", b6), O7 = _4.length;
    if (O7 !== s4 && O7 !== i5) {
      let k7 = "" + s4 + " or " + i5;
      throw new Error("invalid scalar, expected " + k7 + " bytes, got " + O7);
    }
    return Xn4(c8(_4));
  }
  function h6(b6, _4) {
    const O7 = g5(_4), k7 = y7(b6), E7 = f10(O7, k7);
    if (E7 === xe3) throw new Error("invalid private or public key received");
    return d6(E7);
  }
  const m4 = d6(t2.Gu);
  function L5(b6) {
    return h6(b6, m4);
  }
  return { scalarMult: h6, scalarMultBase: L5, getSharedSecret: (b6, _4) => h6(b6, _4), getPublicKey: (b6) => L5(b6), utils: { randomPrivateKey: () => t2.randomBytes(t2.nByteLength) }, GuBytes: m4 };
}
var xt4 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var Ys2 = BigInt(1);
var tr4 = BigInt(2);
var Xs3 = BigInt(3);
var Zs2 = BigInt(5);
BigInt(8);
function Qs3(e3) {
  const t2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o6 = BigInt(80), s4 = xt4, c8 = e3 * e3 % s4 * e3 % s4, u4 = z5(c8, tr4, s4) * c8 % s4, a3 = z5(u4, Ys2, s4) * e3 % s4, l8 = z5(a3, Zs2, s4) * a3 % s4, f10 = z5(l8, t2, s4) * l8 % s4, d6 = z5(f10, n5, s4) * f10 % s4, g5 = z5(d6, r3, s4) * d6 % s4, y7 = z5(g5, o6, s4) * g5 % s4, h6 = z5(y7, o6, s4) * g5 % s4, m4 = z5(h6, t2, s4) * l8 % s4;
  return { pow_p_5_8: z5(m4, tr4, s4) * e3 % s4, b2: c8 };
}
function ei3(e3) {
  return e3[0] &= 248, e3[31] &= 127, e3[31] |= 64, e3;
}
var It4 = Js2({ P: xt4, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (e3) => {
  const t2 = xt4, { pow_p_5_8: n5, b2: r3 } = Qs3(e3);
  return er4(z5(n5, Xs3, t2) * r3, t2);
}, adjustScalarBytes: ei3, randomBytes: Se4 });
var V4 = "base16";
var At3 = "base64pad";
var ti2 = "base64url";
var Ie4 = "utf8";
var Oe3 = 1;
var _e4 = 2;
function ii3(e3) {
  const t2 = He4(fromString6(e3, V4));
  return toString3(t2, V4);
}
function ci3(e3) {
  const t2 = He4(fromString6(e3, Ie4));
  return toString3(t2, V4);
}
function xi2(e3, t2, n5) {
  return `${e3}?wc_ev=${n5}&topic=${t2}`;
}
function le3(e3) {
  const t2 = [];
  return e3.forEach((n5) => {
    const [r3, o6] = n5.split(":");
    t2.push(`${r3}:${o6}`);
  }), t2;
}
function lr3(e3) {
  const t2 = [];
  return Object.values(e3).forEach((n5) => {
    t2.push(...le3(n5.accounts));
  }), t2;
}
function dr3(e3, t2) {
  const n5 = [];
  return Object.values(e3).forEach((r3) => {
    le3(r3.accounts).includes(t2) && n5.push(...r3.methods);
  }), n5;
}
function hr3(e3, t2) {
  const n5 = [];
  return Object.values(e3).forEach((r3) => {
    le3(r3.accounts).includes(t2) && n5.push(...r3.events);
  }), n5;
}
function gr3(e3) {
  const t2 = {};
  return e3 == null ? void 0 : e3.forEach((n5) => {
    var r3;
    const [o6, s4] = n5.split(":");
    t2[o6] || (t2[o6] = { accounts: [], chains: [], events: [], methods: [] }), t2[o6].accounts.push(n5), (r3 = t2[o6].chains) == null || r3.push(`${o6}:${s4}`);
  }), t2;
}
function Ri2(e3, t2) {
  t2 = t2.map((r3) => r3.replace("did:pkh:", ""));
  const n5 = gr3(t2);
  for (const [r3, o6] of Object.entries(n5)) o6.methods ? o6.methods = Q3(o6.methods, e3) : o6.methods = e3, o6.events = ["chainChanged", "accountsChanged"];
  return n5;
}
var yr4 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var mr4 = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function te4(e3, t2) {
  const { message: n5, code: r3 } = mr4[e3];
  return { message: t2 ? `${n5} ${t2}` : n5, code: r3 };
}
function de4(e3, t2) {
  const { message: n5, code: r3 } = yr4[e3];
  return { message: t2 ? `${n5} ${t2}` : n5, code: r3 };
}
function $e2(e3, t2) {
  return Array.isArray(e3) ? typeof t2 < "u" && e3.length ? e3.every(t2) : true : false;
}
function qe3(e3) {
  return Object.getPrototypeOf(e3) === Object.prototype && Object.keys(e3).length;
}
function ae2(e3) {
  return typeof e3 > "u";
}
function q2(e3, t2) {
  return t2 && ae2(e3) ? true : typeof e3 == "string" && !!e3.trim().length;
}
function Ge3(e3, t2) {
  return t2 && ae2(e3) ? true : typeof e3 == "number" && !isNaN(e3);
}
function Pi4(e3, t2) {
  const { requiredNamespaces: n5 } = t2, r3 = Object.keys(e3.namespaces), o6 = Object.keys(n5);
  let s4 = true;
  return re2(o6, r3) ? (r3.forEach((i5) => {
    const { accounts: c8, methods: u4, events: a3 } = e3.namespaces[i5], l8 = le3(c8), f10 = n5[i5];
    (!re2(Be3(i5, f10), l8) || !re2(f10.methods, u4) || !re2(f10.events, a3)) && (s4 = false);
  }), s4) : false;
}
function Re2(e3) {
  return q2(e3, false) && e3.includes(":") ? e3.split(":").length === 2 : false;
}
function br3(e3) {
  if (q2(e3, false) && e3.includes(":")) {
    const t2 = e3.split(":");
    if (t2.length === 3) {
      const n5 = t2[0] + ":" + t2[1];
      return !!t2[2] && Re2(n5);
    }
  }
  return false;
}
function Ci2(e3, t2) {
  let n5 = null;
  return q2(e3 == null ? void 0 : e3.publicKey, false) || (n5 = te4("MISSING_OR_INVALID", `${t2} controller public key should be a string`)), n5;
}
function Rt3(e3) {
  let t2 = true;
  return $e2(e3) ? e3.length && (t2 = e3.every((n5) => q2(n5, false))) : t2 = false, t2;
}
function wr3(e3, t2, n5) {
  let r3 = null;
  return $e2(t2) && t2.length ? t2.forEach((o6) => {
    r3 || Re2(o6) || (r3 = de4("UNSUPPORTED_CHAINS", `${n5}, chain ${o6} should be a string and conform to "namespace:chainId" format`));
  }) : Re2(e3) || (r3 = de4("UNSUPPORTED_CHAINS", `${n5}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r3;
}
function Er3(e3, t2, n5) {
  let r3 = null;
  return Object.entries(e3).forEach(([o6, s4]) => {
    if (r3) return;
    const i5 = wr3(o6, Be3(o6, s4), `${t2} ${n5}`);
    i5 && (r3 = i5);
  }), r3;
}
function vr3(e3, t2) {
  let n5 = null;
  return $e2(e3) ? e3.forEach((r3) => {
    n5 || br3(r3) || (n5 = de4("UNSUPPORTED_ACCOUNTS", `${t2}, account ${r3} should be a string and conform to "namespace:chainId:address" format`));
  }) : n5 = de4("UNSUPPORTED_ACCOUNTS", `${t2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n5;
}
function xr3(e3, t2) {
  let n5 = null;
  return Object.values(e3).forEach((r3) => {
    if (n5) return;
    const o6 = vr3(r3 == null ? void 0 : r3.accounts, `${t2} namespace`);
    o6 && (n5 = o6);
  }), n5;
}
function Ir3(e3, t2) {
  let n5 = null;
  return Rt3(e3 == null ? void 0 : e3.methods) ? Rt3(e3 == null ? void 0 : e3.events) || (n5 = de4("UNSUPPORTED_EVENTS", `${t2}, events should be an array of strings or empty array for no events`)) : n5 = de4("UNSUPPORTED_METHODS", `${t2}, methods should be an array of strings or empty array for no methods`), n5;
}
function Pt3(e3, t2) {
  let n5 = null;
  return Object.values(e3).forEach((r3) => {
    if (n5) return;
    const o6 = Ir3(r3, `${t2}, namespace`);
    o6 && (n5 = o6);
  }), n5;
}
function ki2(e3, t2, n5) {
  let r3 = null;
  if (e3 && qe3(e3)) {
    const o6 = Pt3(e3, t2);
    o6 && (r3 = o6);
    const s4 = Er3(e3, t2, n5);
    s4 && (r3 = s4);
  } else r3 = te4("MISSING_OR_INVALID", `${t2}, ${n5} should be an object with data`);
  return r3;
}
function Or3(e3, t2) {
  let n5 = null;
  if (e3 && qe3(e3)) {
    const r3 = Pt3(e3, t2);
    r3 && (n5 = r3);
    const o6 = xr3(e3, t2);
    o6 && (n5 = o6);
  } else n5 = te4("MISSING_OR_INVALID", `${t2}, namespaces should be an object with data`);
  return n5;
}
function Ar3(e3) {
  return q2(e3.protocol, true);
}
function Di2(e3, t2) {
  let n5 = false;
  return t2 && !e3 ? n5 = true : e3 && $e2(e3) && e3.length && e3.forEach((r3) => {
    n5 = Ar3(r3);
  }), n5;
}
function Mi2(e3) {
  return typeof e3 == "number";
}
function Vi3(e3) {
  return typeof e3 < "u" && typeof e3 !== null;
}
function Hi(e3) {
  return !(!e3 || typeof e3 != "object" || !e3.code || !Ge3(e3.code, false) || !e3.message || !q2(e3.message, false));
}
function Ki2(e3) {
  return !(ae2(e3) || !q2(e3.method, false));
}
function Fi2(e3) {
  return !(ae2(e3) || ae2(e3.result) && ae2(e3.error) || !Ge3(e3.id, false) || !q2(e3.jsonrpc, false));
}
function qi2(e3) {
  return !(ae2(e3) || !q2(e3.name, false));
}
function Gi2(e3, t2) {
  return !(!Re2(t2) || !lr3(e3).includes(t2));
}
function Wi(e3, t2, n5) {
  return q2(n5, false) ? dr3(e3, t2).includes(n5) : false;
}
function zi2(e3, t2, n5) {
  return q2(n5, false) ? hr3(e3, t2).includes(n5) : false;
}
function Nr3(e3, t2, n5) {
  let r3 = null;
  const o6 = Ji(e3), s4 = Yi(t2), i5 = Object.keys(o6), c8 = Object.keys(s4), u4 = Sr3(Object.keys(e3)), a3 = Sr3(Object.keys(t2)), l8 = u4.filter((f10) => !a3.includes(f10));
  return l8.length && (r3 = te4("NON_CONFORMING_NAMESPACES", `${n5} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l8.toString()}
      Received: ${Object.keys(t2).toString()}`)), re2(i5, c8) || (r3 = te4("NON_CONFORMING_NAMESPACES", `${n5} namespaces chains don't satisfy required namespaces.
      Required: ${i5.toString()}
      Approved: ${c8.toString()}`)), Object.keys(t2).forEach((f10) => {
    if (!f10.includes(":") || r3) return;
    const d6 = le3(t2[f10].accounts);
    d6.includes(f10) || (r3 = te4("NON_CONFORMING_NAMESPACES", `${n5} namespaces accounts don't satisfy namespace accounts for ${f10}
        Required: ${f10}
        Approved: ${d6.toString()}`));
  }), i5.forEach((f10) => {
    r3 || (re2(o6[f10].methods, s4[f10].methods) ? re2(o6[f10].events, s4[f10].events) || (r3 = te4("NON_CONFORMING_NAMESPACES", `${n5} namespaces events don't satisfy namespace events for ${f10}`)) : r3 = te4("NON_CONFORMING_NAMESPACES", `${n5} namespaces methods don't satisfy namespace methods for ${f10}`));
  }), r3;
}
function Ji(e3) {
  const t2 = {};
  return Object.keys(e3).forEach((n5) => {
    var r3;
    n5.includes(":") ? t2[n5] = e3[n5] : (r3 = e3[n5].chains) == null || r3.forEach((o6) => {
      t2[o6] = { methods: e3[n5].methods, events: e3[n5].events };
    });
  }), t2;
}
function Sr3(e3) {
  return [...new Set(e3.map((t2) => t2.includes(":") ? t2.split(":")[0] : t2))];
}
function Yi(e3) {
  const t2 = {};
  return Object.keys(e3).forEach((n5) => {
    if (n5.includes(":")) t2[n5] = e3[n5];
    else {
      const r3 = le3(e3[n5].accounts);
      r3 == null ? void 0 : r3.forEach((o6) => {
        t2[o6] = { accounts: e3[n5].accounts.filter((s4) => s4.includes(`${o6}:`)), methods: e3[n5].methods, events: e3[n5].events };
      });
    }
  }), t2;
}
function Xi(e3, t2) {
  return Ge3(e3, false) && e3 <= t2.max && e3 >= t2.min;
}
var Bt3 = {};
var ec = class {
  static get(t2) {
    return Bt3[t2];
  }
  static set(t2, n5) {
    Bt3[t2] = n5;
  }
  static delete(t2) {
    delete Bt3[t2];
  }
};

// ../node_modules/@walletconnect/sign-client/dist/index.es.js
var import_events8 = __toESM(require_events());
var De3 = "wc";
var Le3 = 2;
var ke4 = "client";
var we4 = `${De3}@${Le3}:${ke4}:`;
var me4 = { name: ke4, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me4 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt3 = "proposal";
var $e3 = "Proposal expired";
var ht4 = "session";
var J5 = import_time6.SEVEN_DAYS;
var dt3 = "engine";
var N10 = { wc_sessionPropose: { req: { ttl: import_time6.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time6.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time6.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time6.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time6.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time6.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time6.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e5 = { min: import_time6.FIVE_MINUTES, max: import_time6.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ue5 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut3 = "request";
var gt4 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt4 = "wc";
var wt4 = "auth";
var mt3 = "authKeys";
var _t3 = "pairingTopics";
var Et5 = "requests";
var ae3 = `${yt4}@${1.5}:${wt4}:`;
var ce3 = `${ae3}:PUB_KEY`;
var Rs2 = Object.defineProperty;
var vs3 = Object.defineProperties;
var Is3 = Object.getOwnPropertyDescriptors;
var ft3 = Object.getOwnPropertySymbols;
var Ts2 = Object.prototype.hasOwnProperty;
var qs3 = Object.prototype.propertyIsEnumerable;
var Ke5 = (S5, n5, e3) => n5 in S5 ? Rs2(S5, n5, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n5] = e3;
var v5 = (S5, n5) => {
  for (var e3 in n5 || (n5 = {})) Ts2.call(n5, e3) && Ke5(S5, e3, n5[e3]);
  if (ft3) for (var e3 of ft3(n5)) qs3.call(n5, e3) && Ke5(S5, e3, n5[e3]);
  return S5;
};
var b4 = (S5, n5) => vs3(S5, Is3(n5));
var c6 = (S5, n5, e3) => Ke5(S5, typeof n5 != "symbol" ? n5 + "" : n5, e3);
var Ps3 = class extends V {
  constructor(n5) {
    super(n5), c6(this, "name", dt3), c6(this, "events", new import_events8.default()), c6(this, "initialized", false), c6(this, "requestQueue", { state: $2.idle, queue: [] }), c6(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c6(this, "requestQueueDelay", import_time6.ONE_SECOND), c6(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c6(this, "recentlyDeletedLimit", 200), c6(this, "relayMessageCache", []), c6(this, "pendingSessions", /* @__PURE__ */ new Map()), c6(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N10) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time6.toMiliseconds)(this.requestQueueDelay)));
    }), c6(this, "connect", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t2 = b4(v5({}, e3), { requiredNamespaces: e3.requiredNamespaces || {}, optionalNamespaces: e3.optionalNamespaces || {} });
      await this.isValidConnect(t2);
      const { pairingTopic: s4, requiredNamespaces: i5, optionalNamespaces: r3, sessionProperties: o6, scopedProperties: a3, relays: l8 } = t2;
      let p6 = s4, h6, u4 = false;
      try {
        if (p6) {
          const T4 = this.client.core.pairing.pairings.get(p6);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u4 = T4.active;
        }
      } catch (T4) {
        throw this.client.logger.error(`connect() -> pairing.get(${p6}) failed`), T4;
      }
      if (!p6 || !u4) {
        const { topic: T4, uri: U3 } = await this.client.core.pairing.create();
        p6 = T4, h6 = U3;
      }
      if (!p6) {
        const { message: T4 } = te4("NO_MATCHING_KEY", `connect() pairing topic: ${p6}`);
        throw new Error(T4);
      }
      const d6 = await this.client.core.crypto.generateKeyPair(), w6 = N10.wc_sessionPropose.req.ttl || import_time6.FIVE_MINUTES, m4 = po4(w6), f10 = b4(v5(v5({ requiredNamespaces: i5, optionalNamespaces: r3, relays: l8 ?? [{ protocol: xt3 }], proposer: { publicKey: d6, metadata: this.client.metadata }, expiryTimestamp: m4, pairingTopic: p6 }, o6 && { sessionProperties: o6 }), a3 && { scopedProperties: a3 }), { id: payloadId() }), _4 = yo4("session_connect", f10.id), { reject: g5, resolve: A4, done: D3 } = ao4(w6, $e3), I4 = ({ id: T4 }) => {
        T4 === f10.id && (this.client.events.off("proposal_expire", I4), this.pendingSessions.delete(f10.id), this.events.emit(_4, { error: { message: $e3, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I4), this.events.once(_4, ({ error: T4, session: U3 }) => {
        this.client.events.off("proposal_expire", I4), T4 ? g5(T4) : U3 && A4(U3);
      }), await this.sendRequest({ topic: p6, method: "wc_sessionPropose", params: f10, throwOnFailedPublish: true, clientRpcId: f10.id }), await this.setProposal(f10.id, f10), { uri: h6, approval: D3 };
    }), c6(this, "pair", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e3);
      } catch (t2) {
        throw this.client.logger.error("pair() failed"), t2;
      }
    }), c6(this, "approve", async (e3) => {
      var t2, s4, i5;
      const r3 = this.client.core.eventClient.createEvent({ properties: { topic: (t2 = e3 == null ? void 0 : e3.id) == null ? void 0 : t2.toString(), trace: [Qs2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q3) {
        throw r3.setError(er3.no_internet_connection), q3;
      }
      try {
        await this.isValidProposalId(e3 == null ? void 0 : e3.id);
      } catch (q3) {
        throw this.client.logger.error(`approve() -> proposal.get(${e3 == null ? void 0 : e3.id}) failed`), r3.setError(er3.proposal_not_found), q3;
      }
      try {
        await this.isValidApprove(e3);
      } catch (q3) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r3.setError(er3.session_approve_namespace_validation_failure), q3;
      }
      const { id: o6, relayProtocol: a3, namespaces: l8, sessionProperties: p6, scopedProperties: h6, sessionConfig: u4 } = e3, d6 = this.client.proposal.get(o6);
      this.client.core.eventClient.deleteEvent({ eventId: r3.eventId });
      const { pairingTopic: w6, proposer: m4, requiredNamespaces: f10, optionalNamespaces: _4 } = d6;
      let g5 = (s4 = this.client.core.eventClient) == null ? void 0 : s4.getEvent({ topic: w6 });
      g5 || (g5 = (i5 = this.client.core.eventClient) == null ? void 0 : i5.createEvent({ type: Qs2.session_approve_started, properties: { topic: w6, trace: [Qs2.session_approve_started, Qs2.session_namespaces_validation_success] } }));
      const A4 = await this.client.core.crypto.generateKeyPair(), D3 = m4.publicKey, I4 = await this.client.core.crypto.generateSharedKey(A4, D3), T4 = v5(v5(v5({ relay: { protocol: a3 ?? "irn" }, namespaces: l8, controller: { publicKey: A4, metadata: this.client.metadata }, expiry: po4(J5) }, p6 && { sessionProperties: p6 }), h6 && { scopedProperties: h6 }), u4 && { sessionConfig: u4 }), U3 = Q2.relay;
      g5.addTrace(Qs2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I4, { transportType: U3 });
      } catch (q3) {
        throw g5.setError(er3.subscribe_session_topic_failure), q3;
      }
      g5.addTrace(Qs2.subscribe_session_topic_success);
      const fe5 = b4(v5({}, T4), { topic: I4, requiredNamespaces: f10, optionalNamespaces: _4, pairingTopic: w6, acknowledged: false, self: T4.controller, peer: { publicKey: m4.publicKey, metadata: m4.metadata }, controller: A4, transportType: Q2.relay });
      await this.client.session.set(I4, fe5), g5.addTrace(Qs2.store_session);
      try {
        g5.addTrace(Qs2.publishing_session_settle), await this.sendRequest({ topic: I4, method: "wc_sessionSettle", params: T4, throwOnFailedPublish: true }).catch((q3) => {
          throw g5 == null ? void 0 : g5.setError(er3.session_settle_publish_failure), q3;
        }), g5.addTrace(Qs2.session_settle_publish_success), g5.addTrace(Qs2.publishing_session_approve), await this.sendResult({ id: o6, topic: w6, result: { relay: { protocol: a3 ?? "irn" }, responderPublicKey: A4 }, throwOnFailedPublish: true }).catch((q3) => {
          throw g5 == null ? void 0 : g5.setError(er3.session_approve_publish_failure), q3;
        }), g5.addTrace(Qs2.session_approve_publish_success);
      } catch (q3) {
        throw this.client.logger.error(q3), this.client.session.delete(I4, de4("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I4), q3;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: g5.eventId }), await this.client.core.pairing.updateMetadata({ topic: w6, metadata: m4.metadata }), await this.client.proposal.delete(o6, de4("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: w6 }), await this.setExpiry(I4, po4(J5)), { topic: I4, acknowledged: () => Promise.resolve(this.client.session.get(I4)) };
    }), c6(this, "reject", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e3);
      } catch (r3) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r3;
      }
      const { id: t2, reason: s4 } = e3;
      let i5;
      try {
        i5 = this.client.proposal.get(t2).pairingTopic;
      } catch (r3) {
        throw this.client.logger.error(`reject() -> proposal.get(${t2}) failed`), r3;
      }
      i5 && (await this.sendError({ id: t2, topic: i5, error: s4, rpcOpts: N10.wc_sessionPropose.reject }), await this.client.proposal.delete(t2, de4("USER_DISCONNECTED")));
    }), c6(this, "update", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e3);
      } catch (h6) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h6;
      }
      const { topic: t2, namespaces: s4 } = e3, { done: i5, resolve: r3, reject: o6 } = ao4(), a3 = payloadId(), l8 = getBigIntRpcId().toString(), p6 = this.client.session.get(t2).namespaces;
      return this.events.once(yo4("session_update", a3), ({ error: h6 }) => {
        h6 ? o6(h6) : r3();
      }), await this.client.session.update(t2, { namespaces: s4 }), await this.sendRequest({ topic: t2, method: "wc_sessionUpdate", params: { namespaces: s4 }, throwOnFailedPublish: true, clientRpcId: a3, relayRpcId: l8 }).catch((h6) => {
        this.client.logger.error(h6), this.client.session.update(t2, { namespaces: p6 }), o6(h6);
      }), { acknowledged: i5 };
    }), c6(this, "extend", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e3);
      } catch (a3) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a3;
      }
      const { topic: t2 } = e3, s4 = payloadId(), { done: i5, resolve: r3, reject: o6 } = ao4();
      return this.events.once(yo4("session_extend", s4), ({ error: a3 }) => {
        a3 ? o6(a3) : r3();
      }), await this.setExpiry(t2, po4(J5)), this.sendRequest({ topic: t2, method: "wc_sessionExtend", params: {}, clientRpcId: s4, throwOnFailedPublish: true }).catch((a3) => {
        o6(a3);
      }), { acknowledged: i5 };
    }), c6(this, "request", async (e3) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e3);
      } catch (_4) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), _4;
      }
      const { chainId: t2, request: s4, topic: i5, expiry: r3 = N10.wc_sessionRequest.req.ttl } = e3, o6 = this.client.session.get(i5);
      (o6 == null ? void 0 : o6.transportType) === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = payloadId(), l8 = getBigIntRpcId().toString(), { done: p6, resolve: h6, reject: u4 } = ao4(r3, "Request expired. Please try again.");
      this.events.once(yo4("session_request", a3), ({ error: _4, result: g5 }) => {
        _4 ? u4(_4) : h6(g5);
      });
      const d6 = "wc_sessionRequest", w6 = this.getAppLinkIfEnabled(o6.peer.metadata, o6.transportType);
      if (w6) return await this.sendRequest({ clientRpcId: a3, relayRpcId: l8, topic: i5, method: d6, params: { request: b4(v5({}, s4), { expiryTimestamp: po4(r3) }), chainId: t2 }, expiry: r3, throwOnFailedPublish: true, appLink: w6 }).catch((_4) => u4(_4)), this.client.events.emit("session_request_sent", { topic: i5, request: s4, chainId: t2, id: a3 }), await p6();
      const m4 = { request: b4(v5({}, s4), { expiryTimestamp: po4(r3) }), chainId: t2 }, f10 = this.shouldSetTVF(d6, m4);
      return await Promise.all([new Promise(async (_4) => {
        await this.sendRequest(v5({ clientRpcId: a3, relayRpcId: l8, topic: i5, method: d6, params: m4, expiry: r3, throwOnFailedPublish: true }, f10 && { tvf: this.getTVFParams(a3, m4) })).catch((g5) => u4(g5)), this.client.events.emit("session_request_sent", { topic: i5, request: s4, chainId: t2, id: a3 }), _4();
      }), new Promise(async (_4) => {
        var g5;
        if (!((g5 = o6.sessionConfig) != null && g5.disableDeepLink)) {
          const A4 = await bo3(this.client.core.storage, Me4);
          await mo3({ id: a3, topic: i5, wcDeepLink: A4 });
        }
        _4();
      }), p6()]).then((_4) => _4[2]);
    }), c6(this, "respond", async (e3) => {
      this.isInitialized(), await this.isValidRespond(e3);
      const { topic: t2, response: s4 } = e3, { id: i5 } = s4, r3 = this.client.session.get(t2);
      r3.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const o6 = this.getAppLinkIfEnabled(r3.peer.metadata, r3.transportType);
      isJsonRpcResult(s4) ? await this.sendResult({ id: i5, topic: t2, result: s4.result, throwOnFailedPublish: true, appLink: o6 }) : isJsonRpcError(s4) && await this.sendError({ id: i5, topic: t2, error: s4.error, appLink: o6 }), this.cleanupAfterResponse(e3);
    }), c6(this, "ping", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e3);
      } catch (s4) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s4;
      }
      const { topic: t2 } = e3;
      if (this.client.session.keys.includes(t2)) {
        const s4 = payloadId(), i5 = getBigIntRpcId().toString(), { done: r3, resolve: o6, reject: a3 } = ao4();
        this.events.once(yo4("session_ping", s4), ({ error: l8 }) => {
          l8 ? a3(l8) : o6();
        }), await Promise.all([this.sendRequest({ topic: t2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s4, relayRpcId: i5 }), r3()]);
      } else this.client.core.pairing.pairings.keys.includes(t2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t2 }));
    }), c6(this, "emit", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e3);
      const { topic: t2, event: s4, chainId: i5 } = e3, r3 = getBigIntRpcId().toString(), o6 = payloadId();
      await this.sendRequest({ topic: t2, method: "wc_sessionEvent", params: { event: s4, chainId: i5 }, throwOnFailedPublish: true, relayRpcId: r3, clientRpcId: o6 });
    }), c6(this, "disconnect", async (e3) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e3);
      const { topic: t2 } = e3;
      if (this.client.session.keys.includes(t2)) await this.sendRequest({ topic: t2, method: "wc_sessionDelete", params: de4("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t2)) await this.client.core.pairing.disconnect({ topic: t2 });
      else {
        const { message: s4 } = te4("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t2}`);
        throw new Error(s4);
      }
    }), c6(this, "find", (e3) => (this.isInitialized(), this.client.session.getAll().filter((t2) => Pi4(t2, e3)))), c6(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c6(this, "authenticate", async (e3, t2) => {
      var s4;
      this.isInitialized(), this.isValidAuthenticate(e3);
      const i5 = t2 && this.client.core.linkModeSupportedApps.includes(t2) && ((s4 = this.client.metadata.redirect) == null ? void 0 : s4.linkMode), r3 = i5 ? Q2.link_mode : Q2.relay;
      r3 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o6, statement: a3 = "", uri: l8, domain: p6, nonce: h6, type: u4, exp: d6, nbf: w6, methods: m4 = [], expiry: f10 } = e3, _4 = [...e3.resources || []], { topic: g5, uri: A4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r3 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: g5, uri: A4 } });
      const D3 = await this.client.core.crypto.generateKeyPair(), I4 = ii3(D3);
      if (await Promise.all([this.client.auth.authKeys.set(ce3, { responseTopic: I4, publicKey: D3 }), this.client.auth.pairingTopics.set(I4, { topic: I4, pairingTopic: g5 })]), await this.client.core.relayer.subscribe(I4, { transportType: r3 }), this.client.logger.info(`sending request to new pairing topic: ${g5}`), m4.length > 0) {
        const { namespace: x8 } = Ye3(o6[0]);
        let L5 = rs(x8, "request", m4);
        Me3(_4) && (L5 = os(L5, _4.pop())), _4.push(L5);
      }
      const T4 = f10 && f10 > N10.wc_sessionAuthenticate.req.ttl ? f10 : N10.wc_sessionAuthenticate.req.ttl, U3 = { authPayload: { type: u4 ?? "caip122", chains: o6, statement: a3, aud: l8, domain: p6, version: "1", nonce: h6, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d6, nbf: w6, resources: _4 }, requester: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: po4(T4) }, fe5 = { eip155: { chains: o6, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m4])], events: ["chainChanged", "accountsChanged"] } }, q3 = { requiredNamespaces: {}, optionalNamespaces: fe5, relays: [{ protocol: "irn" }], pairingTopic: g5, proposer: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: po4(N10.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Rt5, resolve: je7, reject: Se7 } = ao4(T4, "Request expired"), te6 = payloadId(), le5 = yo4("session_connect", q3.id), Re4 = yo4("session_request", te6), pe4 = async ({ error: x8, session: L5 }) => {
        this.events.off(Re4, ve6), x8 ? Se7(x8) : L5 && je7({ session: L5 });
      }, ve6 = async (x8) => {
        var L5, Fe4, Qe4;
        if (await this.deletePendingAuthRequest(te6, { message: "fulfilled", code: 0 }), x8.error) {
          const ie6 = de4("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return x8.error.code === ie6.code ? void 0 : (this.events.off(le5, pe4), Se7(x8.error.message));
        }
        await this.deleteProposal(q3.id), this.events.off(le5, pe4);
        const { cacaos: He7, responder: Q5 } = x8.result, Te5 = [], ze7 = [];
        for (const ie6 of He7) {
          await Zo2({ cacao: ie6, projectId: this.client.core.projectId }) || (this.client.logger.error(ie6, "Signature verification failed"), Se7(de4("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe6 } = ie6, Pe6 = Me3(qe6.resources), Ye6 = [In3(qe6.iss)], vt6 = ut2(qe6.iss);
          if (Pe6) {
            const Ne6 = ss(Pe6), It6 = is(Pe6);
            Te5.push(...Ne6), Ye6.push(...It6);
          }
          for (const Ne6 of Ye6) ze7.push(`${Ne6}:${vt6}`);
        }
        const se6 = await this.client.core.crypto.generateSharedKey(D3, Q5.publicKey);
        let he4;
        Te5.length > 0 && (he4 = { topic: se6, acknowledged: true, self: { publicKey: D3, metadata: this.client.metadata }, peer: Q5, controller: Q5.publicKey, expiry: po4(J5), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: g5, namespaces: Ri2([...new Set(Te5)], [...new Set(ze7)]), transportType: r3 }, await this.client.core.relayer.subscribe(se6, { transportType: r3 }), await this.client.session.set(se6, he4), g5 && await this.client.core.pairing.updateMetadata({ topic: g5, metadata: Q5.metadata }), he4 = this.client.session.get(se6)), (L5 = this.client.metadata.redirect) != null && L5.linkMode && (Fe4 = Q5.metadata.redirect) != null && Fe4.linkMode && (Qe4 = Q5.metadata.redirect) != null && Qe4.universal && t2 && (this.client.core.addLinkModeSupportedApp(Q5.metadata.redirect.universal), this.client.session.update(se6, { transportType: Q2.link_mode })), je7({ auths: He7, session: he4 });
      };
      this.events.once(le5, pe4), this.events.once(Re4, ve6);
      let Ie6;
      try {
        if (i5) {
          const x8 = formatJsonRpcRequest("wc_sessionAuthenticate", U3, te6);
          this.client.core.history.set(g5, x8);
          const L5 = await this.client.core.crypto.encode("", x8, { type: _e4, encoding: ti2 });
          Ie6 = xi2(t2, g5, L5);
        } else await Promise.all([this.sendRequest({ topic: g5, method: "wc_sessionAuthenticate", params: U3, expiry: e3.expiry, throwOnFailedPublish: true, clientRpcId: te6 }), this.sendRequest({ topic: g5, method: "wc_sessionPropose", params: q3, expiry: N10.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q3.id })]);
      } catch (x8) {
        throw this.events.off(le5, pe4), this.events.off(Re4, ve6), x8;
      }
      return await this.setProposal(q3.id, q3), await this.setAuthRequest(te6, { request: b4(v5({}, U3), { verifyContext: {} }), pairingTopic: g5, transportType: r3 }), { uri: Ie6 ?? A4, response: Rt5 };
    }), c6(this, "approveSessionAuthenticate", async (e3) => {
      const { id: t2, auths: s4 } = e3, i5 = this.client.core.eventClient.createEvent({ properties: { topic: t2.toString(), trace: [tr3.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (f10) {
        throw i5.setError(ir3.no_internet_connection), f10;
      }
      const r3 = this.getPendingAuthRequest(t2);
      if (!r3) throw i5.setError(ir3.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t2}`);
      const o6 = r3.transportType || Q2.relay;
      o6 === Q2.relay && await this.confirmOnlineStateOrThrow();
      const a3 = r3.requester.publicKey, l8 = await this.client.core.crypto.generateKeyPair(), p6 = ii3(a3), h6 = { type: Oe3, receiverPublicKey: a3, senderPublicKey: l8 }, u4 = [], d6 = [];
      for (const f10 of s4) {
        if (!await Zo2({ cacao: f10, projectId: this.client.core.projectId })) {
          i5.setError(ir3.invalid_cacao);
          const I4 = de4("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t2, topic: p6, error: I4, encodeOpts: h6 }), new Error(I4.message);
        }
        i5.addTrace(tr3.cacaos_verified);
        const { p: _4 } = f10, g5 = Me3(_4.resources), A4 = [In3(_4.iss)], D3 = ut2(_4.iss);
        if (g5) {
          const I4 = ss(g5), T4 = is(g5);
          u4.push(...I4), A4.push(...T4);
        }
        for (const I4 of A4) d6.push(`${I4}:${D3}`);
      }
      const w6 = await this.client.core.crypto.generateSharedKey(l8, a3);
      i5.addTrace(tr3.create_authenticated_session_topic);
      let m4;
      if ((u4 == null ? void 0 : u4.length) > 0) {
        m4 = { topic: w6, acknowledged: true, self: { publicKey: l8, metadata: this.client.metadata }, peer: { publicKey: a3, metadata: r3.requester.metadata }, controller: a3, expiry: po4(J5), authentication: s4, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r3.pairingTopic, namespaces: Ri2([...new Set(u4)], [...new Set(d6)]), transportType: o6 }, i5.addTrace(tr3.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w6, { transportType: o6 });
        } catch (f10) {
          throw i5.setError(ir3.subscribe_authenticated_session_topic_failure), f10;
        }
        i5.addTrace(tr3.subscribe_authenticated_session_topic_success), await this.client.session.set(w6, m4), i5.addTrace(tr3.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r3.pairingTopic, metadata: r3.requester.metadata });
      }
      i5.addTrace(tr3.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p6, id: t2, result: { cacaos: s4, responder: { publicKey: l8, metadata: this.client.metadata } }, encodeOpts: h6, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r3.requester.metadata, o6) });
      } catch (f10) {
        throw i5.setError(ir3.authenticated_session_approve_publish_failure), f10;
      }
      return await this.client.auth.requests.delete(t2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r3.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i5.eventId }), { session: m4 };
    }), c6(this, "rejectSessionAuthenticate", async (e3) => {
      this.isInitialized();
      const { id: t2, reason: s4 } = e3, i5 = this.getPendingAuthRequest(t2);
      if (!i5) throw new Error(`Could not find pending auth request with id ${t2}`);
      i5.transportType === Q2.relay && await this.confirmOnlineStateOrThrow();
      const r3 = i5.requester.publicKey, o6 = await this.client.core.crypto.generateKeyPair(), a3 = ii3(r3), l8 = { type: Oe3, receiverPublicKey: r3, senderPublicKey: o6 };
      await this.sendError({ id: t2, topic: a3, error: s4, encodeOpts: l8, rpcOpts: N10.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i5.requester.metadata, i5.transportType) }), await this.client.auth.requests.delete(t2, { message: "rejected", code: 0 }), await this.client.proposal.delete(t2, de4("USER_DISCONNECTED"));
    }), c6(this, "formatAuthMessage", (e3) => {
      this.isInitialized();
      const { request: t2, iss: s4 } = e3;
      return On3(t2, s4);
    }), c6(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e3 = this.relayMessageCache.shift();
          e3 && await this.onRelayMessage(e3);
        } catch (e3) {
          this.client.logger.error(e3);
        }
      }, 50);
    }), c6(this, "cleanupDuplicatePairings", async (e3) => {
      if (e3.pairingTopic) try {
        const t2 = this.client.core.pairing.pairings.get(e3.pairingTopic), s4 = this.client.core.pairing.pairings.getAll().filter((i5) => {
          var r3, o6;
          return ((r3 = i5.peerMetadata) == null ? void 0 : r3.url) && ((o6 = i5.peerMetadata) == null ? void 0 : o6.url) === e3.peer.metadata.url && i5.topic && i5.topic !== t2.topic;
        });
        if (s4.length === 0) return;
        this.client.logger.info(`Cleaning up ${s4.length} duplicate pairing(s)`), await Promise.all(s4.map((i5) => this.client.core.pairing.disconnect({ topic: i5.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t2) {
        this.client.logger.error(t2);
      }
    }), c6(this, "deleteSession", async (e3) => {
      var t2;
      const { topic: s4, expirerHasDeleted: i5 = false, emitEvent: r3 = true, id: o6 = 0 } = e3, { self: a3 } = this.client.session.get(s4);
      await this.client.core.relayer.unsubscribe(s4), await this.client.session.delete(s4, de4("USER_DISCONNECTED")), this.addToRecentlyDeleted(s4, "session"), this.client.core.crypto.keychain.has(a3.publicKey) && await this.client.core.crypto.deleteKeyPair(a3.publicKey), this.client.core.crypto.keychain.has(s4) && await this.client.core.crypto.deleteSymKey(s4), i5 || this.client.core.expirer.del(s4), this.client.core.storage.removeItem(Me4).catch((l8) => this.client.logger.warn(l8)), this.getPendingSessionRequests().forEach((l8) => {
        l8.topic === s4 && this.deletePendingSessionRequest(l8.id, de4("USER_DISCONNECTED"));
      }), s4 === ((t2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t2.topic) && (this.sessionRequestQueue.state = $2.idle), r3 && this.client.events.emit("session_delete", { id: o6, topic: s4 });
    }), c6(this, "deleteProposal", async (e3, t2) => {
      if (t2) try {
        const s4 = this.client.proposal.get(e3), i5 = this.client.core.eventClient.getEvent({ topic: s4.pairingTopic });
        i5 == null ? void 0 : i5.setError(er3.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e3, de4("USER_DISCONNECTED")), t2 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "proposal");
    }), c6(this, "deletePendingSessionRequest", async (e3, t2, s4 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e3, t2), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]), this.addToRecentlyDeleted(e3, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i5) => i5.id !== e3), s4 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e3 }));
    }), c6(this, "deletePendingAuthRequest", async (e3, t2, s4 = false) => {
      await Promise.all([this.client.auth.requests.delete(e3, t2), s4 ? Promise.resolve() : this.client.core.expirer.del(e3)]);
    }), c6(this, "setExpiry", async (e3, t2) => {
      this.client.session.keys.includes(e3) && (this.client.core.expirer.set(e3, t2), await this.client.session.update(e3, { expiry: t2 }));
    }), c6(this, "setProposal", async (e3, t2) => {
      this.client.core.expirer.set(e3, po4(N10.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e3, t2);
    }), c6(this, "setAuthRequest", async (e3, t2) => {
      const { request: s4, pairingTopic: i5, transportType: r3 = Q2.relay } = t2;
      this.client.core.expirer.set(e3, s4.expiryTimestamp), await this.client.auth.requests.set(e3, { authPayload: s4.authPayload, requester: s4.requester, expiryTimestamp: s4.expiryTimestamp, id: e3, pairingTopic: i5, verifyContext: s4.verifyContext, transportType: r3 });
    }), c6(this, "setPendingSessionRequest", async (e3) => {
      const { id: t2, topic: s4, params: i5, verifyContext: r3 } = e3, o6 = i5.request.expiryTimestamp || po4(N10.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t2, o6), await this.client.pendingRequest.set(t2, { id: t2, topic: s4, params: i5, verifyContext: r3 });
    }), c6(this, "sendRequest", async (e3) => {
      const { topic: t2, method: s4, params: i5, expiry: r3, relayRpcId: o6, clientRpcId: a3, throwOnFailedPublish: l8, appLink: p6, tvf: h6 } = e3, u4 = formatJsonRpcRequest(s4, i5, a3);
      let d6;
      const w6 = !!p6;
      try {
        const _4 = w6 ? ti2 : At3;
        d6 = await this.client.core.crypto.encode(t2, u4, { encoding: _4 });
      } catch (_4) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t2} failed`), _4;
      }
      let m4;
      if (gt4.includes(s4)) {
        const _4 = ci3(JSON.stringify(u4)), g5 = ci3(d6);
        m4 = await this.client.core.verify.register({ id: g5, decryptedId: _4 });
      }
      const f10 = N10[s4].req;
      if (f10.attestation = m4, r3 && (f10.ttl = r3), o6 && (f10.id = o6), this.client.core.history.set(t2, u4), w6) {
        const _4 = xi2(p6, t2, d6);
        await global.Linking.openURL(_4, this.client.name);
      } else {
        const _4 = N10[s4].req;
        r3 && (_4.ttl = r3), o6 && (_4.id = o6), _4.tvf = b4(v5({}, h6), { correlationId: u4.id }), l8 ? (_4.internal = b4(v5({}, _4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t2, d6, _4)) : this.client.core.relayer.publish(t2, d6, _4).catch((g5) => this.client.logger.error(g5));
      }
      return u4.id;
    }), c6(this, "sendResult", async (e3) => {
      const { id: t2, topic: s4, result: i5, throwOnFailedPublish: r3, encodeOpts: o6, appLink: a3 } = e3, l8 = formatJsonRpcResult(t2, i5);
      let p6;
      const h6 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w6 = h6 ? ti2 : At3;
        p6 = await this.client.core.crypto.encode(s4, l8, b4(v5({}, o6 || {}), { encoding: w6 }));
      } catch (w6) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s4} failed`), w6;
      }
      let u4, d6;
      try {
        u4 = await this.client.core.history.get(s4, t2);
        const w6 = u4.request;
        try {
          this.shouldSetTVF(w6.method, w6.params) && (d6 = this.getTVFParams(t2, w6.params, i5));
        } catch (m4) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m4);
        }
      } catch (w6) {
        throw this.client.logger.error(`sendResult() -> history.get(${s4}, ${t2}) failed`), w6;
      }
      if (h6) {
        const w6 = xi2(a3, s4, p6);
        await global.Linking.openURL(w6, this.client.name);
      } else {
        const w6 = u4.request.method, m4 = N10[w6].res;
        m4.tvf = b4(v5({}, d6), { correlationId: t2 }), r3 ? (m4.internal = b4(v5({}, m4.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s4, p6, m4)) : this.client.core.relayer.publish(s4, p6, m4).catch((f10) => this.client.logger.error(f10));
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "sendError", async (e3) => {
      const { id: t2, topic: s4, error: i5, encodeOpts: r3, rpcOpts: o6, appLink: a3 } = e3, l8 = formatJsonRpcError(t2, i5);
      let p6;
      const h6 = a3 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d6 = h6 ? ti2 : At3;
        p6 = await this.client.core.crypto.encode(s4, l8, b4(v5({}, r3 || {}), { encoding: d6 }));
      } catch (d6) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s4} failed`), d6;
      }
      let u4;
      try {
        u4 = await this.client.core.history.get(s4, t2);
      } catch (d6) {
        throw this.client.logger.error(`sendError() -> history.get(${s4}, ${t2}) failed`), d6;
      }
      if (h6) {
        const d6 = xi2(a3, s4, p6);
        await global.Linking.openURL(d6, this.client.name);
      } else {
        const d6 = u4.request.method, w6 = o6 || N10[d6].res;
        this.client.core.relayer.publish(s4, p6, w6);
      }
      await this.client.core.history.resolve(l8);
    }), c6(this, "cleanup", async () => {
      const e3 = [], t2 = [];
      this.client.session.getAll().forEach((s4) => {
        let i5 = false;
        go4(s4.expiry) && (i5 = true), this.client.core.crypto.keychain.has(s4.topic) || (i5 = true), i5 && e3.push(s4.topic);
      }), this.client.proposal.getAll().forEach((s4) => {
        go4(s4.expiryTimestamp) && t2.push(s4.id);
      }), await Promise.all([...e3.map((s4) => this.deleteSession({ topic: s4 })), ...t2.map((s4) => this.deleteProposal(s4))]);
    }), c6(this, "onProviderMessageEvent", async (e3) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e3) : await this.onRelayMessage(e3);
    }), c6(this, "onRelayEventRequest", async (e3) => {
      this.requestQueue.queue.push(e3), await this.processRequestsQueue();
    }), c6(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e3 = this.requestQueue.queue.shift();
        if (e3) try {
          await this.processRequest(e3);
        } catch (t2) {
          this.client.logger.warn(t2);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c6(this, "processRequest", async (e3) => {
      const { topic: t2, payload: s4, attestation: i5, transportType: r3, encryptedId: o6 } = e3, a3 = s4.method;
      if (!this.shouldIgnorePairingRequest({ topic: t2, requestMethod: a3 })) switch (a3) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t2, payload: s4, attestation: i5, encryptedId: o6 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t2, s4);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t2, s4);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t2, s4);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t2, s4);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t2, s4);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t2, payload: s4, attestation: i5, encryptedId: o6, transportType: r3 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t2, s4);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t2, payload: s4, attestation: i5, encryptedId: o6, transportType: r3 });
        default:
          return this.client.logger.info(`Unsupported request method ${a3}`);
      }
    }), c6(this, "onRelayEventResponse", async (e3) => {
      const { topic: t2, payload: s4, transportType: i5 } = e3, r3 = (await this.client.core.history.get(t2, s4.id)).request.method;
      switch (r3) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t2, s4, i5);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t2, s4);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t2, s4);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t2, s4);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t2, s4);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t2, s4);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t2, s4);
        default:
          return this.client.logger.info(`Unsupported response method ${r3}`);
      }
    }), c6(this, "onRelayEventUnknownPayload", (e3) => {
      const { topic: t2 } = e3, { message: s4 } = te4("MISSING_OR_INVALID", `Decoded payload on topic ${t2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s4);
    }), c6(this, "shouldIgnorePairingRequest", (e3) => {
      const { topic: t2, requestMethod: s4 } = e3, i5 = this.expectedPairingMethodMap.get(t2);
      return !i5 || i5.includes(s4) ? false : !!(i5.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c6(this, "onSessionProposeRequest", async (e3) => {
      const { topic: t2, payload: s4, attestation: i5, encryptedId: r3 } = e3, { params: o6, id: a3 } = s4;
      try {
        const l8 = this.client.core.eventClient.getEvent({ topic: t2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l8 == null ? void 0 : l8.setError(Y.proposal_listener_not_found)), this.isValidConnect(v5({}, s4.params));
        const p6 = o6.expiryTimestamp || po4(N10.wc_sessionPropose.req.ttl), h6 = v5({ id: a3, pairingTopic: t2, expiryTimestamp: p6 }, o6);
        await this.setProposal(a3, h6);
        const u4 = await this.getVerifyContext({ attestationId: i5, hash: ci3(JSON.stringify(s4)), encryptedId: r3, metadata: h6.proposer.metadata });
        l8 == null ? void 0 : l8.addTrace(G2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a3, params: h6, verifyContext: u4 });
      } catch (l8) {
        await this.sendError({ id: a3, topic: t2, error: l8, rpcOpts: N10.wc_sessionPropose.autoReject }), this.client.logger.error(l8);
      }
    }), c6(this, "onSessionProposeResponse", async (e3, t2, s4) => {
      const { id: i5 } = t2;
      if (isJsonRpcResult(t2)) {
        const { result: r3 } = t2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r3 });
        const o6 = this.client.proposal.get(i5);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o6 });
        const a3 = o6.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a3 });
        const l8 = r3.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l8 });
        const p6 = await this.client.core.crypto.generateSharedKey(a3, l8);
        this.pendingSessions.set(i5, { sessionTopic: p6, pairingTopic: e3, proposalId: i5, publicKey: a3 });
        const h6 = await this.client.core.relayer.subscribe(p6, { transportType: s4 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h6 }), await this.client.core.pairing.activate({ topic: e3 });
      } else if (isJsonRpcError(t2)) {
        await this.client.proposal.delete(i5, de4("USER_DISCONNECTED"));
        const r3 = yo4("session_connect", i5);
        if (this.events.listenerCount(r3) === 0) throw new Error(`emitting ${r3} without any listeners, 954`);
        this.events.emit(r3, { error: t2.error });
      }
    }), c6(this, "onSessionSettleRequest", async (e3, t2) => {
      const { id: s4, params: i5 } = t2;
      try {
        this.isValidSessionSettleRequest(i5);
        const { relay: r3, controller: o6, expiry: a3, namespaces: l8, sessionProperties: p6, scopedProperties: h6, sessionConfig: u4 } = t2.params, d6 = [...this.pendingSessions.values()].find((f10) => f10.sessionTopic === e3);
        if (!d6) return this.client.logger.error(`Pending session not found for topic ${e3}`);
        const w6 = this.client.proposal.get(d6.proposalId), m4 = b4(v5(v5(v5({ topic: e3, relay: r3, expiry: a3, namespaces: l8, acknowledged: true, pairingTopic: d6.pairingTopic, requiredNamespaces: w6.requiredNamespaces, optionalNamespaces: w6.optionalNamespaces, controller: o6.publicKey, self: { publicKey: d6.publicKey, metadata: this.client.metadata }, peer: { publicKey: o6.publicKey, metadata: o6.metadata } }, p6 && { sessionProperties: p6 }), h6 && { scopedProperties: h6 }), u4 && { sessionConfig: u4 }), { transportType: Q2.relay });
        await this.client.session.set(m4.topic, m4), await this.setExpiry(m4.topic, m4.expiry), await this.client.core.pairing.updateMetadata({ topic: d6.pairingTopic, metadata: m4.peer.metadata }), this.client.events.emit("session_connect", { session: m4 }), this.events.emit(yo4("session_connect", d6.proposalId), { session: m4 }), this.pendingSessions.delete(d6.proposalId), this.deleteProposal(d6.proposalId, false), this.cleanupDuplicatePairings(m4), await this.sendResult({ id: t2.id, topic: e3, result: true, throwOnFailedPublish: true });
      } catch (r3) {
        await this.sendError({ id: s4, topic: e3, error: r3 }), this.client.logger.error(r3);
      }
    }), c6(this, "onSessionSettleResponse", async (e3, t2) => {
      const { id: s4 } = t2;
      isJsonRpcResult(t2) ? (await this.client.session.update(e3, { acknowledged: true }), this.events.emit(yo4("session_approve", s4), {})) : isJsonRpcError(t2) && (await this.client.session.delete(e3, de4("USER_DISCONNECTED")), this.events.emit(yo4("session_approve", s4), { error: t2.error }));
    }), c6(this, "onSessionUpdateRequest", async (e3, t2) => {
      const { params: s4, id: i5 } = t2;
      try {
        const r3 = `${e3}_session_update`, o6 = ec.get(r3);
        if (o6 && this.isRequestOutOfSync(o6, i5)) {
          this.client.logger.warn(`Discarding out of sync request - ${i5}`), this.sendError({ id: i5, topic: e3, error: de4("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v5({ topic: e3 }, s4));
        try {
          ec.set(r3, i5), await this.client.session.update(e3, { namespaces: s4.namespaces }), await this.sendResult({ id: i5, topic: e3, result: true, throwOnFailedPublish: true });
        } catch (a3) {
          throw ec.delete(r3), a3;
        }
        this.client.events.emit("session_update", { id: i5, topic: e3, params: s4 });
      } catch (r3) {
        await this.sendError({ id: i5, topic: e3, error: r3 }), this.client.logger.error(r3);
      }
    }), c6(this, "isRequestOutOfSync", (e3, t2) => t2.toString().slice(0, -3) < e3.toString().slice(0, -3)), c6(this, "onSessionUpdateResponse", (e3, t2) => {
      const { id: s4 } = t2, i5 = yo4("session_update", s4);
      if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo4("session_update", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo4("session_update", s4), { error: t2.error });
    }), c6(this, "onSessionExtendRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidExtend({ topic: e3 }), await this.setExpiry(e3, po4(J5)), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s4, topic: e3 });
      } catch (i5) {
        await this.sendError({ id: s4, topic: e3, error: i5 }), this.client.logger.error(i5);
      }
    }), c6(this, "onSessionExtendResponse", (e3, t2) => {
      const { id: s4 } = t2, i5 = yo4("session_extend", s4);
      if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo4("session_extend", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo4("session_extend", s4), { error: t2.error });
    }), c6(this, "onSessionPingRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidPing({ topic: e3 }), await this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s4, topic: e3 });
      } catch (i5) {
        await this.sendError({ id: s4, topic: e3, error: i5 }), this.client.logger.error(i5);
      }
    }), c6(this, "onSessionPingResponse", (e3, t2) => {
      const { id: s4 } = t2, i5 = yo4("session_ping", s4);
      setTimeout(() => {
        if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners 2176`);
        isJsonRpcResult(t2) ? this.events.emit(yo4("session_ping", s4), {}) : isJsonRpcError(t2) && this.events.emit(yo4("session_ping", s4), { error: t2.error });
      }, 500);
    }), c6(this, "onSessionDeleteRequest", async (e3, t2) => {
      const { id: s4 } = t2;
      try {
        this.isValidDisconnect({ topic: e3, reason: t2.params }), Promise.all([new Promise((i5) => {
          this.client.core.relayer.once(C3.publish, async () => {
            i5(await this.deleteSession({ topic: e3, id: s4 }));
          });
        }), this.sendResult({ id: s4, topic: e3, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e3, error: de4("USER_DISCONNECTED") })]).catch((i5) => this.client.logger.error(i5));
      } catch (i5) {
        this.client.logger.error(i5);
      }
    }), c6(this, "onSessionRequest", async (e3) => {
      var t2, s4, i5;
      const { topic: r3, payload: o6, attestation: a3, encryptedId: l8, transportType: p6 } = e3, { id: h6, params: u4 } = o6;
      try {
        await this.isValidRequest(v5({ topic: r3 }, u4));
        const d6 = this.client.session.get(r3), w6 = await this.getVerifyContext({ attestationId: a3, hash: ci3(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u4, h6))), encryptedId: l8, metadata: d6.peer.metadata, transportType: p6 }), m4 = { id: h6, topic: r3, params: u4, verifyContext: w6 };
        await this.setPendingSessionRequest(m4), p6 === Q2.link_mode && (t2 = d6.peer.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp((s4 = d6.peer.metadata.redirect) == null ? void 0 : s4.universal), (i5 = this.client.signConfig) != null && i5.disableRequestQueue ? this.emitSessionRequest(m4) : (this.addSessionRequestToSessionRequestQueue(m4), this.processSessionRequestQueue());
      } catch (d6) {
        await this.sendError({ id: h6, topic: r3, error: d6 }), this.client.logger.error(d6);
      }
    }), c6(this, "onSessionRequestResponse", (e3, t2) => {
      const { id: s4 } = t2, i5 = yo4("session_request", s4);
      if (this.events.listenerCount(i5) === 0) throw new Error(`emitting ${i5} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(yo4("session_request", s4), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(yo4("session_request", s4), { error: t2.error });
    }), c6(this, "onSessionEventRequest", async (e3, t2) => {
      const { id: s4, params: i5 } = t2;
      try {
        const r3 = `${e3}_session_event_${i5.event.name}`, o6 = ec.get(r3);
        if (o6 && this.isRequestOutOfSync(o6, s4)) {
          this.client.logger.info(`Discarding out of sync request - ${s4}`);
          return;
        }
        this.isValidEmit(v5({ topic: e3 }, i5)), this.client.events.emit("session_event", { id: s4, topic: e3, params: i5 }), ec.set(r3, s4);
      } catch (r3) {
        await this.sendError({ id: s4, topic: e3, error: r3 }), this.client.logger.error(r3);
      }
    }), c6(this, "onSessionAuthenticateResponse", (e3, t2) => {
      const { id: s4 } = t2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e3, payload: t2 }), isJsonRpcResult(t2) ? this.events.emit(yo4("session_request", s4), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(yo4("session_request", s4), { error: t2.error });
    }), c6(this, "onSessionAuthenticateRequest", async (e3) => {
      var t2;
      const { topic: s4, payload: i5, attestation: r3, encryptedId: o6, transportType: a3 } = e3;
      try {
        const { requester: l8, authPayload: p6, expiryTimestamp: h6 } = i5.params, u4 = await this.getVerifyContext({ attestationId: r3, hash: ci3(JSON.stringify(i5)), encryptedId: o6, metadata: l8.metadata, transportType: a3 }), d6 = { requester: l8, pairingTopic: s4, id: i5.id, authPayload: p6, verifyContext: u4, expiryTimestamp: h6 };
        await this.setAuthRequest(i5.id, { request: d6, pairingTopic: s4, transportType: a3 }), a3 === Q2.link_mode && (t2 = l8.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp(l8.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s4, params: i5.params, id: i5.id, verifyContext: u4 });
      } catch (l8) {
        this.client.logger.error(l8);
        const p6 = i5.params.requester.publicKey, h6 = await this.client.core.crypto.generateKeyPair(), u4 = this.getAppLinkIfEnabled(i5.params.requester.metadata, a3), d6 = { type: Oe3, receiverPublicKey: p6, senderPublicKey: h6 };
        await this.sendError({ id: i5.id, topic: s4, error: l8, encodeOpts: d6, rpcOpts: N10.wc_sessionAuthenticate.autoReject, appLink: u4 });
      }
    }), c6(this, "addSessionRequestToSessionRequestQueue", (e3) => {
      this.sessionRequestQueue.queue.push(e3);
    }), c6(this, "cleanupAfterResponse", (e3) => {
      this.deletePendingSessionRequest(e3.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time6.toMiliseconds)(this.requestQueueDelay));
    }), c6(this, "cleanupPendingSentRequestsForTopic", ({ topic: e3, error: t2 }) => {
      const s4 = this.client.core.history.pending;
      s4.length > 0 && s4.filter((i5) => i5.topic === e3 && i5.request.method === "wc_sessionRequest").forEach((i5) => {
        const r3 = i5.request.id, o6 = yo4("session_request", r3);
        if (this.events.listenerCount(o6) === 0) throw new Error(`emitting ${o6} without any listeners`);
        this.events.emit(yo4("session_request", i5.request.id), { error: t2 });
      });
    }), c6(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e3 = this.sessionRequestQueue.queue[0];
      if (!e3) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e3);
      } catch (t2) {
        this.client.logger.error(t2);
      }
    }), c6(this, "emitSessionRequest", (e3) => {
      this.client.events.emit("session_request", e3);
    }), c6(this, "onPairingCreated", (e3) => {
      if (e3.methods && this.expectedPairingMethodMap.set(e3.topic, e3.methods), e3.active) return;
      const t2 = this.client.proposal.getAll().find((s4) => s4.pairingTopic === e3.topic);
      t2 && this.onSessionProposeRequest({ topic: e3.topic, payload: formatJsonRpcRequest("wc_sessionPropose", b4(v5({}, t2), { requiredNamespaces: t2.requiredNamespaces, optionalNamespaces: t2.optionalNamespaces, relays: t2.relays, proposer: t2.proposer, sessionProperties: t2.sessionProperties, scopedProperties: t2.scopedProperties }), t2.id) });
    }), c6(this, "isValidConnect", async (e3) => {
      if (!Vi3(e3)) {
        const { message: l8 } = te4("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e3)}`);
        throw new Error(l8);
      }
      const { pairingTopic: t2, requiredNamespaces: s4, optionalNamespaces: i5, sessionProperties: r3, scopedProperties: o6, relays: a3 } = e3;
      if (ae2(t2) || await this.isValidPairingTopic(t2), !Di2(a3, true)) {
        const { message: l8 } = te4("MISSING_OR_INVALID", `connect() relays: ${a3}`);
        throw new Error(l8);
      }
      if (!ae2(s4) && qe3(s4) !== 0 && this.validateNamespaces(s4, "requiredNamespaces"), !ae2(i5) && qe3(i5) !== 0 && this.validateNamespaces(i5, "optionalNamespaces"), ae2(r3) || this.validateSessionProps(r3, "sessionProperties"), !ae2(o6)) {
        this.validateSessionProps(o6, "scopedProperties");
        const l8 = Object.keys(s4 || {}).concat(Object.keys(i5 || {}));
        if (!Object.keys(o6).every((p6) => l8.includes(p6))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o6)}, required/optional namespaces: ${JSON.stringify(l8)}`);
      }
    }), c6(this, "validateNamespaces", (e3, t2) => {
      const s4 = ki2(e3, "connect()", t2);
      if (s4) throw new Error(s4.message);
    }), c6(this, "isValidApprove", async (e3) => {
      if (!Vi3(e3)) throw new Error(te4("MISSING_OR_INVALID", `approve() params: ${e3}`).message);
      const { id: t2, namespaces: s4, relayProtocol: i5, sessionProperties: r3, scopedProperties: o6 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2);
      const a3 = this.client.proposal.get(t2), l8 = Or3(s4, "approve()");
      if (l8) throw new Error(l8.message);
      const p6 = Nr3(a3.requiredNamespaces, s4, "approve()");
      if (p6) throw new Error(p6.message);
      if (!q2(i5, true)) {
        const { message: h6 } = te4("MISSING_OR_INVALID", `approve() relayProtocol: ${i5}`);
        throw new Error(h6);
      }
      if (ae2(r3) || this.validateSessionProps(r3, "sessionProperties"), !ae2(o6)) {
        this.validateSessionProps(o6, "scopedProperties");
        const h6 = new Set(Object.keys(s4));
        if (!Object.keys(o6).every((u4) => h6.has(u4))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o6)}, approved namespaces: ${Array.from(h6).join(", ")}`);
      }
    }), c6(this, "isValidReject", async (e3) => {
      if (!Vi3(e3)) {
        const { message: i5 } = te4("MISSING_OR_INVALID", `reject() params: ${e3}`);
        throw new Error(i5);
      }
      const { id: t2, reason: s4 } = e3;
      if (this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2), !Hi(s4)) {
        const { message: i5 } = te4("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s4)}`);
        throw new Error(i5);
      }
    }), c6(this, "isValidSessionSettleRequest", (e3) => {
      if (!Vi3(e3)) {
        const { message: l8 } = te4("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e3}`);
        throw new Error(l8);
      }
      const { relay: t2, controller: s4, namespaces: i5, expiry: r3 } = e3;
      if (!Ar3(t2)) {
        const { message: l8 } = te4("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l8);
      }
      const o6 = Ci2(s4, "onSessionSettleRequest()");
      if (o6) throw new Error(o6.message);
      const a3 = Or3(i5, "onSessionSettleRequest()");
      if (a3) throw new Error(a3.message);
      if (go4(r3)) {
        const { message: l8 } = te4("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l8);
      }
    }), c6(this, "isValidUpdate", async (e3) => {
      if (!Vi3(e3)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `update() params: ${e3}`);
        throw new Error(a3);
      }
      const { topic: t2, namespaces: s4 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const i5 = this.client.session.get(t2), r3 = Or3(s4, "update()");
      if (r3) throw new Error(r3.message);
      const o6 = Nr3(i5.requiredNamespaces, s4, "update()");
      if (o6) throw new Error(o6.message);
    }), c6(this, "isValidExtend", async (e3) => {
      if (!Vi3(e3)) {
        const { message: s4 } = te4("MISSING_OR_INVALID", `extend() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
    }), c6(this, "isValidRequest", async (e3) => {
      if (!Vi3(e3)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `request() params: ${e3}`);
        throw new Error(a3);
      }
      const { topic: t2, request: s4, chainId: i5, expiry: r3 } = e3;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const { namespaces: o6 } = this.client.session.get(t2);
      if (!Gi2(o6, i5)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `request() chainId: ${i5}`);
        throw new Error(a3);
      }
      if (!Ki2(s4)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `request() ${JSON.stringify(s4)}`);
        throw new Error(a3);
      }
      if (!Wi(o6, i5, s4.method)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `request() method: ${s4.method}`);
        throw new Error(a3);
      }
      if (r3 && !Xi(r3, _e5)) {
        const { message: a3 } = te4("MISSING_OR_INVALID", `request() expiry: ${r3}. Expiry must be a number (in seconds) between ${_e5.min} and ${_e5.max}`);
        throw new Error(a3);
      }
    }), c6(this, "isValidRespond", async (e3) => {
      var t2;
      if (!Vi3(e3)) {
        const { message: r3 } = te4("MISSING_OR_INVALID", `respond() params: ${e3}`);
        throw new Error(r3);
      }
      const { topic: s4, response: i5 } = e3;
      try {
        await this.isValidSessionTopic(s4);
      } catch (r3) {
        throw (t2 = e3 == null ? void 0 : e3.response) != null && t2.id && this.cleanupAfterResponse(e3), r3;
      }
      if (!Fi2(i5)) {
        const { message: r3 } = te4("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i5)}`);
        throw new Error(r3);
      }
    }), c6(this, "isValidPing", async (e3) => {
      if (!Vi3(e3)) {
        const { message: s4 } = te4("MISSING_OR_INVALID", `ping() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      await this.isValidSessionOrPairingTopic(t2);
    }), c6(this, "isValidEmit", async (e3) => {
      if (!Vi3(e3)) {
        const { message: o6 } = te4("MISSING_OR_INVALID", `emit() params: ${e3}`);
        throw new Error(o6);
      }
      const { topic: t2, event: s4, chainId: i5 } = e3;
      await this.isValidSessionTopic(t2);
      const { namespaces: r3 } = this.client.session.get(t2);
      if (!Gi2(r3, i5)) {
        const { message: o6 } = te4("MISSING_OR_INVALID", `emit() chainId: ${i5}`);
        throw new Error(o6);
      }
      if (!qi2(s4)) {
        const { message: o6 } = te4("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(o6);
      }
      if (!zi2(r3, i5, s4.name)) {
        const { message: o6 } = te4("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s4)}`);
        throw new Error(o6);
      }
    }), c6(this, "isValidDisconnect", async (e3) => {
      if (!Vi3(e3)) {
        const { message: s4 } = te4("MISSING_OR_INVALID", `disconnect() params: ${e3}`);
        throw new Error(s4);
      }
      const { topic: t2 } = e3;
      await this.isValidSessionOrPairingTopic(t2);
    }), c6(this, "isValidAuthenticate", (e3) => {
      const { chains: t2, uri: s4, domain: i5, nonce: r3 } = e3;
      if (!Array.isArray(t2) || t2.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!q2(s4, false)) throw new Error("uri is required parameter");
      if (!q2(i5, false)) throw new Error("domain is required parameter");
      if (!q2(r3, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t2.map((a3) => Ye3(a3).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o6 } = Ye3(t2[0]);
      if (o6 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c6(this, "getVerifyContext", async (e3) => {
      const { attestationId: t2, hash: s4, encryptedId: i5, metadata: r3, transportType: o6 } = e3, a3 = { verified: { verifyUrl: r3.verifyUrl || ue2, validation: "UNKNOWN", origin: r3.url || "" } };
      try {
        if (o6 === Q2.link_mode) {
          const p6 = this.getAppLinkIfEnabled(r3, o6);
          return a3.verified.validation = p6 && new URL(p6).origin === new URL(r3.url).origin ? "VALID" : "INVALID", a3;
        }
        const l8 = await this.client.core.verify.resolve({ attestationId: t2, hash: s4, encryptedId: i5, verifyUrl: r3.verifyUrl });
        l8 && (a3.verified.origin = l8.origin, a3.verified.isScam = l8.isScam, a3.verified.validation = l8.origin === new URL(r3.url).origin ? "VALID" : "INVALID");
      } catch (l8) {
        this.client.logger.warn(l8);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a3)}`), a3;
    }), c6(this, "validateSessionProps", (e3, t2) => {
      Object.values(e3).forEach((s4, i5) => {
        if (s4 == null) {
          const { message: r3 } = te4("MISSING_OR_INVALID", `${t2} must contain an existing value for each key. Received: ${s4} for key ${Object.keys(e3)[i5]}`);
          throw new Error(r3);
        }
      });
    }), c6(this, "getPendingAuthRequest", (e3) => {
      const t2 = this.client.auth.requests.get(e3);
      return typeof t2 == "object" ? t2 : void 0;
    }), c6(this, "addToRecentlyDeleted", (e3, t2) => {
      if (this.recentlyDeletedMap.set(e3, t2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s4 = 0;
        const i5 = this.recentlyDeletedLimit / 2;
        for (const r3 of this.recentlyDeletedMap.keys()) {
          if (s4++ >= i5) break;
          this.recentlyDeletedMap.delete(r3);
        }
      }
    }), c6(this, "checkRecentlyDeleted", (e3) => {
      const t2 = this.recentlyDeletedMap.get(e3);
      if (t2) {
        const { message: s4 } = te4("MISSING_OR_INVALID", `Record was recently deleted - ${t2}: ${e3}`);
        throw new Error(s4);
      }
    }), c6(this, "isLinkModeEnabled", (e3, t2) => {
      var s4, i5, r3, o6, a3, l8, p6, h6, u4;
      return !e3 || t2 !== Q2.link_mode ? false : ((i5 = (s4 = this.client.metadata) == null ? void 0 : s4.redirect) == null ? void 0 : i5.linkMode) === true && ((o6 = (r3 = this.client.metadata) == null ? void 0 : r3.redirect) == null ? void 0 : o6.universal) !== void 0 && ((l8 = (a3 = this.client.metadata) == null ? void 0 : a3.redirect) == null ? void 0 : l8.universal) !== "" && ((p6 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : p6.universal) !== void 0 && ((h6 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : h6.universal) !== "" && ((u4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : u4.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e3.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c6(this, "getAppLinkIfEnabled", (e3, t2) => {
      var s4;
      return this.isLinkModeEnabled(e3, t2) ? (s4 = e3 == null ? void 0 : e3.redirect) == null ? void 0 : s4.universal : void 0;
    }), c6(this, "handleLinkModeMessage", ({ url: e3 }) => {
      if (!e3 || !e3.includes("wc_ev") || !e3.includes("topic")) return;
      const t2 = wo3(e3, "topic") || "", s4 = decodeURIComponent(wo3(e3, "wc_ev") || ""), i5 = this.client.session.keys.includes(t2);
      i5 && this.client.session.update(t2, { transportType: Q2.link_mode }), this.client.core.dispatchEnvelope({ topic: t2, message: s4, sessionExists: i5 });
    }), c6(this, "registerLinkModeListeners", async () => {
      var e3;
      if (vo4() || ne2() && (e3 = this.client.metadata.redirect) != null && e3.linkMode) {
        const t2 = global == null ? void 0 : global.Linking;
        if (typeof t2 < "u") {
          t2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s4 = await t2.getInitialURL();
          s4 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s4 });
          }, 50);
        }
      }
    }), c6(this, "shouldSetTVF", (e3, t2) => {
      if (!t2 || e3 !== "wc_sessionRequest") return false;
      const { request: s4 } = t2;
      return Object.keys(Ue5).includes(s4.method);
    }), c6(this, "getTVFParams", (e3, t2, s4) => {
      var i5, r3;
      try {
        const o6 = t2.request.method, a3 = this.extractTxHashesFromResult(o6, s4);
        return b4(v5({ correlationId: e3, rpcMethods: [o6], chainId: t2.chainId }, this.isValidContractData(t2.request.params) && { contractAddresses: [(r3 = (i5 = t2.request.params) == null ? void 0 : i5[0]) == null ? void 0 : r3.to] }), { txHashes: a3 });
      } catch (o6) {
        this.client.logger.warn("Error getting TVF params", o6);
      }
      return {};
    }), c6(this, "isValidContractData", (e3) => {
      var t2;
      if (!e3) return false;
      try {
        const s4 = (e3 == null ? void 0 : e3.data) || ((t2 = e3 == null ? void 0 : e3[0]) == null ? void 0 : t2.data);
        if (!s4.startsWith("0x")) return false;
        const i5 = s4.slice(2);
        return /^[0-9a-fA-F]*$/.test(i5) ? i5.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c6(this, "extractTxHashesFromResult", (e3, t2) => {
      try {
        const s4 = Ue5[e3];
        if (typeof t2 == "string") return [t2];
        const i5 = t2[s4.key];
        if ($e2(i5)) return e3 === "solana_signAllTransactions" ? i5.map((r3) => qo3(r3)) : i5;
        if (typeof i5 == "string") return [i5];
      } catch (s4) {
        this.client.logger.warn("Error extracting tx hashes from result", s4);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const n5 = this.client.session.keys, e3 = this.client.core.relayer.messages.getWithoutAck(n5);
      for (const [t2, s4] of Object.entries(e3)) for (const i5 of s4) try {
        await this.onProviderMessageEvent({ topic: t2, message: i5, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${t2}, message: ${i5}`);
      }
    } catch (n5) {
      this.client.logger.warn("processPendingMessageEvents failed", n5);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n5 } = te4("NOT_INITIALIZED", this.name);
      throw new Error(n5);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C3.message, (n5) => {
      this.onProviderMessageEvent(n5);
    });
  }
  async onRelayMessage(n5) {
    const { topic: e3, message: t2, attestation: s4, transportType: i5 } = n5, { publicKey: r3 } = this.client.auth.authKeys.keys.includes(ce3) ? this.client.auth.authKeys.get(ce3) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const o6 = await this.client.core.crypto.decode(e3, t2, { receiverPublicKey: r3, encoding: i5 === Q2.link_mode ? ti2 : At3 });
      isJsonRpcRequest(o6) ? (this.client.core.history.set(e3, o6), await this.onRelayEventRequest({ topic: e3, payload: o6, attestation: s4, transportType: i5, encryptedId: ci3(t2) })) : isJsonRpcResponse(o6) ? (await this.client.core.history.resolve(o6), await this.onRelayEventResponse({ topic: e3, payload: o6, transportType: i5 }), this.client.core.history.delete(e3, o6.id)) : await this.onRelayEventUnknownPayload({ topic: e3, payload: o6, transportType: i5 }), await this.client.core.relayer.messages.ack(e3, t2);
    } catch (o6) {
      this.client.logger.error(o6);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(F2.expired, async (n5) => {
      const { topic: e3, id: t2 } = ho4(n5.target);
      if (t2 && this.client.pendingRequest.keys.includes(t2)) return await this.deletePendingSessionRequest(t2, te4("EXPIRED"), true);
      if (t2 && this.client.auth.requests.keys.includes(t2)) return await this.deletePendingAuthRequest(t2, te4("EXPIRED"), true);
      e3 ? this.client.session.keys.includes(e3) && (await this.deleteSession({ topic: e3, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e3 })) : t2 && (await this.deleteProposal(t2, true), this.client.events.emit("proposal_expire", { id: t2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(se2.create, (n5) => this.onPairingCreated(n5)), this.client.core.pairing.events.on(se2.delete, (n5) => {
      this.addToRecentlyDeleted(n5.topic, "pairing");
    });
  }
  isValidPairingTopic(n5) {
    if (!q2(n5, false)) {
      const { message: e3 } = te4("MISSING_OR_INVALID", `pairing topic should be a string: ${n5}`);
      throw new Error(e3);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n5)) {
      const { message: e3 } = te4("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n5}`);
      throw new Error(e3);
    }
    if (go4(this.client.core.pairing.pairings.get(n5).expiry)) {
      const { message: e3 } = te4("EXPIRED", `pairing topic: ${n5}`);
      throw new Error(e3);
    }
  }
  async isValidSessionTopic(n5) {
    if (!q2(n5, false)) {
      const { message: e3 } = te4("MISSING_OR_INVALID", `session topic should be a string: ${n5}`);
      throw new Error(e3);
    }
    if (this.checkRecentlyDeleted(n5), !this.client.session.keys.includes(n5)) {
      const { message: e3 } = te4("NO_MATCHING_KEY", `session topic doesn't exist: ${n5}`);
      throw new Error(e3);
    }
    if (go4(this.client.session.get(n5).expiry)) {
      await this.deleteSession({ topic: n5 });
      const { message: e3 } = te4("EXPIRED", `session topic: ${n5}`);
      throw new Error(e3);
    }
    if (!this.client.core.crypto.keychain.has(n5)) {
      const { message: e3 } = te4("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n5}`);
      throw await this.deleteSession({ topic: n5 }), new Error(e3);
    }
  }
  async isValidSessionOrPairingTopic(n5) {
    if (this.checkRecentlyDeleted(n5), this.client.session.keys.includes(n5)) await this.isValidSessionTopic(n5);
    else if (this.client.core.pairing.pairings.keys.includes(n5)) this.isValidPairingTopic(n5);
    else if (q2(n5, false)) {
      const { message: e3 } = te4("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n5}`);
      throw new Error(e3);
    } else {
      const { message: e3 } = te4("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n5}`);
      throw new Error(e3);
    }
  }
  async isValidProposalId(n5) {
    if (!Mi2(n5)) {
      const { message: e3 } = te4("MISSING_OR_INVALID", `proposal id should be a number: ${n5}`);
      throw new Error(e3);
    }
    if (!this.client.proposal.keys.includes(n5)) {
      const { message: e3 } = te4("NO_MATCHING_KEY", `proposal id doesn't exist: ${n5}`);
      throw new Error(e3);
    }
    if (go4(this.client.proposal.get(n5).expiryTimestamp)) {
      await this.deleteProposal(n5);
      const { message: e3 } = te4("EXPIRED", `proposal id: ${n5}`);
      throw new Error(e3);
    }
  }
};
var Ns3 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, pt3, we4), this.core = n5, this.logger = e3;
  }
};
var St4 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, ht4, we4), this.core = n5, this.logger = e3;
  }
};
var Os3 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, ut3, we4, (t2) => t2.id), this.core = n5, this.logger = e3;
  }
};
var bs3 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, mt3, ae3, () => ce3), this.core = n5, this.logger = e3;
  }
};
var As3 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, _t3, ae3), this.core = n5, this.logger = e3;
  }
};
var xs3 = class extends zi {
  constructor(n5, e3) {
    super(n5, e3, Et5, ae3, (t2) => t2.id), this.core = n5, this.logger = e3;
  }
};
var Cs3 = Object.defineProperty;
var Vs4 = (S5, n5, e3) => n5 in S5 ? Cs3(S5, n5, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n5] = e3;
var Ge4 = (S5, n5, e3) => Vs4(S5, typeof n5 != "symbol" ? n5 + "" : n5, e3);
var Ds3 = class {
  constructor(n5, e3) {
    this.core = n5, this.logger = e3, Ge4(this, "authKeys"), Ge4(this, "pairingTopics"), Ge4(this, "requests"), this.authKeys = new bs3(this.core, this.logger), this.pairingTopics = new As3(this.core, this.logger), this.requests = new xs3(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var Ls3 = Object.defineProperty;
var ks3 = (S5, n5, e3) => n5 in S5 ? Ls3(S5, n5, { enumerable: true, configurable: true, writable: true, value: e3 }) : S5[n5] = e3;
var E4 = (S5, n5, e3) => ks3(S5, typeof n5 != "symbol" ? n5 + "" : n5, e3);
var Ee5 = class _Ee extends J {
  constructor(n5) {
    super(n5), E4(this, "protocol", De3), E4(this, "version", Le3), E4(this, "name", me4.name), E4(this, "metadata"), E4(this, "core"), E4(this, "logger"), E4(this, "events", new import_events8.EventEmitter()), E4(this, "engine"), E4(this, "session"), E4(this, "proposal"), E4(this, "pendingRequest"), E4(this, "auth"), E4(this, "signConfig"), E4(this, "on", (t2, s4) => this.events.on(t2, s4)), E4(this, "once", (t2, s4) => this.events.once(t2, s4)), E4(this, "off", (t2, s4) => this.events.off(t2, s4)), E4(this, "removeListener", (t2, s4) => this.events.removeListener(t2, s4)), E4(this, "removeAllListeners", (t2) => this.events.removeAllListeners(t2)), E4(this, "connect", async (t2) => {
      try {
        return await this.engine.connect(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "pair", async (t2) => {
      try {
        return await this.engine.pair(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "approve", async (t2) => {
      try {
        return await this.engine.approve(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "reject", async (t2) => {
      try {
        return await this.engine.reject(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "update", async (t2) => {
      try {
        return await this.engine.update(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "extend", async (t2) => {
      try {
        return await this.engine.extend(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "request", async (t2) => {
      try {
        return await this.engine.request(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "respond", async (t2) => {
      try {
        return await this.engine.respond(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "ping", async (t2) => {
      try {
        return await this.engine.ping(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "emit", async (t2) => {
      try {
        return await this.engine.emit(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "disconnect", async (t2) => {
      try {
        return await this.engine.disconnect(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "find", (t2) => {
      try {
        return this.engine.find(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t2) {
        throw this.logger.error(t2.message), t2;
      }
    }), E4(this, "authenticate", async (t2, s4) => {
      try {
        return await this.engine.authenticate(t2, s4);
      } catch (i5) {
        throw this.logger.error(i5.message), i5;
      }
    }), E4(this, "formatAuthMessage", (t2) => {
      try {
        return this.engine.formatAuthMessage(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "approveSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.approveSessionAuthenticate(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), E4(this, "rejectSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t2);
      } catch (s4) {
        throw this.logger.error(s4.message), s4;
      }
    }), this.name = (n5 == null ? void 0 : n5.name) || me4.name, this.metadata = (n5 == null ? void 0 : n5.metadata) || Xr4(), this.signConfig = n5 == null ? void 0 : n5.signConfig;
    const e3 = typeof (n5 == null ? void 0 : n5.logger) < "u" && typeof (n5 == null ? void 0 : n5.logger) != "string" ? n5.logger : (0, import_pino2.default)(k2({ level: (n5 == null ? void 0 : n5.logger) || me4.logger }));
    this.core = (n5 == null ? void 0 : n5.core) || new Jo2(n5), this.logger = E2(e3, this.name), this.session = new St4(this.core, this.logger), this.proposal = new Ns3(this.core, this.logger), this.pendingRequest = new Os3(this.core, this.logger), this.engine = new Ps3(this), this.auth = new Ds3(this.core, this.logger);
  }
  static async init(n5) {
    const e3 = new _Ee(n5);
    return await e3.initialize(), e3;
  }
  get context() {
    return y3(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time6.toMiliseconds)(import_time6.ONE_SECOND));
    } catch (n5) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n5.message), n5;
    }
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var import_time7 = __toESM(require_cjs());
var import_window_getters4 = __toESM(require_cjs2());
var import_window_metadata3 = __toESM(require_cjs3());

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType3 = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction3(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber3(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber3(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType3[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList3(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction3 = defineFormatter3("transaction", formatTransaction3);
function formatAuthorizationList3(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock3(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction3(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock3 = defineFormatter3("block", formatBlock3);

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount3(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex3(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber3(count);
}

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction3 = 6;
var bytesPerFieldElement3 = 32;
var fieldElementsPerBlob3 = 4096;
var bytesPerBlob3 = bytesPerFieldElement3 * fieldElementsPerBlob3;
var maxBytesPerTransaction3 = bytesPerBlob3 * blobsPerTransaction3 - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob3 * blobsPerTransaction3;

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/log.js
function formatLog3(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace3 = new LruMap3(128);

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache3 = new LruMap3(8192);

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore3() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache3 = createIdStore3();

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses3 = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt3(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog3(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber3(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses3[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType3[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt3 = defineFormatter3("transactionReceipt", formatTransactionReceipt3);

// ../node_modules/@walletconnect/universal-provider/node_modules/@noble/hashes/esm/ripemd160.js
var Rho3 = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id3 = new Uint8Array(new Array(16).fill(0).map((_4, i5) => i5));
var Pi5 = Id3.map((i5) => (9 * i5 + 5) % 16);
var idxL5 = [Id3];
var idxR5 = [Pi5];
for (let i5 = 0; i5 < 4; i5++)
  for (let j4 of [idxL5, idxR5])
    j4.push(j4[i5].map((k7) => Rho3[k7]));
var shifts3 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => new Uint8Array(i5));
var shiftsL3 = idxL5.map((idx, i5) => idx.map((j4) => shifts3[i5][j4]));
var shiftsR3 = idxR5.map((idx, i5) => idx.map((j4) => shifts3[i5][j4]));
var Kl3 = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr5 = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f8(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  else if (group === 1)
    return x8 & y7 | ~x8 & z8;
  else if (group === 2)
    return (x8 | ~y7) ^ z8;
  else if (group === 3)
    return x8 & z8 | y7 & ~z8;
  else
    return x8 ^ (y7 | ~z8);
}
var R_BUF3 = new Uint32Array(16);
var RIPEMD1605 = class extends HashMD4 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      R_BUF3[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl3[group], hbr = Kr5[group];
      const rl = idxL5[group], rr4 = idxR5[group];
      const sl = shiftsL3[group], sr4 = shiftsR3[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl4(al + f8(group, bl, cl, dl) + R_BUF3[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl4(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl4(ar4 + f8(rGroup, br4, cr4, dr4) + R_BUF3[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl4(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    R_BUF3.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1609 = wrapConstructor3(() => new RIPEMD1605());

// ../node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager3(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap3(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc3() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount3(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager3 = createNonceManager3({
  source: jsonRpc3()
});

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto4 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes6(a3) {
  return a3 instanceof Uint8Array || ArrayBuffer.isView(a3) && a3.constructor.name === "Uint8Array";
}
function anumber3(n5) {
  if (!Number.isSafeInteger(n5) || n5 < 0)
    throw new Error("positive integer expected, got " + n5);
}
function abytes3(b6, ...lengths) {
  if (!isBytes6(b6))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b6.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b6.length);
}
function aexists3(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput3(out, instance) {
  abytes3(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u323(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean4(...arrays) {
  for (let i5 = 0; i5 < arrays.length; i5++) {
    arrays[i5].fill(0);
  }
}
function createView3(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr3(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl7(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE3 = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap3(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap323(arr) {
  for (let i5 = 0; i5 < arr.length; i5++) {
    arr[i5] = byteSwap3(arr[i5]);
  }
  return arr;
}
var swap32IfBE3 = isLE3 ? (u4) => u4 : byteSwap323;
var hasHexBuiltin3 = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes5 = Array.from({ length: 256 }, (_4, i5) => i5.toString(16).padStart(2, "0"));
function utf8ToBytes3(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes7(data) {
  if (typeof data === "string")
    data = utf8ToBytes3(data);
  abytes3(data);
  return data;
}
var Hash3 = class {
};
function createHasher4(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes7(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer3(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes7(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/curves/esm/utils.js
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/version.js
var version4 = "0.1.1";

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/errors.js
function getVersion4() {
  return version4;
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Errors.js
var BaseError8 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x8) => typeof x8 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion4()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn5) {
    return walk3(this, fn5);
  }
};
function walk3(err, fn5) {
  if (fn5 == null ? void 0 : fn5(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk3(err.cause, fn5);
  return fn5 ? null : err;
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/bytes.js
function assertSize5(bytes, size_) {
  if (size10(bytes) > size_)
    throw new SizeOverflowError7({
      givenSize: size10(bytes),
      maxSize: size_
    });
}
var charCodeMap3 = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase163(char) {
  if (char >= charCodeMap3.zero && char <= charCodeMap3.nine)
    return char - charCodeMap3.zero;
  if (char >= charCodeMap3.A && char <= charCodeMap3.F)
    return char - (charCodeMap3.A - 10);
  if (char >= charCodeMap3.a && char <= charCodeMap3.f)
    return char - (charCodeMap3.a - 10);
  return void 0;
}
function pad8(bytes, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return bytes;
  if (bytes.length > size14)
    throw new SizeExceedsPaddingSizeError7({
      size: bytes.length,
      targetSize: size14,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size14);
  for (let i5 = 0; i5 < size14; i5++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i5 : size14 - i5 - 1] = bytes[padEnd ? i5 : bytes.length - i5 - 1];
  }
  return paddedBytes;
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/hex.js
function assertSize6(hex, size_) {
  if (size11(hex) > size_)
    throw new SizeOverflowError8({
      givenSize: size11(hex),
      maxSize: size_
    });
}
function pad9(hex_, options = {}) {
  const { dir, size: size14 = 32 } = options;
  if (size14 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size14 * 2)
    throw new SizeExceedsPaddingSizeError8({
      size: Math.ceil(hex.length / 2),
      targetSize: size14,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size14 * 2, "0")}`;
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Bytes.js
var decoder3 = new TextDecoder();
var encoder5 = new TextEncoder();
function from14(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex6(value);
  return fromArray3(value);
}
function fromArray3(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex6(value, options = {}) {
  const { size: size14 } = options;
  let hex = value;
  if (size14) {
    assertSize6(value, size14);
    hex = padRight6(value, size14);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length2 = hexString.length / 2;
  const bytes = new Uint8Array(length2);
  for (let index2 = 0, j4 = 0; index2 < length2; index2++) {
    const nibbleLeft = charCodeToBase163(hexString.charCodeAt(j4++));
    const nibbleRight = charCodeToBase163(hexString.charCodeAt(j4++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError8(`Invalid byte sequence ("${hexString[j4 - 2]}${hexString[j4 - 1]}" in "${hexString}").`);
    }
    bytes[index2] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString9(value, options = {}) {
  const { size: size14 } = options;
  const bytes = encoder5.encode(value);
  if (typeof size14 === "number") {
    assertSize5(bytes, size14);
    return padRight7(bytes, size14);
  }
  return bytes;
}
function padRight7(value, size14) {
  return pad8(value, { dir: "right", size: size14 });
}
function size10(value) {
  return value.length;
}
var SizeOverflowError7 = class extends BaseError8 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError7 = class extends BaseError8 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Hex.js
var encoder6 = new TextEncoder();
var hexes6 = Array.from({ length: 256 }, (_v, i5) => i5.toString(16).padStart(2, "0"));
function concat8(...values) {
  return `0x${values.reduce((acc, x8) => acc + x8.replace("0x", ""), "")}`;
}
function fromBoolean4(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize6(hex, options.size);
    return padLeft4(hex, options.size);
  }
  return hex;
}
function fromBytes7(value, options = {}) {
  let string2 = "";
  for (let i5 = 0; i5 < value.length; i5++)
    string2 += hexes6[value[i5]];
  const hex = `0x${string2}`;
  if (typeof options.size === "number") {
    assertSize6(hex, options.size);
    return padRight6(hex, options.size);
  }
  return hex;
}
function fromNumber4(value, options = {}) {
  const { signed, size: size14 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size14) {
    if (signed)
      maxValue = (1n << BigInt(size14) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size14) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError5({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size14,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size14 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size14)
    return padLeft4(hex, size14);
  return hex;
}
function fromString10(value, options = {}) {
  return fromBytes7(encoder6.encode(value), options);
}
function padLeft4(value, size14) {
  return pad9(value, { dir: "left", size: size14 });
}
function padRight6(value, size14) {
  return pad9(value, { dir: "right", size: size14 });
}
function size11(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError5 = class extends BaseError8 {
  constructor({ max, min, signed, size: size14, value }) {
    super(`Number \`${value}\` is not in safe${size14 ? ` ${size14 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError8 = class extends BaseError8 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError8 = class extends BaseError8 {
  constructor({ size: size14, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size14}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint643(view, byteOffset, value, isLE4) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE4);
  const _32n4 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n4 & _u32_max);
  const wl = Number(value & _u32_max);
  const h6 = isLE4 ? 4 : 0;
  const l8 = isLE4 ? 0 : 4;
  view.setUint32(byteOffset + h6, wh, isLE4);
  view.setUint32(byteOffset + l8, wl, isLE4);
}
function Chi4(a3, b6, c8) {
  return a3 & b6 ^ ~a3 & c8;
}
function Maj4(a3, b6, c8) {
  return a3 & b6 ^ a3 & c8 ^ b6 & c8;
}
var HashMD7 = class extends Hash3 {
  constructor(blockLen, outputLen, padOffset, isLE4) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE4;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView3(this.buffer);
  }
  update(data) {
    aexists3(this);
    data = toBytes7(data);
    abytes3(data);
    const { view, buffer: buffer2, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView3(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer2.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists3(this);
    aoutput3(out, this);
    this.finished = true;
    const { buffer: buffer2, view, blockLen, isLE: isLE4 } = this;
    let { pos } = this;
    buffer2[pos++] = 128;
    clean4(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i5 = pos; i5 < blockLen; i5++)
      buffer2[i5] = 0;
    setBigUint643(view, blockLen - 8, BigInt(this.length * 8), isLE4);
    this.process(view, 0);
    const oview = createView3(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state24 = this.get();
    if (outLen > state24.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i5 = 0; i5 < outLen; i5++)
      oview.setUint32(4 * i5, state24[i5], isLE4);
  }
  digest() {
    const { buffer: buffer2, outputLen } = this;
    this.digestInto(buffer2);
    const res = buffer2.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    to3 || (to3 = new this.constructor());
    to3.set(...this.get());
    const { blockLen, buffer: buffer2, length: length2, finished, destroyed, pos } = this;
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length2;
    to3.pos = pos;
    if (length2 % blockLen)
      to3.buffer.set(buffer2);
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV3 = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV3 = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV3 = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV3 = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV3 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W3 = new Uint32Array(80);
var SHA13 = class extends HashMD7 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV3[0] | 0;
    this.B = SHA1_IV3[1] | 0;
    this.C = SHA1_IV3[2] | 0;
    this.D = SHA1_IV3[3] | 0;
    this.E = SHA1_IV3[4] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    return [A4, B4, C6, D3, E7];
  }
  set(A4, B4, C6, D3, E7) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA1_W3[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 80; i5++)
      SHA1_W3[i5] = rotl7(SHA1_W3[i5 - 3] ^ SHA1_W3[i5 - 8] ^ SHA1_W3[i5 - 14] ^ SHA1_W3[i5 - 16], 1);
    let { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      let F6, K9;
      if (i5 < 20) {
        F6 = Chi4(B4, C6, D3);
        K9 = 1518500249;
      } else if (i5 < 40) {
        F6 = B4 ^ C6 ^ D3;
        K9 = 1859775393;
      } else if (i5 < 60) {
        F6 = Maj4(B4, C6, D3);
        K9 = 2400959708;
      } else {
        F6 = B4 ^ C6 ^ D3;
        K9 = 3395469782;
      }
      const T4 = rotl7(A4, 5) + F6 + E7 + K9 + SHA1_W3[i5] | 0;
      E7 = D3;
      D3 = C6;
      C6 = rotl7(B4, 30);
      B4 = A4;
      A4 = T4;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    this.set(A4, B4, C6, D3, E7);
  }
  roundClean() {
    clean4(SHA1_W3);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean4(this.buffer);
  }
};
var sha13 = createHasher4(() => new SHA13());
var p323 = Math.pow(2, 32);
var K6 = Array.from({ length: 64 }, (_4, i5) => Math.floor(p323 * Math.abs(Math.sin(i5 + 1))));
var MD5_IV3 = SHA1_IV3.slice(0, 4);
var MD5_W3 = new Uint32Array(16);
var MD53 = class extends HashMD7 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV3[0] | 0;
    this.B = MD5_IV3[1] | 0;
    this.C = MD5_IV3[2] | 0;
    this.D = MD5_IV3[3] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3 } = this;
    return [A4, B4, C6, D3];
  }
  set(A4, B4, C6, D3) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      MD5_W3[i5] = view.getUint32(offset, true);
    let { A: A4, B: B4, C: C6, D: D3 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      let F6, g5, s4;
      if (i5 < 16) {
        F6 = Chi4(B4, C6, D3);
        g5 = i5;
        s4 = [7, 12, 17, 22];
      } else if (i5 < 32) {
        F6 = Chi4(D3, B4, C6);
        g5 = (5 * i5 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i5 < 48) {
        F6 = B4 ^ C6 ^ D3;
        g5 = (3 * i5 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F6 = C6 ^ (B4 | ~D3);
        g5 = 7 * i5 % 16;
        s4 = [6, 10, 15, 21];
      }
      F6 = F6 + A4 + K6[i5] + MD5_W3[g5];
      A4 = D3;
      D3 = C6;
      C6 = B4;
      B4 = B4 + rotl7(F6, s4[i5 % 4]);
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A4, B4, C6, D3);
  }
  roundClean() {
    clean4(MD5_W3);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean4(this.buffer);
  }
};
var md53 = createHasher4(() => new MD53());
var Rho1603 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1603 = (() => Uint8Array.from(new Array(16).fill(0).map((_4, i5) => i5)))();
var Pi1603 = (() => Id1603.map((i5) => (9 * i5 + 5) % 16))();
var idxLR3 = (() => {
  const L5 = [Id1603];
  const R3 = [Pi1603];
  const res = [L5, R3];
  for (let i5 = 0; i5 < 4; i5++)
    for (let j4 of res)
      j4.push(j4[i5].map((k7) => Rho1603[k7]));
  return res;
})();
var idxL6 = (() => idxLR3[0])();
var idxR6 = (() => idxLR3[1])();
var shifts1603 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => Uint8Array.from(i5));
var shiftsL1603 = idxL6.map((idx, i5) => idx.map((j4) => shifts1603[i5][j4]));
var shiftsR1603 = idxR6.map((idx, i5) => idx.map((j4) => shifts1603[i5][j4]));
var Kl1603 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1603 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f3(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  if (group === 1)
    return x8 & y7 | ~x8 & z8;
  if (group === 2)
    return (x8 | ~y7) ^ z8;
  if (group === 3)
    return x8 & z8 | y7 & ~z8;
  return x8 ^ (y7 | ~z8);
}
var BUF_1603 = new Uint32Array(16);
var RIPEMD1606 = class extends HashMD7 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      BUF_1603[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1603[group], hbr = Kr1603[group];
      const rl = idxL6[group], rr4 = idxR6[group];
      const sl = shiftsL1603[group], sr4 = shiftsR1603[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl7(al + ripemd_f3(group, bl, cl, dl) + BUF_1603[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl7(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl7(ar4 + ripemd_f3(rGroup, br4, cr4, dr4) + BUF_1603[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl7(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean4(BUF_1603);
  }
  destroy() {
    this.destroyed = true;
    clean4(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd16011 = createHasher4(() => new RIPEMD1606());

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK643 = BigInt(2 ** 32 - 1);
var _32n3 = BigInt(32);
function fromBig3(n5, le5 = false) {
  if (le5)
    return { h: Number(n5 & U32_MASK643), l: Number(n5 >> _32n3 & U32_MASK643) };
  return { h: Number(n5 >> _32n3 & U32_MASK643) | 0, l: Number(n5 & U32_MASK643) | 0 };
}
function split3(lst, le5 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i5 = 0; i5 < len; i5++) {
    const { h: h6, l: l8 } = fromBig3(lst[i5], le5);
    [Ah[i5], Al[i5]] = [h6, l8];
  }
  return [Ah, Al];
}
var shrSH3 = (h6, _l, s4) => h6 >>> s4;
var shrSL3 = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrSH3 = (h6, l8, s4) => h6 >>> s4 | l8 << 32 - s4;
var rotrSL3 = (h6, l8, s4) => h6 << 32 - s4 | l8 >>> s4;
var rotrBH3 = (h6, l8, s4) => h6 << 64 - s4 | l8 >>> s4 - 32;
var rotrBL3 = (h6, l8, s4) => h6 >>> s4 - 32 | l8 << 64 - s4;
var rotlSH3 = (h6, l8, s4) => h6 << s4 | l8 >>> 32 - s4;
var rotlSL3 = (h6, l8, s4) => l8 << s4 | h6 >>> 32 - s4;
var rotlBH3 = (h6, l8, s4) => l8 << s4 - 32 | h6 >>> 64 - s4;
var rotlBL3 = (h6, l8, s4) => h6 << s4 - 32 | l8 >>> 64 - s4;
function add3(Ah, Al, Bh, Bl) {
  const l8 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l8 / 2 ** 32 | 0) | 0, l: l8 | 0 };
}
var add3L3 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H3 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L3 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H3 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L3 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H3 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n6 = BigInt(0);
var _1n6 = BigInt(1);
var _2n3 = BigInt(2);
var _7n3 = BigInt(7);
var _256n3 = BigInt(256);
var _0x71n3 = BigInt(113);
var SHA3_PI3 = [];
var SHA3_ROTL3 = [];
var _SHA3_IOTA3 = [];
for (let round2 = 0, R3 = _1n6, x8 = 1, y7 = 0; round2 < 24; round2++) {
  [x8, y7] = [y7, (2 * x8 + 3 * y7) % 5];
  SHA3_PI3.push(2 * (5 * y7 + x8));
  SHA3_ROTL3.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t2 = _0n6;
  for (let j4 = 0; j4 < 7; j4++) {
    R3 = (R3 << _1n6 ^ (R3 >> _7n3) * _0x71n3) % _256n3;
    if (R3 & _2n3)
      t2 ^= _1n6 << (_1n6 << BigInt(j4)) - _1n6;
  }
  _SHA3_IOTA3.push(t2);
}
var IOTAS3 = split3(_SHA3_IOTA3, true);
var SHA3_IOTA_H3 = IOTAS3[0];
var SHA3_IOTA_L3 = IOTAS3[1];
var rotlH3 = (h6, l8, s4) => s4 > 32 ? rotlBH3(h6, l8, s4) : rotlSH3(h6, l8, s4);
var rotlL3 = (h6, l8, s4) => s4 > 32 ? rotlBL3(h6, l8, s4) : rotlSL3(h6, l8, s4);
function keccakP3(s4, rounds = 24) {
  const B4 = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x8 = 0; x8 < 10; x8++)
      B4[x8] = s4[x8] ^ s4[x8 + 10] ^ s4[x8 + 20] ^ s4[x8 + 30] ^ s4[x8 + 40];
    for (let x8 = 0; x8 < 10; x8 += 2) {
      const idx1 = (x8 + 8) % 10;
      const idx0 = (x8 + 2) % 10;
      const B0 = B4[idx0];
      const B1 = B4[idx0 + 1];
      const Th = rotlH3(B0, B1, 1) ^ B4[idx1];
      const Tl = rotlL3(B0, B1, 1) ^ B4[idx1 + 1];
      for (let y7 = 0; y7 < 50; y7 += 10) {
        s4[x8 + y7] ^= Th;
        s4[x8 + y7 + 1] ^= Tl;
      }
    }
    let curH = s4[2];
    let curL = s4[3];
    for (let t2 = 0; t2 < 24; t2++) {
      const shift = SHA3_ROTL3[t2];
      const Th = rotlH3(curH, curL, shift);
      const Tl = rotlL3(curH, curL, shift);
      const PI = SHA3_PI3[t2];
      curH = s4[PI];
      curL = s4[PI + 1];
      s4[PI] = Th;
      s4[PI + 1] = Tl;
    }
    for (let y7 = 0; y7 < 50; y7 += 10) {
      for (let x8 = 0; x8 < 10; x8++)
        B4[x8] = s4[y7 + x8];
      for (let x8 = 0; x8 < 10; x8++)
        s4[y7 + x8] ^= ~B4[(x8 + 2) % 10] & B4[(x8 + 4) % 10];
    }
    s4[0] ^= SHA3_IOTA_H3[round2];
    s4[1] ^= SHA3_IOTA_L3[round2];
  }
  clean4(B4);
}
var Keccak3 = class _Keccak extends Hash3 {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber3(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u323(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE3(this.state32);
    keccakP3(this.state32, this.rounds);
    swap32IfBE3(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists3(this);
    data = toBytes7(data);
    abytes3(data);
    const { blockLen, state: state24 } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i5 = 0; i5 < take; i5++)
        state24[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state24, suffix, pos, blockLen } = this;
    state24[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state24[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists3(this, false);
    abytes3(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber3(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput3(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean4(this.state);
  }
  _cloneInto(to3) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to3 || (to3 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to3.state32.set(this.state32);
    to3.pos = this.pos;
    to3.posOut = this.posOut;
    to3.finished = this.finished;
    to3.rounds = rounds;
    to3.suffix = suffix;
    to3.outputLen = outputLen;
    to3.enableXOF = enableXOF;
    to3.destroyed = this.destroyed;
    return to3;
  }
};
var gen3 = (suffix, blockLen, outputLen) => createHasher4(() => new Keccak3(blockLen, suffix, outputLen));
var sha3_2243 = (() => gen3(6, 144, 224 / 8))();
var sha3_2563 = (() => gen3(6, 136, 256 / 8))();
var sha3_3843 = (() => gen3(6, 104, 384 / 8))();
var sha3_5123 = (() => gen3(6, 72, 512 / 8))();
var keccak_2243 = (() => gen3(1, 144, 224 / 8))();
var keccak_2564 = (() => gen3(1, 136, 256 / 8))();
var keccak_3843 = (() => gen3(1, 104, 384 / 8))();
var keccak_5123 = (() => gen3(1, 72, 512 / 8))();
var genShake3 = (suffix, blockLen, outputLen) => createXOFer3((opts = {}) => new Keccak3(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake1283 = (() => genShake3(31, 168, 128 / 8))();
var shake2563 = (() => genShake3(31, 136, 256 / 8))();

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K3 = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W3 = new Uint32Array(64);
var SHA2563 = class extends HashMD7 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV3[0] | 0;
    this.B = SHA256_IV3[1] | 0;
    this.C = SHA256_IV3[2] | 0;
    this.D = SHA256_IV3[3] | 0;
    this.E = SHA256_IV3[4] | 0;
    this.F = SHA256_IV3[5] | 0;
    this.G = SHA256_IV3[6] | 0;
    this.H = SHA256_IV3[7] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    return [A4, B4, C6, D3, E7, F6, G4, H5];
  }
  // prettier-ignore
  set(A4, B4, C6, D3, E7, F6, G4, H5) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
    this.F = F6 | 0;
    this.G = G4 | 0;
    this.H = H5 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA256_W3[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 64; i5++) {
      const W15 = SHA256_W3[i5 - 15];
      const W22 = SHA256_W3[i5 - 2];
      const s0 = rotr3(W15, 7) ^ rotr3(W15, 18) ^ W15 >>> 3;
      const s1 = rotr3(W22, 17) ^ rotr3(W22, 19) ^ W22 >>> 10;
      SHA256_W3[i5] = s1 + SHA256_W3[i5 - 7] + s0 + SHA256_W3[i5 - 16] | 0;
    }
    let { A: A4, B: B4, C: C6, D: D3, E: E7, F: F6, G: G4, H: H5 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      const sigma1 = rotr3(E7, 6) ^ rotr3(E7, 11) ^ rotr3(E7, 25);
      const T1 = H5 + sigma1 + Chi4(E7, F6, G4) + SHA256_K3[i5] + SHA256_W3[i5] | 0;
      const sigma0 = rotr3(A4, 2) ^ rotr3(A4, 13) ^ rotr3(A4, 22);
      const T22 = sigma0 + Maj4(A4, B4, C6) | 0;
      H5 = G4;
      G4 = F6;
      F6 = E7;
      E7 = D3 + T1 | 0;
      D3 = C6;
      C6 = B4;
      B4 = A4;
      A4 = T1 + T22 | 0;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    F6 = F6 + this.F | 0;
    G4 = G4 + this.G | 0;
    H5 = H5 + this.H | 0;
    this.set(A4, B4, C6, D3, E7, F6, G4, H5);
  }
  roundClean() {
    clean4(SHA256_W3);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean4(this.buffer);
  }
};
var SHA2243 = class extends SHA2563 {
  constructor() {
    super(28);
    this.A = SHA224_IV3[0] | 0;
    this.B = SHA224_IV3[1] | 0;
    this.C = SHA224_IV3[2] | 0;
    this.D = SHA224_IV3[3] | 0;
    this.E = SHA224_IV3[4] | 0;
    this.F = SHA224_IV3[5] | 0;
    this.G = SHA224_IV3[6] | 0;
    this.H = SHA224_IV3[7] | 0;
  }
};
var K5123 = (() => split3([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n5) => BigInt(n5))))();
var SHA512_Kh3 = (() => K5123[0])();
var SHA512_Kl3 = (() => K5123[1])();
var SHA512_W_H3 = new Uint32Array(80);
var SHA512_W_L3 = new Uint32Array(80);
var SHA5123 = class extends HashMD7 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV3[0] | 0;
    this.Al = SHA512_IV3[1] | 0;
    this.Bh = SHA512_IV3[2] | 0;
    this.Bl = SHA512_IV3[3] | 0;
    this.Ch = SHA512_IV3[4] | 0;
    this.Cl = SHA512_IV3[5] | 0;
    this.Dh = SHA512_IV3[6] | 0;
    this.Dl = SHA512_IV3[7] | 0;
    this.Eh = SHA512_IV3[8] | 0;
    this.El = SHA512_IV3[9] | 0;
    this.Fh = SHA512_IV3[10] | 0;
    this.Fl = SHA512_IV3[11] | 0;
    this.Gh = SHA512_IV3[12] | 0;
    this.Gl = SHA512_IV3[13] | 0;
    this.Hh = SHA512_IV3[14] | 0;
    this.Hl = SHA512_IV3[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4) {
      SHA512_W_H3[i5] = view.getUint32(offset);
      SHA512_W_L3[i5] = view.getUint32(offset += 4);
    }
    for (let i5 = 16; i5 < 80; i5++) {
      const W15h = SHA512_W_H3[i5 - 15] | 0;
      const W15l = SHA512_W_L3[i5 - 15] | 0;
      const s0h = rotrSH3(W15h, W15l, 1) ^ rotrSH3(W15h, W15l, 8) ^ shrSH3(W15h, W15l, 7);
      const s0l = rotrSL3(W15h, W15l, 1) ^ rotrSL3(W15h, W15l, 8) ^ shrSL3(W15h, W15l, 7);
      const W2h = SHA512_W_H3[i5 - 2] | 0;
      const W2l = SHA512_W_L3[i5 - 2] | 0;
      const s1h = rotrSH3(W2h, W2l, 19) ^ rotrBH3(W2h, W2l, 61) ^ shrSH3(W2h, W2l, 6);
      const s1l = rotrSL3(W2h, W2l, 19) ^ rotrBL3(W2h, W2l, 61) ^ shrSL3(W2h, W2l, 6);
      const SUMl = add4L3(s0l, s1l, SHA512_W_L3[i5 - 7], SHA512_W_L3[i5 - 16]);
      const SUMh = add4H3(SUMl, s0h, s1h, SHA512_W_H3[i5 - 7], SHA512_W_H3[i5 - 16]);
      SHA512_W_H3[i5] = SUMh | 0;
      SHA512_W_L3[i5] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      const sigma1h = rotrSH3(Eh, El, 14) ^ rotrSH3(Eh, El, 18) ^ rotrBH3(Eh, El, 41);
      const sigma1l = rotrSL3(Eh, El, 14) ^ rotrSL3(Eh, El, 18) ^ rotrBL3(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L3(Hl, sigma1l, CHIl, SHA512_Kl3[i5], SHA512_W_L3[i5]);
      const T1h = add5H3(T1ll, Hh, sigma1h, CHIh, SHA512_Kh3[i5], SHA512_W_H3[i5]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH3(Ah, Al, 28) ^ rotrBH3(Ah, Al, 34) ^ rotrBH3(Ah, Al, 39);
      const sigma0l = rotrSL3(Ah, Al, 28) ^ rotrBL3(Ah, Al, 34) ^ rotrBL3(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add3(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L3(T1l, sigma0l, MAJl);
      Ah = add3H3(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add3(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add3(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add3(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add3(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add3(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add3(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add3(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add3(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean4(SHA512_W_H3, SHA512_W_L3);
  }
  destroy() {
    clean4(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA3843 = class extends SHA5123 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV3[0] | 0;
    this.Al = SHA384_IV3[1] | 0;
    this.Bh = SHA384_IV3[2] | 0;
    this.Bl = SHA384_IV3[3] | 0;
    this.Ch = SHA384_IV3[4] | 0;
    this.Cl = SHA384_IV3[5] | 0;
    this.Dh = SHA384_IV3[6] | 0;
    this.Dl = SHA384_IV3[7] | 0;
    this.Eh = SHA384_IV3[8] | 0;
    this.El = SHA384_IV3[9] | 0;
    this.Fh = SHA384_IV3[10] | 0;
    this.Fl = SHA384_IV3[11] | 0;
    this.Gh = SHA384_IV3[12] | 0;
    this.Gl = SHA384_IV3[13] | 0;
    this.Hh = SHA384_IV3[14] | 0;
    this.Hl = SHA384_IV3[15] | 0;
  }
};
var T224_IV3 = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV3 = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_2243 = class extends SHA5123 {
  constructor() {
    super(28);
    this.Ah = T224_IV3[0] | 0;
    this.Al = T224_IV3[1] | 0;
    this.Bh = T224_IV3[2] | 0;
    this.Bl = T224_IV3[3] | 0;
    this.Ch = T224_IV3[4] | 0;
    this.Cl = T224_IV3[5] | 0;
    this.Dh = T224_IV3[6] | 0;
    this.Dl = T224_IV3[7] | 0;
    this.Eh = T224_IV3[8] | 0;
    this.El = T224_IV3[9] | 0;
    this.Fh = T224_IV3[10] | 0;
    this.Fl = T224_IV3[11] | 0;
    this.Gh = T224_IV3[12] | 0;
    this.Gl = T224_IV3[13] | 0;
    this.Hh = T224_IV3[14] | 0;
    this.Hl = T224_IV3[15] | 0;
  }
};
var SHA512_2563 = class extends SHA5123 {
  constructor() {
    super(32);
    this.Ah = T256_IV3[0] | 0;
    this.Al = T256_IV3[1] | 0;
    this.Bh = T256_IV3[2] | 0;
    this.Bl = T256_IV3[3] | 0;
    this.Ch = T256_IV3[4] | 0;
    this.Cl = T256_IV3[5] | 0;
    this.Dh = T256_IV3[6] | 0;
    this.Dl = T256_IV3[7] | 0;
    this.Eh = T256_IV3[8] | 0;
    this.El = T256_IV3[9] | 0;
    this.Fh = T256_IV3[10] | 0;
    this.Fl = T256_IV3[11] | 0;
    this.Gh = T256_IV3[12] | 0;
    this.Gl = T256_IV3[13] | 0;
    this.Hh = T256_IV3[14] | 0;
    this.Hl = T256_IV3[15] | 0;
  }
};
var sha25613 = createHasher4(() => new SHA2563());
var sha2243 = createHasher4(() => new SHA2243());
var sha5124 = createHasher4(() => new SHA5123());
var sha3843 = createHasher4(() => new SHA3843());
var sha512_2563 = createHasher4(() => new SHA512_2563());
var sha512_2243 = createHasher4(() => new SHA512_2243());

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Hash.js
function keccak2566(value, options = {}) {
  const { as: as4 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_2564(from14(value));
  if (as4 === "Bytes")
    return bytes;
  return fromBytes7(bytes);
}

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/lru.js
var LruMap7 = class extends Map {
  constructor(size14) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size14;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Caches.js
var caches3 = {
  checksum: new LruMap7(8192)
};
var checksum5 = caches3.checksum;

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Address.js
var addressRegex3 = /^0x[a-fA-F0-9]{40}$/;
function assert3(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex3.test(value))
    throw new InvalidAddressError7({
      address: value,
      cause: new InvalidInputError3()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum6(value) !== value)
      throw new InvalidAddressError7({
        address: value,
        cause: new InvalidChecksumError3()
      });
  }
}
function checksum6(address) {
  if (checksum5.has(address))
    return checksum5.get(address);
  assert3(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2566(fromString9(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i5 = 0; i5 < 40; i5 += 2) {
    if (hash[i5 >> 1] >> 4 >= 8 && characters[i5]) {
      characters[i5] = characters[i5].toUpperCase();
    }
    if ((hash[i5 >> 1] & 15) >= 8 && characters[i5 + 1]) {
      characters[i5 + 1] = characters[i5 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum5.set(address, result);
  return result;
}
var InvalidAddressError7 = class extends BaseError8 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError3 = class extends BaseError8 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError3 = class extends BaseError8 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Solidity.js
var arrayRegex6 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex6 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex6 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt85 = 2n ** (8n - 1n) - 1n;
var maxInt165 = 2n ** (16n - 1n) - 1n;
var maxInt245 = 2n ** (24n - 1n) - 1n;
var maxInt325 = 2n ** (32n - 1n) - 1n;
var maxInt405 = 2n ** (40n - 1n) - 1n;
var maxInt485 = 2n ** (48n - 1n) - 1n;
var maxInt565 = 2n ** (56n - 1n) - 1n;
var maxInt645 = 2n ** (64n - 1n) - 1n;
var maxInt725 = 2n ** (72n - 1n) - 1n;
var maxInt805 = 2n ** (80n - 1n) - 1n;
var maxInt885 = 2n ** (88n - 1n) - 1n;
var maxInt965 = 2n ** (96n - 1n) - 1n;
var maxInt1045 = 2n ** (104n - 1n) - 1n;
var maxInt1125 = 2n ** (112n - 1n) - 1n;
var maxInt1205 = 2n ** (120n - 1n) - 1n;
var maxInt1285 = 2n ** (128n - 1n) - 1n;
var maxInt1365 = 2n ** (136n - 1n) - 1n;
var maxInt1445 = 2n ** (144n - 1n) - 1n;
var maxInt1525 = 2n ** (152n - 1n) - 1n;
var maxInt1605 = 2n ** (160n - 1n) - 1n;
var maxInt1685 = 2n ** (168n - 1n) - 1n;
var maxInt1765 = 2n ** (176n - 1n) - 1n;
var maxInt1845 = 2n ** (184n - 1n) - 1n;
var maxInt1925 = 2n ** (192n - 1n) - 1n;
var maxInt2005 = 2n ** (200n - 1n) - 1n;
var maxInt2085 = 2n ** (208n - 1n) - 1n;
var maxInt2165 = 2n ** (216n - 1n) - 1n;
var maxInt2245 = 2n ** (224n - 1n) - 1n;
var maxInt2325 = 2n ** (232n - 1n) - 1n;
var maxInt2405 = 2n ** (240n - 1n) - 1n;
var maxInt2485 = 2n ** (248n - 1n) - 1n;
var maxInt2565 = 2n ** (256n - 1n) - 1n;
var minInt85 = -(2n ** (8n - 1n));
var minInt165 = -(2n ** (16n - 1n));
var minInt245 = -(2n ** (24n - 1n));
var minInt325 = -(2n ** (32n - 1n));
var minInt405 = -(2n ** (40n - 1n));
var minInt485 = -(2n ** (48n - 1n));
var minInt565 = -(2n ** (56n - 1n));
var minInt645 = -(2n ** (64n - 1n));
var minInt725 = -(2n ** (72n - 1n));
var minInt805 = -(2n ** (80n - 1n));
var minInt885 = -(2n ** (88n - 1n));
var minInt965 = -(2n ** (96n - 1n));
var minInt1045 = -(2n ** (104n - 1n));
var minInt1125 = -(2n ** (112n - 1n));
var minInt1205 = -(2n ** (120n - 1n));
var minInt1285 = -(2n ** (128n - 1n));
var minInt1365 = -(2n ** (136n - 1n));
var minInt1445 = -(2n ** (144n - 1n));
var minInt1525 = -(2n ** (152n - 1n));
var minInt1605 = -(2n ** (160n - 1n));
var minInt1685 = -(2n ** (168n - 1n));
var minInt1765 = -(2n ** (176n - 1n));
var minInt1845 = -(2n ** (184n - 1n));
var minInt1925 = -(2n ** (192n - 1n));
var minInt2005 = -(2n ** (200n - 1n));
var minInt2085 = -(2n ** (208n - 1n));
var minInt2165 = -(2n ** (216n - 1n));
var minInt2245 = -(2n ** (224n - 1n));
var minInt2325 = -(2n ** (232n - 1n));
var minInt2405 = -(2n ** (240n - 1n));
var minInt2485 = -(2n ** (248n - 1n));
var minInt2565 = -(2n ** (256n - 1n));
var maxUint85 = 2n ** 8n - 1n;
var maxUint165 = 2n ** 16n - 1n;
var maxUint245 = 2n ** 24n - 1n;
var maxUint325 = 2n ** 32n - 1n;
var maxUint405 = 2n ** 40n - 1n;
var maxUint485 = 2n ** 48n - 1n;
var maxUint565 = 2n ** 56n - 1n;
var maxUint645 = 2n ** 64n - 1n;
var maxUint725 = 2n ** 72n - 1n;
var maxUint805 = 2n ** 80n - 1n;
var maxUint885 = 2n ** 88n - 1n;
var maxUint965 = 2n ** 96n - 1n;
var maxUint1045 = 2n ** 104n - 1n;
var maxUint1125 = 2n ** 112n - 1n;
var maxUint1205 = 2n ** 120n - 1n;
var maxUint1285 = 2n ** 128n - 1n;
var maxUint1365 = 2n ** 136n - 1n;
var maxUint1445 = 2n ** 144n - 1n;
var maxUint1525 = 2n ** 152n - 1n;
var maxUint1605 = 2n ** 160n - 1n;
var maxUint1685 = 2n ** 168n - 1n;
var maxUint1765 = 2n ** 176n - 1n;
var maxUint1845 = 2n ** 184n - 1n;
var maxUint1925 = 2n ** 192n - 1n;
var maxUint2005 = 2n ** 200n - 1n;
var maxUint2085 = 2n ** 208n - 1n;
var maxUint2165 = 2n ** 216n - 1n;
var maxUint2245 = 2n ** 224n - 1n;
var maxUint2325 = 2n ** 232n - 1n;
var maxUint2405 = 2n ** 240n - 1n;
var maxUint2485 = 2n ** 248n - 1n;
var maxUint2567 = 2n ** 256n - 1n;

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor3 = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError3({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError6({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError3({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError3({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size14) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size14 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError3 = class extends BaseError8 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError6 = class extends BaseError8 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError3 = class extends BaseError8 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked6(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError3({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i5 = 0; i5 < types.length; i5++) {
    const type = types[i5];
    const value = values[i5];
    data.push(encodePacked6.encode(type, value));
  }
  return concat8(...data);
}
(function(encodePacked9) {
  function encode17(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert3(address);
      return padLeft4(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString10(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft4(fromBoolean4(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex6);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size14 = Number.parseInt(bits) / 8;
      return fromNumber4(value, {
        size: isArray ? 32 : size14,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex6);
    if (bytesMatch) {
      const [_type, size14] = bytesMatch;
      if (Number.parseInt(size14) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError6({
          expectedSize: Number.parseInt(size14),
          value
        });
      return padRight6(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex6);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i5 = 0; i5 < value.length; i5++) {
        data.push(encode17(childType, value[i5], true));
      }
      if (data.length === 0)
        return "0x";
      return concat8(...data);
    }
    throw new InvalidTypeError3(type);
  }
  encodePacked9.encode = encode17;
})(encodePacked6 || (encodePacked6 = {}));
var BytesSizeMismatchError6 = class extends BaseError8 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size11(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError3 = class extends BaseError8 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError3 = class extends BaseError8 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var import_elliptic3 = __toESM(require_elliptic());
var Pe4 = ":";
function Ye4(e3) {
  const [t2, n5] = e3.split(Pe4);
  return { namespace: t2, reference: n5 };
}
function Q4(e3 = [], t2 = []) {
  return [.../* @__PURE__ */ new Set([...e3, ...t2])];
}
function Ne4(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Io5(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function je5(e3, ...t2) {
  if (!Io5(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function ot3(e3) {
  if (typeof e3 != "function" || typeof e3.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Ne4(e3.outputLen), Ne4(e3.blockLen);
}
function me5(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function sn5(e3, t2) {
  je5(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
var Ce5 = BigInt(2 ** 32 - 1);
var cn4 = BigInt(32);
function Oo5(e3, t2 = false) {
  return t2 ? { h: Number(e3 & Ce5), l: Number(e3 >> cn4 & Ce5) } : { h: Number(e3 >> cn4 & Ce5) | 0, l: Number(e3 & Ce5) | 0 };
}
function Ao5(e3, t2 = false) {
  let n5 = new Uint32Array(e3.length), r3 = new Uint32Array(e3.length);
  for (let o6 = 0; o6 < e3.length; o6++) {
    const { h: s4, l: i5 } = Oo5(e3[o6], t2);
    [n5[o6], r3[o6]] = [s4, i5];
  }
  return [n5, r3];
}
var No5 = (e3, t2, n5) => e3 << n5 | t2 >>> 32 - n5;
var So5 = (e3, t2, n5) => t2 << n5 | e3 >>> 32 - n5;
var Uo5 = (e3, t2, n5) => t2 << n5 - 32 | e3 >>> 64 - n5;
var _o5 = (e3, t2, n5) => e3 << n5 - 32 | t2 >>> 64 - n5;
var be5 = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function To5(e3) {
  return new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
}
function st3(e3) {
  return new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
}
function J6(e3, t2) {
  return e3 << 32 - t2 | e3 >>> t2;
}
var an4 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function $o5(e3) {
  return e3 << 24 & 4278190080 | e3 << 8 & 16711680 | e3 >>> 8 & 65280 | e3 >>> 24 & 255;
}
function un4(e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2] = $o5(e3[t2]);
}
function Ro5(e3) {
  if (typeof e3 != "string") throw new Error("utf8ToBytes expected string, got " + typeof e3);
  return new Uint8Array(new TextEncoder().encode(e3));
}
function we5(e3) {
  return typeof e3 == "string" && (e3 = Ro5(e3)), je5(e3), e3;
}
var it5 = class {
  clone() {
    return this._cloneInto();
  }
};
function fn4(e3) {
  const t2 = (r3) => e3().update(we5(r3)).digest(), n5 = e3();
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = () => e3(), t2;
}
function Se5(e3 = 32) {
  if (be5 && typeof be5.getRandomValues == "function") return be5.getRandomValues(new Uint8Array(e3));
  if (be5 && typeof be5.randomBytes == "function") return be5.randomBytes(e3);
  throw new Error("crypto.getRandomValues must be defined");
}
var ln4 = [];
var dn4 = [];
var hn4 = [];
var Po5 = BigInt(0);
var Ue6 = BigInt(1);
var Bo5 = BigInt(2);
var Lo5 = BigInt(7);
var jo5 = BigInt(256);
var Co5 = BigInt(113);
for (let e3 = 0, t2 = Ue6, n5 = 1, r3 = 0; e3 < 24; e3++) {
  [n5, r3] = [r3, (2 * n5 + 3 * r3) % 5], ln4.push(2 * (5 * r3 + n5)), dn4.push((e3 + 1) * (e3 + 2) / 2 % 64);
  let o6 = Po5;
  for (let s4 = 0; s4 < 7; s4++) t2 = (t2 << Ue6 ^ (t2 >> Lo5) * Co5) % jo5, t2 & Bo5 && (o6 ^= Ue6 << (Ue6 << BigInt(s4)) - Ue6);
  hn4.push(o6);
}
var [ko5, Do5] = Ao5(hn4, true);
var pn4 = (e3, t2, n5) => n5 > 32 ? Uo5(e3, t2, n5) : No5(e3, t2, n5);
var gn5 = (e3, t2, n5) => n5 > 32 ? _o5(e3, t2, n5) : So5(e3, t2, n5);
function Mo5(e3, t2 = 24) {
  const n5 = new Uint32Array(10);
  for (let r3 = 24 - t2; r3 < 24; r3++) {
    for (let i5 = 0; i5 < 10; i5++) n5[i5] = e3[i5] ^ e3[i5 + 10] ^ e3[i5 + 20] ^ e3[i5 + 30] ^ e3[i5 + 40];
    for (let i5 = 0; i5 < 10; i5 += 2) {
      const c8 = (i5 + 8) % 10, u4 = (i5 + 2) % 10, a3 = n5[u4], l8 = n5[u4 + 1], f10 = pn4(a3, l8, 1) ^ n5[c8], d6 = gn5(a3, l8, 1) ^ n5[c8 + 1];
      for (let g5 = 0; g5 < 50; g5 += 10) e3[i5 + g5] ^= f10, e3[i5 + g5 + 1] ^= d6;
    }
    let o6 = e3[2], s4 = e3[3];
    for (let i5 = 0; i5 < 24; i5++) {
      const c8 = dn4[i5], u4 = pn4(o6, s4, c8), a3 = gn5(o6, s4, c8), l8 = ln4[i5];
      o6 = e3[l8], s4 = e3[l8 + 1], e3[l8] = u4, e3[l8 + 1] = a3;
    }
    for (let i5 = 0; i5 < 50; i5 += 10) {
      for (let c8 = 0; c8 < 10; c8++) n5[c8] = e3[i5 + c8];
      for (let c8 = 0; c8 < 10; c8++) e3[i5 + c8] ^= ~n5[(c8 + 2) % 10] & n5[(c8 + 4) % 10];
    }
    e3[0] ^= ko5[r3], e3[1] ^= Do5[r3];
  }
  n5.fill(0);
}
var Lt5 = class _Lt extends it5 {
  constructor(t2, n5, r3, o6 = false, s4 = 24) {
    if (super(), this.blockLen = t2, this.suffix = n5, this.outputLen = r3, this.enableXOF = o6, this.rounds = s4, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Ne4(r3), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = To5(this.state);
  }
  keccak() {
    an4 || un4(this.state32), Mo5(this.state32, this.rounds), an4 || un4(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(t2) {
    me5(this);
    const { blockLen: n5, state: r3 } = this;
    t2 = we5(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(n5 - this.pos, o6 - s4);
      for (let c8 = 0; c8 < i5; c8++) r3[this.pos++] ^= t2[s4++];
      this.pos === n5 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: t2, suffix: n5, pos: r3, blockLen: o6 } = this;
    t2[r3] ^= n5, (n5 & 128) !== 0 && r3 === o6 - 1 && this.keccak(), t2[o6 - 1] ^= 128, this.keccak();
  }
  writeInto(t2) {
    me5(this, false), je5(t2), this.finish();
    const n5 = this.state, { blockLen: r3 } = this;
    for (let o6 = 0, s4 = t2.length; o6 < s4; ) {
      this.posOut >= r3 && this.keccak();
      const i5 = Math.min(r3 - this.posOut, s4 - o6);
      t2.set(n5.subarray(this.posOut, this.posOut + i5), o6), this.posOut += i5, o6 += i5;
    }
    return t2;
  }
  xofInto(t2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(t2);
  }
  xof(t2) {
    return Ne4(t2), this.xofInto(new Uint8Array(t2));
  }
  digestInto(t2) {
    if (sn5(t2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(t2), this.destroy(), t2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(t2) {
    const { blockLen: n5, suffix: r3, outputLen: o6, rounds: s4, enableXOF: i5 } = this;
    return t2 || (t2 = new _Lt(n5, r3, o6, i5, s4)), t2.state32.set(this.state32), t2.pos = this.pos, t2.posOut = this.posOut, t2.finished = this.finished, t2.rounds = s4, t2.suffix = r3, t2.outputLen = o6, t2.enableXOF = i5, t2.destroyed = this.destroyed, t2;
  }
};
var Vo5 = (e3, t2, n5) => fn4(() => new Lt5(t2, e3, n5));
var Ho5 = Vo5(1, 136, 256 / 8);
function ht5(e3) {
  if (!Number.isSafeInteger(e3) || e3 < 0) throw new Error("positive integer expected, got " + e3);
}
function Bn5(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function F4(e3, ...t2) {
  if (!Bn5(e3)) throw new Error("Uint8Array expected");
  if (t2.length > 0 && !t2.includes(e3.length)) throw new Error("Uint8Array expected of length " + t2 + ", got length=" + e3.length);
}
function Ln5(e3, t2 = true) {
  if (e3.destroyed) throw new Error("Hash instance has been destroyed");
  if (t2 && e3.finished) throw new Error("Hash#digest() has already been called");
}
function cs4(e3, t2) {
  F4(e3);
  const n5 = t2.outputLen;
  if (e3.length < n5) throw new Error("digestInto() expects output buffer of length at least " + n5);
}
function jn5(e3) {
  if (typeof e3 != "boolean") throw new Error(`boolean expected, not ${e3}`);
}
var se4 = (e3) => new Uint32Array(e3.buffer, e3.byteOffset, Math.floor(e3.byteLength / 4));
var as3 = (e3) => new DataView(e3.buffer, e3.byteOffset, e3.byteLength);
var us3 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!us3) throw new Error("Non little-endian hardware is not supported");
function fs3(e3) {
  if (typeof e3 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(e3));
}
function pt4(e3) {
  if (typeof e3 == "string") e3 = fs3(e3);
  else if (Bn5(e3)) e3 = gt5(e3);
  else throw new Error("Uint8Array expected, got " + typeof e3);
  return e3;
}
function ls4(e3, t2) {
  if (t2 == null || typeof t2 != "object") throw new Error("options must be defined");
  return Object.assign(e3, t2);
}
function ds3(e3, t2) {
  if (e3.length !== t2.length) return false;
  let n5 = 0;
  for (let r3 = 0; r3 < e3.length; r3++) n5 |= e3[r3] ^ t2[r3];
  return n5 === 0;
}
var hs3 = (e3, t2) => {
  function n5(r3, ...o6) {
    if (F4(r3), e3.nonceLength !== void 0) {
      const l8 = o6[0];
      if (!l8) throw new Error("nonce / iv required");
      e3.varSizeNonce ? F4(l8) : F4(l8, e3.nonceLength);
    }
    const s4 = e3.tagLength;
    s4 && o6[1] !== void 0 && F4(o6[1]);
    const i5 = t2(r3, ...o6), c8 = (l8, f10) => {
      if (f10 !== void 0) {
        if (l8 !== 2) throw new Error("cipher output not supported");
        F4(f10);
      }
    };
    let u4 = false;
    return { encrypt(l8, f10) {
      if (u4) throw new Error("cannot encrypt() twice with same key + nonce");
      return u4 = true, F4(l8), c8(i5.encrypt.length, f10), i5.encrypt(l8, f10);
    }, decrypt(l8, f10) {
      if (F4(l8), s4 && l8.length < s4) throw new Error("invalid ciphertext length: smaller than tagLength=" + s4);
      return c8(i5.decrypt.length, f10), i5.decrypt(l8, f10);
    } };
  }
  return Object.assign(n5, e3), n5;
};
function Cn5(e3, t2, n5 = true) {
  if (t2 === void 0) return new Uint8Array(e3);
  if (t2.length !== e3) throw new Error("invalid output length, expected " + e3 + ", got: " + t2.length);
  if (n5 && !ps4(t2)) throw new Error("invalid output, must be aligned");
  return t2;
}
function kn5(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function ps4(e3) {
  return e3.byteOffset % 4 === 0;
}
function gt5(e3) {
  return Uint8Array.from(e3);
}
function Ee6(...e3) {
  for (let t2 = 0; t2 < e3.length; t2++) e3[t2].fill(0);
}
var Dn4 = (e3) => Uint8Array.from(e3.split("").map((t2) => t2.charCodeAt(0)));
var gs3 = Dn4("expand 16-byte k");
var ys3 = Dn4("expand 32-byte k");
var ms3 = se4(gs3);
var bs4 = se4(ys3);
function x6(e3, t2) {
  return e3 << t2 | e3 >>> 32 - t2;
}
function yt5(e3) {
  return e3.byteOffset % 4 === 0;
}
var Ve5 = 64;
var ws3 = 16;
var Mn5 = 2 ** 32 - 1;
var Vn5 = new Uint32Array();
function Es3(e3, t2, n5, r3, o6, s4, i5, c8) {
  const u4 = o6.length, a3 = new Uint8Array(Ve5), l8 = se4(a3), f10 = yt5(o6) && yt5(s4), d6 = f10 ? se4(o6) : Vn5, g5 = f10 ? se4(s4) : Vn5;
  for (let y7 = 0; y7 < u4; i5++) {
    if (e3(t2, n5, r3, l8, i5, c8), i5 >= Mn5) throw new Error("arx: counter overflow");
    const h6 = Math.min(Ve5, u4 - y7);
    if (f10 && h6 === Ve5) {
      const m4 = y7 / 4;
      if (y7 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let L5 = 0, b6; L5 < ws3; L5++) b6 = m4 + L5, g5[b6] = d6[b6] ^ l8[L5];
      y7 += Ve5;
      continue;
    }
    for (let m4 = 0, L5; m4 < h6; m4++) L5 = y7 + m4, s4[L5] = o6[L5] ^ a3[m4];
    y7 += h6;
  }
}
function vs4(e3, t2) {
  const { allowShortKeys: n5, extendNonceFn: r3, counterLength: o6, counterRight: s4, rounds: i5 } = ls4({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, t2);
  if (typeof e3 != "function") throw new Error("core must be a function");
  return ht5(o6), ht5(i5), jn5(s4), jn5(n5), (c8, u4, a3, l8, f10 = 0) => {
    F4(c8), F4(u4), F4(a3);
    const d6 = a3.length;
    if (l8 === void 0 && (l8 = new Uint8Array(d6)), F4(l8), ht5(f10), f10 < 0 || f10 >= Mn5) throw new Error("arx: counter overflow");
    if (l8.length < d6) throw new Error(`arx: output (${l8.length}) is shorter than data (${d6})`);
    const g5 = [];
    let y7 = c8.length, h6, m4;
    if (y7 === 32) g5.push(h6 = gt5(c8)), m4 = bs4;
    else if (y7 === 16 && n5) h6 = new Uint8Array(32), h6.set(c8), h6.set(c8, 16), m4 = ms3, g5.push(h6);
    else throw new Error(`arx: invalid 32-byte key, got length=${y7}`);
    yt5(u4) || g5.push(u4 = gt5(u4));
    const L5 = se4(h6);
    if (r3) {
      if (u4.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r3(m4, L5, se4(u4.subarray(0, 16)), L5), u4 = u4.subarray(16);
    }
    const b6 = 16 - o6;
    if (b6 !== u4.length) throw new Error(`arx: nonce must be ${b6} or 16 bytes`);
    if (b6 !== 12) {
      const O7 = new Uint8Array(12);
      O7.set(u4, s4 ? 0 : 12 - u4.length), u4 = O7, g5.push(u4);
    }
    const _4 = se4(u4);
    return Es3(e3, m4, L5, _4, a3, l8, f10, i5), Ee6(...g5), l8;
  };
}
var M6 = (e3, t2) => e3[t2++] & 255 | (e3[t2++] & 255) << 8;
var xs4 = class {
  constructor(t2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, t2 = pt4(t2), F4(t2, 32);
    const n5 = M6(t2, 0), r3 = M6(t2, 2), o6 = M6(t2, 4), s4 = M6(t2, 6), i5 = M6(t2, 8), c8 = M6(t2, 10), u4 = M6(t2, 12), a3 = M6(t2, 14);
    this.r[0] = n5 & 8191, this.r[1] = (n5 >>> 13 | r3 << 3) & 8191, this.r[2] = (r3 >>> 10 | o6 << 6) & 7939, this.r[3] = (o6 >>> 7 | s4 << 9) & 8191, this.r[4] = (s4 >>> 4 | i5 << 12) & 255, this.r[5] = i5 >>> 1 & 8190, this.r[6] = (i5 >>> 14 | c8 << 2) & 8191, this.r[7] = (c8 >>> 11 | u4 << 5) & 8065, this.r[8] = (u4 >>> 8 | a3 << 8) & 8191, this.r[9] = a3 >>> 5 & 127;
    for (let l8 = 0; l8 < 8; l8++) this.pad[l8] = M6(t2, 16 + 2 * l8);
  }
  process(t2, n5, r3 = false) {
    const o6 = r3 ? 0 : 2048, { h: s4, r: i5 } = this, c8 = i5[0], u4 = i5[1], a3 = i5[2], l8 = i5[3], f10 = i5[4], d6 = i5[5], g5 = i5[6], y7 = i5[7], h6 = i5[8], m4 = i5[9], L5 = M6(t2, n5 + 0), b6 = M6(t2, n5 + 2), _4 = M6(t2, n5 + 4), O7 = M6(t2, n5 + 6), k7 = M6(t2, n5 + 8), E7 = M6(t2, n5 + 10), B4 = M6(t2, n5 + 12), j4 = M6(t2, n5 + 14);
    let v7 = s4[0] + (L5 & 8191), I4 = s4[1] + ((L5 >>> 13 | b6 << 3) & 8191), w6 = s4[2] + ((b6 >>> 10 | _4 << 6) & 8191), R3 = s4[3] + ((_4 >>> 7 | O7 << 9) & 8191), A4 = s4[4] + ((O7 >>> 4 | k7 << 12) & 8191), T4 = s4[5] + (k7 >>> 1 & 8191), N12 = s4[6] + ((k7 >>> 14 | E7 << 2) & 8191), S5 = s4[7] + ((E7 >>> 11 | B4 << 5) & 8191), U3 = s4[8] + ((B4 >>> 8 | j4 << 8) & 8191), $4 = s4[9] + (j4 >>> 5 | o6), p6 = 0, C6 = p6 + v7 * c8 + I4 * (5 * m4) + w6 * (5 * h6) + R3 * (5 * y7) + A4 * (5 * g5);
    p6 = C6 >>> 13, C6 &= 8191, C6 += T4 * (5 * d6) + N12 * (5 * f10) + S5 * (5 * l8) + U3 * (5 * a3) + $4 * (5 * u4), p6 += C6 >>> 13, C6 &= 8191;
    let D3 = p6 + v7 * u4 + I4 * c8 + w6 * (5 * m4) + R3 * (5 * h6) + A4 * (5 * y7);
    p6 = D3 >>> 13, D3 &= 8191, D3 += T4 * (5 * g5) + N12 * (5 * d6) + S5 * (5 * f10) + U3 * (5 * l8) + $4 * (5 * a3), p6 += D3 >>> 13, D3 &= 8191;
    let P7 = p6 + v7 * a3 + I4 * u4 + w6 * c8 + R3 * (5 * m4) + A4 * (5 * h6);
    p6 = P7 >>> 13, P7 &= 8191, P7 += T4 * (5 * y7) + N12 * (5 * g5) + S5 * (5 * d6) + U3 * (5 * f10) + $4 * (5 * l8), p6 += P7 >>> 13, P7 &= 8191;
    let G4 = p6 + v7 * l8 + I4 * a3 + w6 * u4 + R3 * c8 + A4 * (5 * m4);
    p6 = G4 >>> 13, G4 &= 8191, G4 += T4 * (5 * h6) + N12 * (5 * y7) + S5 * (5 * g5) + U3 * (5 * d6) + $4 * (5 * f10), p6 += G4 >>> 13, G4 &= 8191;
    let X = p6 + v7 * f10 + I4 * l8 + w6 * a3 + R3 * u4 + A4 * c8;
    p6 = X >>> 13, X &= 8191, X += T4 * (5 * m4) + N12 * (5 * h6) + S5 * (5 * y7) + U3 * (5 * g5) + $4 * (5 * d6), p6 += X >>> 13, X &= 8191;
    let Z2 = p6 + v7 * d6 + I4 * f10 + w6 * l8 + R3 * a3 + A4 * u4;
    p6 = Z2 >>> 13, Z2 &= 8191, Z2 += T4 * c8 + N12 * (5 * m4) + S5 * (5 * h6) + U3 * (5 * y7) + $4 * (5 * g5), p6 += Z2 >>> 13, Z2 &= 8191;
    let he4 = p6 + v7 * g5 + I4 * d6 + w6 * f10 + R3 * l8 + A4 * a3;
    p6 = he4 >>> 13, he4 &= 8191, he4 += T4 * u4 + N12 * c8 + S5 * (5 * m4) + U3 * (5 * h6) + $4 * (5 * y7), p6 += he4 >>> 13, he4 &= 8191;
    let pe4 = p6 + v7 * y7 + I4 * g5 + w6 * d6 + R3 * f10 + A4 * l8;
    p6 = pe4 >>> 13, pe4 &= 8191, pe4 += T4 * a3 + N12 * u4 + S5 * c8 + U3 * (5 * m4) + $4 * (5 * h6), p6 += pe4 >>> 13, pe4 &= 8191;
    let ge4 = p6 + v7 * h6 + I4 * y7 + w6 * g5 + R3 * d6 + A4 * f10;
    p6 = ge4 >>> 13, ge4 &= 8191, ge4 += T4 * l8 + N12 * a3 + S5 * u4 + U3 * c8 + $4 * (5 * m4), p6 += ge4 >>> 13, ge4 &= 8191;
    let ye4 = p6 + v7 * m4 + I4 * h6 + w6 * y7 + R3 * g5 + A4 * d6;
    p6 = ye4 >>> 13, ye4 &= 8191, ye4 += T4 * f10 + N12 * l8 + S5 * a3 + U3 * u4 + $4 * c8, p6 += ye4 >>> 13, ye4 &= 8191, p6 = (p6 << 2) + p6 | 0, p6 = p6 + C6 | 0, C6 = p6 & 8191, p6 = p6 >>> 13, D3 += p6, s4[0] = C6, s4[1] = D3, s4[2] = P7, s4[3] = G4, s4[4] = X, s4[5] = Z2, s4[6] = he4, s4[7] = pe4, s4[8] = ge4, s4[9] = ye4;
  }
  finalize() {
    const { h: t2, pad: n5 } = this, r3 = new Uint16Array(10);
    let o6 = t2[1] >>> 13;
    t2[1] &= 8191;
    for (let c8 = 2; c8 < 10; c8++) t2[c8] += o6, o6 = t2[c8] >>> 13, t2[c8] &= 8191;
    t2[0] += o6 * 5, o6 = t2[0] >>> 13, t2[0] &= 8191, t2[1] += o6, o6 = t2[1] >>> 13, t2[1] &= 8191, t2[2] += o6, r3[0] = t2[0] + 5, o6 = r3[0] >>> 13, r3[0] &= 8191;
    for (let c8 = 1; c8 < 10; c8++) r3[c8] = t2[c8] + o6, o6 = r3[c8] >>> 13, r3[c8] &= 8191;
    r3[9] -= 8192;
    let s4 = (o6 ^ 1) - 1;
    for (let c8 = 0; c8 < 10; c8++) r3[c8] &= s4;
    s4 = ~s4;
    for (let c8 = 0; c8 < 10; c8++) t2[c8] = t2[c8] & s4 | r3[c8];
    t2[0] = (t2[0] | t2[1] << 13) & 65535, t2[1] = (t2[1] >>> 3 | t2[2] << 10) & 65535, t2[2] = (t2[2] >>> 6 | t2[3] << 7) & 65535, t2[3] = (t2[3] >>> 9 | t2[4] << 4) & 65535, t2[4] = (t2[4] >>> 12 | t2[5] << 1 | t2[6] << 14) & 65535, t2[5] = (t2[6] >>> 2 | t2[7] << 11) & 65535, t2[6] = (t2[7] >>> 5 | t2[8] << 8) & 65535, t2[7] = (t2[8] >>> 8 | t2[9] << 5) & 65535;
    let i5 = t2[0] + n5[0];
    t2[0] = i5 & 65535;
    for (let c8 = 1; c8 < 8; c8++) i5 = (t2[c8] + n5[c8] | 0) + (i5 >>> 16) | 0, t2[c8] = i5 & 65535;
    Ee6(r3);
  }
  update(t2) {
    Ln5(this);
    const { buffer: n5, blockLen: r3 } = this;
    t2 = pt4(t2);
    const o6 = t2.length;
    for (let s4 = 0; s4 < o6; ) {
      const i5 = Math.min(r3 - this.pos, o6 - s4);
      if (i5 === r3) {
        for (; r3 <= o6 - s4; s4 += r3) this.process(t2, s4);
        continue;
      }
      n5.set(t2.subarray(s4, s4 + i5), this.pos), this.pos += i5, s4 += i5, this.pos === r3 && (this.process(n5, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    Ee6(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(t2) {
    Ln5(this), cs4(t2, this), this.finished = true;
    const { buffer: n5, h: r3 } = this;
    let { pos: o6 } = this;
    if (o6) {
      for (n5[o6++] = 1; o6 < 16; o6++) n5[o6] = 0;
      this.process(n5, 0, true);
    }
    this.finalize();
    let s4 = 0;
    for (let i5 = 0; i5 < 8; i5++) t2[s4++] = r3[i5] >>> 0, t2[s4++] = r3[i5] >>> 8;
    return t2;
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
};
function Is4(e3) {
  const t2 = (r3, o6) => e3(o6).update(pt4(r3)).digest(), n5 = e3(new Uint8Array(32));
  return t2.outputLen = n5.outputLen, t2.blockLen = n5.blockLen, t2.create = (r3) => e3(r3), t2;
}
var Os4 = Is4((e3) => new xs4(e3));
function As4(e3, t2, n5, r3, o6, s4 = 20) {
  let i5 = e3[0], c8 = e3[1], u4 = e3[2], a3 = e3[3], l8 = t2[0], f10 = t2[1], d6 = t2[2], g5 = t2[3], y7 = t2[4], h6 = t2[5], m4 = t2[6], L5 = t2[7], b6 = o6, _4 = n5[0], O7 = n5[1], k7 = n5[2], E7 = i5, B4 = c8, j4 = u4, v7 = a3, I4 = l8, w6 = f10, R3 = d6, A4 = g5, T4 = y7, N12 = h6, S5 = m4, U3 = L5, $4 = b6, p6 = _4, C6 = O7, D3 = k7;
  for (let G4 = 0; G4 < s4; G4 += 2) E7 = E7 + I4 | 0, $4 = x6($4 ^ E7, 16), T4 = T4 + $4 | 0, I4 = x6(I4 ^ T4, 12), E7 = E7 + I4 | 0, $4 = x6($4 ^ E7, 8), T4 = T4 + $4 | 0, I4 = x6(I4 ^ T4, 7), B4 = B4 + w6 | 0, p6 = x6(p6 ^ B4, 16), N12 = N12 + p6 | 0, w6 = x6(w6 ^ N12, 12), B4 = B4 + w6 | 0, p6 = x6(p6 ^ B4, 8), N12 = N12 + p6 | 0, w6 = x6(w6 ^ N12, 7), j4 = j4 + R3 | 0, C6 = x6(C6 ^ j4, 16), S5 = S5 + C6 | 0, R3 = x6(R3 ^ S5, 12), j4 = j4 + R3 | 0, C6 = x6(C6 ^ j4, 8), S5 = S5 + C6 | 0, R3 = x6(R3 ^ S5, 7), v7 = v7 + A4 | 0, D3 = x6(D3 ^ v7, 16), U3 = U3 + D3 | 0, A4 = x6(A4 ^ U3, 12), v7 = v7 + A4 | 0, D3 = x6(D3 ^ v7, 8), U3 = U3 + D3 | 0, A4 = x6(A4 ^ U3, 7), E7 = E7 + w6 | 0, D3 = x6(D3 ^ E7, 16), S5 = S5 + D3 | 0, w6 = x6(w6 ^ S5, 12), E7 = E7 + w6 | 0, D3 = x6(D3 ^ E7, 8), S5 = S5 + D3 | 0, w6 = x6(w6 ^ S5, 7), B4 = B4 + R3 | 0, $4 = x6($4 ^ B4, 16), U3 = U3 + $4 | 0, R3 = x6(R3 ^ U3, 12), B4 = B4 + R3 | 0, $4 = x6($4 ^ B4, 8), U3 = U3 + $4 | 0, R3 = x6(R3 ^ U3, 7), j4 = j4 + A4 | 0, p6 = x6(p6 ^ j4, 16), T4 = T4 + p6 | 0, A4 = x6(A4 ^ T4, 12), j4 = j4 + A4 | 0, p6 = x6(p6 ^ j4, 8), T4 = T4 + p6 | 0, A4 = x6(A4 ^ T4, 7), v7 = v7 + I4 | 0, C6 = x6(C6 ^ v7, 16), N12 = N12 + C6 | 0, I4 = x6(I4 ^ N12, 12), v7 = v7 + I4 | 0, C6 = x6(C6 ^ v7, 8), N12 = N12 + C6 | 0, I4 = x6(I4 ^ N12, 7);
  let P7 = 0;
  r3[P7++] = i5 + E7 | 0, r3[P7++] = c8 + B4 | 0, r3[P7++] = u4 + j4 | 0, r3[P7++] = a3 + v7 | 0, r3[P7++] = l8 + I4 | 0, r3[P7++] = f10 + w6 | 0, r3[P7++] = d6 + R3 | 0, r3[P7++] = g5 + A4 | 0, r3[P7++] = y7 + T4 | 0, r3[P7++] = h6 + N12 | 0, r3[P7++] = m4 + S5 | 0, r3[P7++] = L5 + U3 | 0, r3[P7++] = b6 + $4 | 0, r3[P7++] = _4 + p6 | 0, r3[P7++] = O7 + C6 | 0, r3[P7++] = k7 + D3 | 0;
}
var Ns4 = vs4(As4, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ss3 = new Uint8Array(16);
var Hn5 = (e3, t2) => {
  e3.update(t2);
  const n5 = t2.length % 16;
  n5 && e3.update(Ss3.subarray(n5));
};
var Us3 = new Uint8Array(32);
function Kn5(e3, t2, n5, r3, o6) {
  const s4 = e3(t2, n5, Us3), i5 = Os4.create(s4);
  o6 && Hn5(i5, o6), Hn5(i5, r3);
  const c8 = new Uint8Array(16), u4 = as3(c8);
  kn5(u4, 0, BigInt(o6 ? o6.length : 0), true), kn5(u4, 8, BigInt(r3.length), true), i5.update(c8);
  const a3 = i5.digest();
  return Ee6(s4, c8), a3;
}
var _s3 = (e3) => (t2, n5, r3) => ({ encrypt(s4, i5) {
  const c8 = s4.length;
  i5 = Cn5(c8 + 16, i5, false), i5.set(s4);
  const u4 = i5.subarray(0, -16);
  e3(t2, n5, u4, u4, 1);
  const a3 = Kn5(e3, t2, n5, u4, r3);
  return i5.set(a3, c8), Ee6(a3), i5;
}, decrypt(s4, i5) {
  i5 = Cn5(s4.length - 16, i5, false);
  const c8 = s4.subarray(0, -16), u4 = s4.subarray(-16), a3 = Kn5(e3, t2, n5, c8, r3);
  if (!ds3(u4, a3)) throw new Error("invalid tag");
  return i5.set(s4.subarray(0, -16)), e3(t2, n5, i5, i5, 1), Ee6(a3), i5;
} });
var Fn5 = hs3({ blockSize: 64, nonceLength: 12, tagLength: 16 }, _s3(Ns4));
var qn5 = class extends it5 {
  constructor(t2, n5) {
    super(), this.finished = false, this.destroyed = false, ot3(t2);
    const r3 = we5(n5);
    if (this.iHash = t2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o6 = this.blockLen, s4 = new Uint8Array(o6);
    s4.set(r3.length > o6 ? t2.create().update(r3).digest() : r3);
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 54;
    this.iHash.update(s4), this.oHash = t2.create();
    for (let i5 = 0; i5 < s4.length; i5++) s4[i5] ^= 106;
    this.oHash.update(s4), s4.fill(0);
  }
  update(t2) {
    return me5(this), this.iHash.update(t2), this;
  }
  digestInto(t2) {
    me5(this), je5(t2, this.outputLen), this.finished = true, this.iHash.digestInto(t2), this.oHash.update(t2), this.oHash.digestInto(t2), this.destroy();
  }
  digest() {
    const t2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t2), t2;
  }
  _cloneInto(t2) {
    t2 || (t2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n5, iHash: r3, finished: o6, destroyed: s4, blockLen: i5, outputLen: c8 } = this;
    return t2 = t2, t2.finished = o6, t2.destroyed = s4, t2.blockLen = i5, t2.outputLen = c8, t2.oHash = n5._cloneInto(t2.oHash), t2.iHash = r3._cloneInto(t2.iHash), t2;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var mt4 = (e3, t2, n5) => new qn5(e3, t2).update(n5).digest();
mt4.create = (e3, t2) => new qn5(e3, t2);
var bt4 = new Uint8Array([0]);
var Gn5 = new Uint8Array();
function Ps4(e3, t2, n5, r3) {
  if (typeof e3.setBigUint64 == "function") return e3.setBigUint64(t2, n5, r3);
  const o6 = BigInt(32), s4 = BigInt(4294967295), i5 = Number(n5 >> o6 & s4), c8 = Number(n5 & s4), u4 = r3 ? 4 : 0, a3 = r3 ? 0 : 4;
  e3.setUint32(t2 + u4, i5, r3), e3.setUint32(t2 + a3, c8, r3);
}
function Bs3(e3, t2, n5) {
  return e3 & t2 ^ ~e3 & n5;
}
function Ls4(e3, t2, n5) {
  return e3 & t2 ^ e3 & n5 ^ t2 & n5;
}
var js3 = class extends it5 {
  constructor(t2, n5, r3, o6) {
    super(), this.blockLen = t2, this.outputLen = n5, this.padOffset = r3, this.isLE = o6, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(t2), this.view = st3(this.buffer);
  }
  update(t2) {
    me5(this);
    const { view: n5, buffer: r3, blockLen: o6 } = this;
    t2 = we5(t2);
    const s4 = t2.length;
    for (let i5 = 0; i5 < s4; ) {
      const c8 = Math.min(o6 - this.pos, s4 - i5);
      if (c8 === o6) {
        const u4 = st3(t2);
        for (; o6 <= s4 - i5; i5 += o6) this.process(u4, i5);
        continue;
      }
      r3.set(t2.subarray(i5, i5 + c8), this.pos), this.pos += c8, i5 += c8, this.pos === o6 && (this.process(n5, 0), this.pos = 0);
    }
    return this.length += t2.length, this.roundClean(), this;
  }
  digestInto(t2) {
    me5(this), sn5(t2, this), this.finished = true;
    const { buffer: n5, view: r3, blockLen: o6, isLE: s4 } = this;
    let { pos: i5 } = this;
    n5[i5++] = 128, this.buffer.subarray(i5).fill(0), this.padOffset > o6 - i5 && (this.process(r3, 0), i5 = 0);
    for (let f10 = i5; f10 < o6; f10++) n5[f10] = 0;
    Ps4(r3, o6 - 8, BigInt(this.length * 8), s4), this.process(r3, 0);
    const c8 = st3(t2), u4 = this.outputLen;
    if (u4 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const a3 = u4 / 4, l8 = this.get();
    if (a3 > l8.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f10 = 0; f10 < a3; f10++) c8.setUint32(4 * f10, l8[f10], s4);
  }
  digest() {
    const { buffer: t2, outputLen: n5 } = this;
    this.digestInto(t2);
    const r3 = t2.slice(0, n5);
    return this.destroy(), r3;
  }
  _cloneInto(t2) {
    t2 || (t2 = new this.constructor()), t2.set(...this.get());
    const { blockLen: n5, buffer: r3, length: o6, finished: s4, destroyed: i5, pos: c8 } = this;
    return t2.length = o6, t2.pos = c8, t2.finished = s4, t2.destroyed = i5, o6 % n5 && t2.buffer.set(r3), t2;
  }
};
var Cs4 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var ie4 = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var ce4 = new Uint32Array(64);
var ks4 = class extends js3 {
  constructor() {
    super(64, 32, 8, false), this.A = ie4[0] | 0, this.B = ie4[1] | 0, this.C = ie4[2] | 0, this.D = ie4[3] | 0, this.E = ie4[4] | 0, this.F = ie4[5] | 0, this.G = ie4[6] | 0, this.H = ie4[7] | 0;
  }
  get() {
    const { A: t2, B: n5, C: r3, D: o6, E: s4, F: i5, G: c8, H: u4 } = this;
    return [t2, n5, r3, o6, s4, i5, c8, u4];
  }
  set(t2, n5, r3, o6, s4, i5, c8, u4) {
    this.A = t2 | 0, this.B = n5 | 0, this.C = r3 | 0, this.D = o6 | 0, this.E = s4 | 0, this.F = i5 | 0, this.G = c8 | 0, this.H = u4 | 0;
  }
  process(t2, n5) {
    for (let f10 = 0; f10 < 16; f10++, n5 += 4) ce4[f10] = t2.getUint32(n5, false);
    for (let f10 = 16; f10 < 64; f10++) {
      const d6 = ce4[f10 - 15], g5 = ce4[f10 - 2], y7 = J6(d6, 7) ^ J6(d6, 18) ^ d6 >>> 3, h6 = J6(g5, 17) ^ J6(g5, 19) ^ g5 >>> 10;
      ce4[f10] = h6 + ce4[f10 - 7] + y7 + ce4[f10 - 16] | 0;
    }
    let { A: r3, B: o6, C: s4, D: i5, E: c8, F: u4, G: a3, H: l8 } = this;
    for (let f10 = 0; f10 < 64; f10++) {
      const d6 = J6(c8, 6) ^ J6(c8, 11) ^ J6(c8, 25), g5 = l8 + d6 + Bs3(c8, u4, a3) + Cs4[f10] + ce4[f10] | 0, h6 = (J6(r3, 2) ^ J6(r3, 13) ^ J6(r3, 22)) + Ls4(r3, o6, s4) | 0;
      l8 = a3, a3 = u4, u4 = c8, c8 = i5 + g5 | 0, i5 = s4, s4 = o6, o6 = r3, r3 = g5 + h6 | 0;
    }
    r3 = r3 + this.A | 0, o6 = o6 + this.B | 0, s4 = s4 + this.C | 0, i5 = i5 + this.D | 0, c8 = c8 + this.E | 0, u4 = u4 + this.F | 0, a3 = a3 + this.G | 0, l8 = l8 + this.H | 0, this.set(r3, o6, s4, i5, c8, u4, a3, l8);
  }
  roundClean() {
    ce4.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var He5 = fn4(() => new ks4());
var Wn5 = BigInt(0);
function wt5(e3) {
  return e3 instanceof Uint8Array || ArrayBuffer.isView(e3) && e3.constructor.name === "Uint8Array";
}
function zn5(e3) {
  if (!wt5(e3)) throw new Error("Uint8Array expected");
}
var Ds4 = Array.from({ length: 256 }, (e3, t2) => t2.toString(16).padStart(2, "0"));
function Ms3(e3) {
  zn5(e3);
  let t2 = "";
  for (let n5 = 0; n5 < e3.length; n5++) t2 += Ds4[e3[n5]];
  return t2;
}
function Vs5(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  return e3 === "" ? Wn5 : BigInt("0x" + e3);
}
var ee4 = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Jn5(e3) {
  if (e3 >= ee4._0 && e3 <= ee4._9) return e3 - ee4._0;
  if (e3 >= ee4.A && e3 <= ee4.F) return e3 - (ee4.A - 10);
  if (e3 >= ee4.a && e3 <= ee4.f) return e3 - (ee4.a - 10);
}
function Yn5(e3) {
  if (typeof e3 != "string") throw new Error("hex string expected, got " + typeof e3);
  const t2 = e3.length, n5 = t2 / 2;
  if (t2 % 2) throw new Error("hex string expected, got unpadded hex of length " + t2);
  const r3 = new Uint8Array(n5);
  for (let o6 = 0, s4 = 0; o6 < n5; o6++, s4 += 2) {
    const i5 = Jn5(e3.charCodeAt(s4)), c8 = Jn5(e3.charCodeAt(s4 + 1));
    if (i5 === void 0 || c8 === void 0) {
      const u4 = e3[s4] + e3[s4 + 1];
      throw new Error('hex string expected, got non-hex character "' + u4 + '" at index ' + s4);
    }
    r3[o6] = i5 * 16 + c8;
  }
  return r3;
}
function Xn5(e3) {
  return zn5(e3), Vs5(Ms3(Uint8Array.from(e3).reverse()));
}
function Hs4(e3, t2) {
  return Yn5(e3.toString(16).padStart(t2 * 2, "0"));
}
function Ks3(e3, t2) {
  return Hs4(e3, t2).reverse();
}
function Zn5(e3, t2, n5) {
  let r3;
  if (typeof t2 == "string") try {
    r3 = Yn5(t2);
  } catch (s4) {
    throw new Error(e3 + " must be hex string or Uint8Array, cause: " + s4);
  }
  else if (wt5(t2)) r3 = Uint8Array.from(t2);
  else throw new Error(e3 + " must be hex string or Uint8Array");
  const o6 = r3.length;
  if (typeof n5 == "number" && o6 !== n5) throw new Error(e3 + " of length " + n5 + " expected, got " + o6);
  return r3;
}
var Et6 = (e3) => typeof e3 == "bigint" && Wn5 <= e3;
function Fs3(e3, t2, n5) {
  return Et6(e3) && Et6(t2) && Et6(n5) && t2 <= e3 && e3 < n5;
}
function Qn5(e3, t2, n5, r3) {
  if (!Fs3(t2, n5, r3)) throw new Error("expected valid " + e3 + ": " + n5 + " <= n < " + r3 + ", got " + t2);
}
var qs4 = { bigint: (e3) => typeof e3 == "bigint", function: (e3) => typeof e3 == "function", boolean: (e3) => typeof e3 == "boolean", string: (e3) => typeof e3 == "string", stringOrUint8Array: (e3) => typeof e3 == "string" || wt5(e3), isSafeInteger: (e3) => Number.isSafeInteger(e3), array: (e3) => Array.isArray(e3), field: (e3, t2) => t2.Fp.isValid(e3), hash: (e3) => typeof e3 == "function" && Number.isSafeInteger(e3.outputLen) };
function Gs3(e3, t2, n5 = {}) {
  const r3 = (o6, s4, i5) => {
    const c8 = qs4[s4];
    if (typeof c8 != "function") throw new Error("invalid validator function");
    const u4 = e3[o6];
    if (!(i5 && u4 === void 0) && !c8(u4, e3)) throw new Error("param " + String(o6) + " is invalid. Expected " + s4 + ", got " + u4);
  };
  for (const [o6, s4] of Object.entries(t2)) r3(o6, s4, false);
  for (const [o6, s4] of Object.entries(n5)) r3(o6, s4, true);
  return e3;
}
var ve4 = BigInt(0);
var Ke6 = BigInt(1);
function er5(e3, t2) {
  const n5 = e3 % t2;
  return n5 >= ve4 ? n5 : t2 + n5;
}
function Ws3(e3, t2, n5) {
  if (t2 < ve4) throw new Error("invalid exponent, negatives unsupported");
  if (n5 <= ve4) throw new Error("invalid modulus");
  if (n5 === Ke6) return ve4;
  let r3 = Ke6;
  for (; t2 > ve4; ) t2 & Ke6 && (r3 = r3 * e3 % n5), e3 = e3 * e3 % n5, t2 >>= Ke6;
  return r3;
}
function z6(e3, t2, n5) {
  let r3 = e3;
  for (; t2-- > ve4; ) r3 *= r3, r3 %= n5;
  return r3;
}
BigInt(0), BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var xe4 = BigInt(0);
var vt4 = BigInt(1);
function zs3(e3) {
  return Gs3(e3, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...e3 });
}
function Js3(e3) {
  const t2 = zs3(e3), { P: n5 } = t2, r3 = (b6) => er5(b6, n5), o6 = t2.montgomeryBits, s4 = Math.ceil(o6 / 8), i5 = t2.nByteLength, c8 = t2.adjustScalarBytes || ((b6) => b6), u4 = t2.powPminus2 || ((b6) => Ws3(b6, n5 - BigInt(2), n5));
  function a3(b6, _4, O7) {
    const k7 = r3(b6 * (_4 - O7));
    return _4 = r3(_4 - k7), O7 = r3(O7 + k7), [_4, O7];
  }
  const l8 = (t2.a - BigInt(2)) / BigInt(4);
  function f10(b6, _4) {
    Qn5("u", b6, xe4, n5), Qn5("scalar", _4, xe4, n5);
    const O7 = _4, k7 = b6;
    let E7 = vt4, B4 = xe4, j4 = b6, v7 = vt4, I4 = xe4, w6;
    for (let A4 = BigInt(o6 - 1); A4 >= xe4; A4--) {
      const T4 = O7 >> A4 & vt4;
      I4 ^= T4, w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1], I4 = T4;
      const N12 = E7 + B4, S5 = r3(N12 * N12), U3 = E7 - B4, $4 = r3(U3 * U3), p6 = S5 - $4, C6 = j4 + v7, D3 = j4 - v7, P7 = r3(D3 * N12), G4 = r3(C6 * U3), X = P7 + G4, Z2 = P7 - G4;
      j4 = r3(X * X), v7 = r3(k7 * r3(Z2 * Z2)), E7 = r3(S5 * $4), B4 = r3(p6 * (S5 + r3(l8 * p6)));
    }
    w6 = a3(I4, E7, j4), E7 = w6[0], j4 = w6[1], w6 = a3(I4, B4, v7), B4 = w6[0], v7 = w6[1];
    const R3 = u4(B4);
    return r3(E7 * R3);
  }
  function d6(b6) {
    return Ks3(r3(b6), s4);
  }
  function g5(b6) {
    const _4 = Zn5("u coordinate", b6, s4);
    return i5 === 32 && (_4[31] &= 127), Xn5(_4);
  }
  function y7(b6) {
    const _4 = Zn5("scalar", b6), O7 = _4.length;
    if (O7 !== s4 && O7 !== i5) {
      let k7 = "" + s4 + " or " + i5;
      throw new Error("invalid scalar, expected " + k7 + " bytes, got " + O7);
    }
    return Xn5(c8(_4));
  }
  function h6(b6, _4) {
    const O7 = g5(_4), k7 = y7(b6), E7 = f10(O7, k7);
    if (E7 === xe4) throw new Error("invalid private or public key received");
    return d6(E7);
  }
  const m4 = d6(t2.Gu);
  function L5(b6) {
    return h6(b6, m4);
  }
  return { scalarMult: h6, scalarMultBase: L5, getSharedSecret: (b6, _4) => h6(b6, _4), getPublicKey: (b6) => L5(b6), utils: { randomPrivateKey: () => t2.randomBytes(t2.nByteLength) }, GuBytes: m4 };
}
var xt5 = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var Ys3 = BigInt(1);
var tr5 = BigInt(2);
var Xs4 = BigInt(3);
var Zs3 = BigInt(5);
BigInt(8);
function Qs4(e3) {
  const t2 = BigInt(10), n5 = BigInt(20), r3 = BigInt(40), o6 = BigInt(80), s4 = xt5, c8 = e3 * e3 % s4 * e3 % s4, u4 = z6(c8, tr5, s4) * c8 % s4, a3 = z6(u4, Ys3, s4) * e3 % s4, l8 = z6(a3, Zs3, s4) * a3 % s4, f10 = z6(l8, t2, s4) * l8 % s4, d6 = z6(f10, n5, s4) * f10 % s4, g5 = z6(d6, r3, s4) * d6 % s4, y7 = z6(g5, o6, s4) * g5 % s4, h6 = z6(y7, o6, s4) * g5 % s4, m4 = z6(h6, t2, s4) * l8 % s4;
  return { pow_p_5_8: z6(m4, tr5, s4) * e3 % s4, b2: c8 };
}
function ei4(e3) {
  return e3[0] &= 248, e3[31] &= 127, e3[31] |= 64, e3;
}
var It5 = Js3({ P: xt5, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (e3) => {
  const t2 = xt5, { pow_p_5_8: n5, b2: r3 } = Qs4(e3);
  return er5(z6(n5, Xs4, t2) * r3, t2);
}, adjustScalarBytes: ei4, randomBytes: Se5 });
function Tt3(e3) {
  return e3.includes(":");
}
function pr3(e3) {
  return Tt3(e3) ? e3.split(":")[0] : e3;
}
var yr5 = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
function de5(e3, t2) {
  const { message: n5, code: r3 } = yr5[e3];
  return { message: t2 ? `${n5} ${t2}` : n5, code: r3 };
}
function $e4(e3, t2) {
  return Array.isArray(e3) ? typeof t2 < "u" && e3.length ? e3.every(t2) : true : false;
}
function qe4(e3) {
  return Object.getPrototypeOf(e3) === Object.prototype && Object.keys(e3).length;
}

// ../node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js
var import_events9 = __toESM(require_events());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var P5 = Object.defineProperty;
var w4 = Object.defineProperties;
var E5 = Object.getOwnPropertyDescriptors;
var c7 = Object.getOwnPropertySymbols;
var L3 = Object.prototype.hasOwnProperty;
var O5 = Object.prototype.propertyIsEnumerable;
var l7 = (r3, t2, e3) => t2 in r3 ? P5(r3, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : r3[t2] = e3;
var p4 = (r3, t2) => {
  for (var e3 in t2 || (t2 = {})) L3.call(t2, e3) && l7(r3, e3, t2[e3]);
  if (c7) for (var e3 of c7(t2)) O5.call(t2, e3) && l7(r3, e3, t2[e3]);
  return r3;
};
var v6 = (r3, t2) => w4(r3, E5(t2));
var j3 = { Accept: "application/json", "Content-Type": "application/json" };
var T3 = "POST";
var d4 = { headers: j3, method: T3 };
var g3 = 10;
var f9 = class {
  constructor(t2, e3 = false) {
    if (this.url = t2, this.disableProviderPing = e3, this.events = new import_events9.EventEmitter(), this.isAvailable = false, this.registering = false, !isHttpUrl(t2)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    this.url = t2, this.disableProviderPing = e3;
  }
  get connected() {
    return this.isAvailable;
  }
  get connecting() {
    return this.registering;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  async open(t2 = this.url) {
    await this.register(t2);
  }
  async close() {
    if (!this.isAvailable) throw new Error("Connection already closed");
    this.onClose();
  }
  async send(t2) {
    this.isAvailable || await this.register();
    try {
      const e3 = safeJsonStringify(t2), s4 = await (await (0, import_cross_fetch.default)(this.url, v6(p4({}, d4), { body: e3 }))).json();
      this.onPayload({ data: s4 });
    } catch (e3) {
      this.onError(t2.id, e3);
    }
  }
  async register(t2 = this.url) {
    if (!isHttpUrl(t2)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t2}`);
    if (this.registering) {
      const e3 = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= e3 || this.events.listenerCount("open") >= e3) && this.events.setMaxListeners(e3 + 1), new Promise((s4, i5) => {
        this.events.once("register_error", (n5) => {
          this.resetMaxListeners(), i5(n5);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.isAvailable > "u") return i5(new Error("HTTP connection is missing or invalid"));
          s4();
        });
      });
    }
    this.url = t2, this.registering = true;
    try {
      if (!this.disableProviderPing) {
        const e3 = safeJsonStringify({ id: 1, jsonrpc: "2.0", method: "test", params: [] });
        await (0, import_cross_fetch.default)(t2, v6(p4({}, d4), { body: e3 }));
      }
      this.onOpen();
    } catch (e3) {
      const s4 = this.parseError(e3);
      throw this.events.emit("register_error", s4), this.onClose(), s4;
    }
  }
  onOpen() {
    this.isAvailable = true, this.registering = false, this.events.emit("open");
  }
  onClose() {
    this.isAvailable = false, this.registering = false, this.events.emit("close");
  }
  onPayload(t2) {
    if (typeof t2.data > "u") return;
    const e3 = typeof t2.data == "string" ? safeJsonParse(t2.data) : t2.data;
    this.events.emit("payload", e3);
  }
  onError(t2, e3) {
    const s4 = this.parseError(e3), i5 = s4.message || s4.toString(), n5 = formatJsonRpcError(t2, i5);
    this.events.emit("payload", n5);
  }
  parseError(t2, e3 = this.url) {
    return parseConnectionError(t2, e3, "HTTP");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > g3 && this.events.setMaxListeners(g3);
  }
};

// ../node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events10 = __toESM(require_events());
var tt3 = "error";
var Nt4 = "wss://relay.walletconnect.org";
var St5 = "wc";
var Dt2 = "universal_provider";
var _3 = `${St5}@2:${Dt2}:`;
var et3 = "https://rpc.walletconnect.org/v1/";
var w5 = "generic";
var qt3 = `${et3}bundler`;
var d5 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function jt6() {
}
function B3(s4) {
  return s4 == null || typeof s4 != "object" && typeof s4 != "function";
}
function G3(s4) {
  return ArrayBuffer.isView(s4) && !(s4 instanceof DataView);
}
function Rt4(s4) {
  if (B3(s4)) return s4;
  if (Array.isArray(s4) || G3(s4) || s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer) return s4.slice(0);
  const t2 = Object.getPrototypeOf(s4), e3 = t2.constructor;
  if (s4 instanceof Date || s4 instanceof Map || s4 instanceof Set) return new e3(s4);
  if (s4 instanceof RegExp) {
    const i5 = new e3(s4);
    return i5.lastIndex = s4.lastIndex, i5;
  }
  if (s4 instanceof DataView) return new e3(s4.buffer.slice(0));
  if (s4 instanceof Error) {
    const i5 = new e3(s4.message);
    return i5.stack = s4.stack, i5.name = s4.name, i5.cause = s4.cause, i5;
  }
  if (typeof File < "u" && s4 instanceof File) return new e3([s4], s4.name, { type: s4.type, lastModified: s4.lastModified });
  if (typeof s4 == "object") {
    const i5 = Object.create(t2);
    return Object.assign(i5, s4);
  }
  return s4;
}
function st4(s4) {
  return typeof s4 == "object" && s4 !== null;
}
function it6(s4) {
  return Object.getOwnPropertySymbols(s4).filter((t2) => Object.prototype.propertyIsEnumerable.call(s4, t2));
}
function rt3(s4) {
  return s4 == null ? s4 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s4);
}
var _t4 = "[object RegExp]";
var nt2 = "[object String]";
var at2 = "[object Number]";
var ct3 = "[object Boolean]";
var ot4 = "[object Arguments]";
var Ut4 = "[object Symbol]";
var Ft5 = "[object Date]";
var Lt6 = "[object Map]";
var xt6 = "[object Set]";
var Mt3 = "[object Array]";
var Bt4 = "[object ArrayBuffer]";
var Gt4 = "[object Object]";
var Jt4 = "[object DataView]";
var zt4 = "[object Uint8Array]";
var kt7 = "[object Uint8ClampedArray]";
var Wt4 = "[object Uint16Array]";
var Kt3 = "[object Uint32Array]";
var Vt3 = "[object Int8Array]";
var Xt3 = "[object Int16Array]";
var Yt4 = "[object Int32Array]";
var Qt3 = "[object Float32Array]";
var Zt3 = "[object Float64Array]";
function Tt4(s4, t2) {
  return y6(s4, void 0, s4, /* @__PURE__ */ new Map(), t2);
}
function y6(s4, t2, e3, i5 = /* @__PURE__ */ new Map(), r3 = void 0) {
  const a3 = r3 == null ? void 0 : r3(s4, t2, e3, i5);
  if (a3 != null) return a3;
  if (B3(s4)) return s4;
  if (i5.has(s4)) return i5.get(s4);
  if (Array.isArray(s4)) {
    const n5 = new Array(s4.length);
    i5.set(s4, n5);
    for (let c8 = 0; c8 < s4.length; c8++) n5[c8] = y6(s4[c8], c8, e3, i5, r3);
    return Object.hasOwn(s4, "index") && (n5.index = s4.index), Object.hasOwn(s4, "input") && (n5.input = s4.input), n5;
  }
  if (s4 instanceof Date) return new Date(s4.getTime());
  if (s4 instanceof RegExp) {
    const n5 = new RegExp(s4.source, s4.flags);
    return n5.lastIndex = s4.lastIndex, n5;
  }
  if (s4 instanceof Map) {
    const n5 = /* @__PURE__ */ new Map();
    i5.set(s4, n5);
    for (const [c8, h6] of s4) n5.set(c8, y6(h6, c8, e3, i5, r3));
    return n5;
  }
  if (s4 instanceof Set) {
    const n5 = /* @__PURE__ */ new Set();
    i5.set(s4, n5);
    for (const c8 of s4) n5.add(y6(c8, void 0, e3, i5, r3));
    return n5;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s4)) return s4.subarray();
  if (G3(s4)) {
    const n5 = new (Object.getPrototypeOf(s4)).constructor(s4.length);
    i5.set(s4, n5);
    for (let c8 = 0; c8 < s4.length; c8++) n5[c8] = y6(s4[c8], c8, e3, i5, r3);
    return n5;
  }
  if (s4 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s4 instanceof SharedArrayBuffer) return s4.slice(0);
  if (s4 instanceof DataView) {
    const n5 = new DataView(s4.buffer.slice(0), s4.byteOffset, s4.byteLength);
    return i5.set(s4, n5), g4(n5, s4, e3, i5, r3), n5;
  }
  if (typeof File < "u" && s4 instanceof File) {
    const n5 = new File([s4], s4.name, { type: s4.type });
    return i5.set(s4, n5), g4(n5, s4, e3, i5, r3), n5;
  }
  if (s4 instanceof Blob) {
    const n5 = new Blob([s4], { type: s4.type });
    return i5.set(s4, n5), g4(n5, s4, e3, i5, r3), n5;
  }
  if (s4 instanceof Error) {
    const n5 = new s4.constructor();
    return i5.set(s4, n5), n5.message = s4.message, n5.name = s4.name, n5.stack = s4.stack, n5.cause = s4.cause, g4(n5, s4, e3, i5, r3), n5;
  }
  if (typeof s4 == "object" && te5(s4)) {
    const n5 = Object.create(Object.getPrototypeOf(s4));
    return i5.set(s4, n5), g4(n5, s4, e3, i5, r3), n5;
  }
  return s4;
}
function g4(s4, t2, e3 = s4, i5, r3) {
  const a3 = [...Object.keys(t2), ...it6(t2)];
  for (let n5 = 0; n5 < a3.length; n5++) {
    const c8 = a3[n5], h6 = Object.getOwnPropertyDescriptor(s4, c8);
    (h6 == null || h6.writable) && (s4[c8] = y6(t2[c8], c8, e3, i5, r3));
  }
}
function te5(s4) {
  switch (rt3(s4)) {
    case ot4:
    case Mt3:
    case Bt4:
    case Jt4:
    case ct3:
    case Ft5:
    case Qt3:
    case Zt3:
    case Vt3:
    case Xt3:
    case Yt4:
    case Lt6:
    case at2:
    case Gt4:
    case _t4:
    case xt6:
    case nt2:
    case Ut4:
    case zt4:
    case kt7:
    case Wt4:
    case Kt3:
      return true;
    default:
      return false;
  }
}
function ee5(s4, t2) {
  return Tt4(s4, (e3, i5, r3, a3) => {
    const n5 = t2 == null ? void 0 : t2(e3, i5, r3, a3);
    if (n5 != null) return n5;
    if (typeof s4 == "object") switch (Object.prototype.toString.call(s4)) {
      case at2:
      case nt2:
      case ct3: {
        const c8 = new s4.constructor(s4 == null ? void 0 : s4.valueOf());
        return g4(c8, s4), c8;
      }
      case ot4: {
        const c8 = {};
        return g4(c8, s4), c8.length = s4.length, c8[Symbol.iterator] = s4[Symbol.iterator], c8;
      }
      default:
        return;
    }
  });
}
function ht6(s4) {
  return ee5(s4);
}
function pt5(s4) {
  return s4 !== null && typeof s4 == "object" && rt3(s4) === "[object Arguments]";
}
function se5(s4) {
  return G3(s4);
}
function ie5(s4) {
  var _a;
  if (typeof s4 != "object" || s4 == null) return false;
  if (Object.getPrototypeOf(s4) === null) return true;
  if (Object.prototype.toString.call(s4) !== "[object Object]") {
    const e3 = s4[Symbol.toStringTag];
    return e3 == null || !((_a = Object.getOwnPropertyDescriptor(s4, Symbol.toStringTag)) == null ? void 0 : _a.writable) ? false : s4.toString() === `[object ${e3}]`;
  }
  let t2 = s4;
  for (; Object.getPrototypeOf(t2) !== null; ) t2 = Object.getPrototypeOf(t2);
  return Object.getPrototypeOf(s4) === t2;
}
function re3(s4, ...t2) {
  const e3 = t2.slice(0, -1), i5 = t2[t2.length - 1];
  let r3 = s4;
  for (let a3 = 0; a3 < e3.length; a3++) {
    const n5 = e3[a3];
    r3 = U2(r3, n5, i5, /* @__PURE__ */ new Map());
  }
  return r3;
}
function U2(s4, t2, e3, i5) {
  if (B3(s4) && (s4 = Object(s4)), t2 == null || typeof t2 != "object") return s4;
  if (i5.has(t2)) return Rt4(i5.get(t2));
  if (i5.set(t2, s4), Array.isArray(t2)) {
    t2 = t2.slice();
    for (let a3 = 0; a3 < t2.length; a3++) t2[a3] = t2[a3] ?? void 0;
  }
  const r3 = [...Object.keys(t2), ...it6(t2)];
  for (let a3 = 0; a3 < r3.length; a3++) {
    const n5 = r3[a3];
    let c8 = t2[n5], h6 = s4[n5];
    if (pt5(c8) && (c8 = { ...c8 }), pt5(h6) && (h6 = { ...h6 }), typeof Buffer < "u" && Buffer.isBuffer(c8) && (c8 = ht6(c8)), Array.isArray(c8)) if (typeof h6 == "object" && h6 != null) {
      const j4 = [], R3 = Reflect.ownKeys(h6);
      for (let f10 = 0; f10 < R3.length; f10++) {
        const X = R3[f10];
        j4[X] = h6[X];
      }
      h6 = j4;
    } else h6 = [];
    const v7 = e3(h6, c8, n5, s4, t2, i5);
    v7 != null ? s4[n5] = v7 : Array.isArray(c8) || st4(h6) && st4(c8) ? s4[n5] = U2(h6, c8, e3, i5) : h6 == null && ie5(c8) ? s4[n5] = U2({}, c8, e3, i5) : h6 == null && se5(c8) ? s4[n5] = ht6(c8) : (h6 === void 0 || c8 !== void 0) && (s4[n5] = c8);
  }
  return s4;
}
function ne3(s4, ...t2) {
  return re3(s4, ...t2, jt6);
}
var ae4 = Object.defineProperty;
var ce5 = Object.defineProperties;
var oe2 = Object.getOwnPropertyDescriptors;
var dt4 = Object.getOwnPropertySymbols;
var he3 = Object.prototype.hasOwnProperty;
var pe3 = Object.prototype.propertyIsEnumerable;
var ut4 = (s4, t2, e3) => t2 in s4 ? ae4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var F5 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) he3.call(t2, e3) && ut4(s4, e3, t2[e3]);
  if (dt4) for (var e3 of dt4(t2)) pe3.call(t2, e3) && ut4(s4, e3, t2[e3]);
  return s4;
};
var de6 = (s4, t2) => ce5(s4, oe2(t2));
function p5(s4, t2, e3) {
  var i5;
  const r3 = Ye4(s4);
  return ((i5 = t2.rpcMap) == null ? void 0 : i5[r3.reference]) || `${et3}?chainId=${r3.namespace}:${r3.reference}&projectId=${e3}`;
}
function P6(s4) {
  return s4.includes(":") ? s4.split(":")[1] : s4;
}
function lt3(s4) {
  return s4.map((t2) => `${t2.split(":")[0]}:${t2.split(":")[1]}`);
}
function ue4(s4, t2) {
  const e3 = Object.keys(t2.namespaces).filter((r3) => r3.includes(s4));
  if (!e3.length) return [];
  const i5 = [];
  return e3.forEach((r3) => {
    const a3 = t2.namespaces[r3].accounts;
    i5.push(...a3);
  }), i5;
}
function J7(s4 = {}, t2 = {}) {
  const e3 = ft4(s4), i5 = ft4(t2);
  return ne3(e3, i5);
}
function ft4(s4) {
  var t2, e3, i5, r3;
  const a3 = {};
  if (!qe4(s4)) return a3;
  for (const [n5, c8] of Object.entries(s4)) {
    const h6 = Tt3(n5) ? [n5] : c8.chains, v7 = c8.methods || [], j4 = c8.events || [], R3 = c8.rpcMap || {}, f10 = pr3(n5);
    a3[f10] = de6(F5(F5({}, a3[f10]), c8), { chains: Q4(h6, (t2 = a3[f10]) == null ? void 0 : t2.chains), methods: Q4(v7, (e3 = a3[f10]) == null ? void 0 : e3.methods), events: Q4(j4, (i5 = a3[f10]) == null ? void 0 : i5.events), rpcMap: F5(F5({}, R3), (r3 = a3[f10]) == null ? void 0 : r3.rpcMap) });
  }
  return a3;
}
function le4(s4) {
  return s4.includes(":") ? s4.split(":")[2] : s4;
}
function mt5(s4) {
  const t2 = {};
  for (const [e3, i5] of Object.entries(s4)) {
    const r3 = i5.methods || [], a3 = i5.events || [], n5 = i5.accounts || [], c8 = Tt3(e3) ? [e3] : i5.chains ? i5.chains : lt3(i5.accounts);
    t2[e3] = { chains: c8, methods: r3, events: a3, accounts: n5 };
  }
  return t2;
}
function z7(s4) {
  return typeof s4 == "number" ? s4 : s4.includes("0x") ? parseInt(s4, 16) : (s4 = s4.includes(":") ? s4.split(":")[1] : s4, isNaN(Number(s4)) ? s4 : Number(s4));
}
var vt5 = {};
var o5 = (s4) => vt5[s4];
var k6 = (s4, t2) => {
  vt5[s4] = t2;
};
var fe4 = Object.defineProperty;
var me6 = (s4, t2, e3) => t2 in s4 ? fe4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var b5 = (s4, t2, e3) => me6(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var ve5 = class {
  constructor(t2) {
    b5(this, "name", "polkadot"), b5(this, "client"), b5(this, "httpProviders"), b5(this, "events"), b5(this, "namespace"), b5(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var ge3 = Object.defineProperty;
var Pe5 = Object.defineProperties;
var we6 = Object.getOwnPropertyDescriptors;
var gt6 = Object.getOwnPropertySymbols;
var ye3 = Object.prototype.hasOwnProperty;
var be6 = Object.prototype.propertyIsEnumerable;
var W3 = (s4, t2, e3) => t2 in s4 ? ge3(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var Pt4 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) ye3.call(t2, e3) && W3(s4, e3, t2[e3]);
  if (gt6) for (var e3 of gt6(t2)) be6.call(t2, e3) && W3(s4, e3, t2[e3]);
  return s4;
};
var wt6 = (s4, t2) => Pe5(s4, we6(t2));
var I3 = (s4, t2, e3) => W3(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ie5 = class {
  constructor(t2) {
    I3(this, "name", "eip155"), I3(this, "client"), I3(this, "chainId"), I3(this, "namespace"), I3(this, "httpProviders"), I3(this, "events"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t2) {
    switch (t2.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t2);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t2);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t2);
    }
    return this.namespace.methods.includes(t2.request.method) ? await this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(parseInt(t2), e3), this.chainId = parseInt(t2), this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = parseInt(P6(e3));
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t2 = this.chainId, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  async handleSwitchChain(t2) {
    var e3, i5;
    let r3 = t2.request.params ? (e3 = t2.request.params[0]) == null ? void 0 : e3.chainId : "0x0";
    r3 = r3.startsWith("0x") ? r3 : `0x${r3}`;
    const a3 = parseInt(r3, 16);
    if (this.isChainApproved(a3)) this.setDefaultChain(`${a3}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t2.topic, request: { method: t2.request.method, params: [{ chainId: r3 }] }, chainId: (i5 = this.namespace.chains) == null ? void 0 : i5[0] }), this.setDefaultChain(`${a3}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a3}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t2) {
    return this.namespace.chains.includes(`${this.name}:${t2}`);
  }
  async getCapabilities(t2) {
    var e3, i5, r3;
    const a3 = (i5 = (e3 = t2.request) == null ? void 0 : e3.params) == null ? void 0 : i5[0];
    if (!a3) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const n5 = this.client.session.get(t2.topic), c8 = ((r3 = n5 == null ? void 0 : n5.sessionProperties) == null ? void 0 : r3.capabilities) || {};
    if (c8 != null && c8[a3]) return c8 == null ? void 0 : c8[a3];
    const h6 = await this.client.request(t2);
    try {
      await this.client.session.update(t2.topic, { sessionProperties: wt6(Pt4({}, n5.sessionProperties || {}), { capabilities: wt6(Pt4({}, c8 || {}), { [a3]: h6 }) }) });
    } catch (v7) {
      console.warn("Failed to update session with capabilities", v7);
    }
    return h6;
  }
  async getCallStatus(t2) {
    var e3, i5;
    const r3 = this.client.session.get(t2.topic), a3 = (e3 = r3.sessionProperties) == null ? void 0 : e3.bundler_name;
    if (a3) {
      const c8 = this.getBundlerUrl(t2.chainId, a3);
      try {
        return await this.getUserOperationReceipt(c8, t2);
      } catch (h6) {
        console.warn("Failed to fetch call status from bundler", h6, c8);
      }
    }
    const n5 = (i5 = r3.sessionProperties) == null ? void 0 : i5.bundler_url;
    if (n5) try {
      return await this.getUserOperationReceipt(n5, t2);
    } catch (c8) {
      console.warn("Failed to fetch call status from custom bundler", c8, n5);
    }
    if (this.namespace.methods.includes(t2.request.method)) return await this.client.request(t2);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t2, e3) {
    var i5;
    const r3 = new URL(t2), a3 = await fetch(r3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i5 = e3.request.params) == null ? void 0 : i5[0]])) });
    if (!a3.ok) throw new Error(`Failed to fetch user operation receipt - ${a3.status}`);
    return await a3.json();
  }
  getBundlerUrl(t2, e3) {
    return `${qt3}?projectId=${this.client.core.projectId}&chainId=${t2}&bundler=${e3}`;
  }
};
var $e5 = Object.defineProperty;
var Oe5 = (s4, t2, e3) => t2 in s4 ? $e5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var $3 = (s4, t2, e3) => Oe5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ae4 = class {
  constructor(t2) {
    $3(this, "name", "solana"), $3(this, "client"), $3(this, "httpProviders"), $3(this, "events"), $3(this, "namespace"), $3(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var He6 = Object.defineProperty;
var Ee7 = (s4, t2, e3) => t2 in s4 ? He6(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var O6 = (s4, t2, e3) => Ee7(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Ce6 = class {
  constructor(t2) {
    O6(this, "name", "cosmos"), O6(this, "client"), O6(this, "httpProviders"), O6(this, "events"), O6(this, "namespace"), O6(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var Ne5 = Object.defineProperty;
var Se6 = (s4, t2, e3) => t2 in s4 ? Ne5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var A3 = (s4, t2, e3) => Se6(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var De4 = class {
  constructor(t2) {
    A3(this, "name", "algorand"), A3(this, "client"), A3(this, "httpProviders"), A3(this, "events"), A3(this, "namespace"), A3(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (!this.httpProviders[t2]) {
      const i5 = e3 || p5(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
      if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i5);
    }
    this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      t2[e3] = this.createHttpProvider(e3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    return typeof i5 > "u" ? void 0 : new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var qe5 = Object.defineProperty;
var je6 = (s4, t2, e3) => t2 in s4 ? qe5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var H4 = (s4, t2, e3) => je6(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Re3 = class {
  constructor(t2) {
    H4(this, "name", "cip34"), H4(this, "client"), H4(this, "httpProviders"), H4(this, "events"), H4(this, "namespace"), H4(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      const i5 = this.getCardanoRPCUrl(e3), r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, i5);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  getCardanoRPCUrl(t2) {
    const e3 = this.namespace.rpcMap;
    if (e3) return e3[t2];
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || this.getCardanoRPCUrl(t2);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var _e6 = Object.defineProperty;
var Ue7 = (s4, t2, e3) => t2 in s4 ? _e6(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var E6 = (s4, t2, e3) => Ue7(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Fe3 = class {
  constructor(t2) {
    E6(this, "name", "elrond"), E6(this, "client"), E6(this, "httpProviders"), E6(this, "events"), E6(this, "namespace"), E6(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var Le4 = Object.defineProperty;
var xe5 = (s4, t2, e3) => t2 in s4 ? Le4(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var C5 = (s4, t2, e3) => xe5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Me5 = class {
  constructor(t2) {
    C5(this, "name", "multiversx"), C5(this, "client"), C5(this, "httpProviders"), C5(this, "events"), C5(this, "namespace"), C5(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      const r3 = P6(e3);
      t2[r3] = this.createHttpProvider(r3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var Be5 = Object.defineProperty;
var Ge5 = (s4, t2, e3) => t2 in s4 ? Be5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var N11 = (s4, t2, e3) => Ge5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Je3 = class {
  constructor(t2) {
    N11(this, "name", "near"), N11(this, "client"), N11(this, "httpProviders"), N11(this, "events"), N11(this, "namespace"), N11(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i5 = e3 || p5(`${this.name}:${t2}`, this.namespace);
      if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i5);
    }
    this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      var i5;
      t2[e3] = this.createHttpProvider(e3, (i5 = this.namespace.rpcMap) == null ? void 0 : i5[e3]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace);
    return typeof i5 > "u" ? void 0 : new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var ze6 = Object.defineProperty;
var ke5 = (s4, t2, e3) => t2 in s4 ? ze6(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var S4 = (s4, t2, e3) => ke5(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var We7 = class {
  constructor(t2) {
    S4(this, "name", "tezos"), S4(this, "client"), S4(this, "httpProviders"), S4(this, "events"), S4(this, "namespace"), S4(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e3) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i5 = e3 || p5(`${this.name}:${t2}`, this.namespace);
      if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i5);
    }
    this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e3) => {
      t2[e3] = this.createHttpProvider(e3);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace);
    return typeof i5 > "u" ? void 0 : new o3(new f9(i5));
  }
};
var Ke7 = Object.defineProperty;
var Ve6 = (s4, t2, e3) => t2 in s4 ? Ke7(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var D2 = (s4, t2, e3) => Ve6(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var Xe3 = class {
  constructor(t2) {
    D2(this, "name", w5), D2(this, "client"), D2(this, "httpProviders"), D2(this, "events"), D2(this, "namespace"), D2(this, "chainId"), this.namespace = t2.namespace, this.events = o5("events"), this.client = o5("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t2.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t2.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t2.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t2.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider(t2.chainId).request(t2.request);
  }
  setDefaultChain(t2, e3) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e3), this.chainId = t2, this.events.emit(d5.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e3) => e3.split(":")[1] === this.chainId.toString()).map((e3) => e3.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t2, e3;
    const i5 = {};
    return (e3 = (t2 = this.namespace) == null ? void 0 : t2.accounts) == null || e3.forEach((r3) => {
      const a3 = Ye4(r3);
      i5[`${a3.namespace}:${a3.reference}`] = this.createHttpProvider(r3);
    }), i5;
  }
  getHttpProvider(t2) {
    const e3 = this.httpProviders[t2];
    if (typeof e3 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e3;
  }
  setHttpProvider(t2, e3) {
    const i5 = this.createHttpProvider(t2, e3);
    i5 && (this.httpProviders[t2] = i5);
  }
  createHttpProvider(t2, e3) {
    const i5 = e3 || p5(t2, this.namespace, this.client.core.projectId);
    if (!i5) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o3(new f9(i5, o5("disableProviderPing")));
  }
};
var Ye5 = Object.defineProperty;
var Qe3 = Object.defineProperties;
var Ze4 = Object.getOwnPropertyDescriptors;
var yt6 = Object.getOwnPropertySymbols;
var Te4 = Object.prototype.hasOwnProperty;
var ts = Object.prototype.propertyIsEnumerable;
var K7 = (s4, t2, e3) => t2 in s4 ? Ye5(s4, t2, { enumerable: true, configurable: true, writable: true, value: e3 }) : s4[t2] = e3;
var L4 = (s4, t2) => {
  for (var e3 in t2 || (t2 = {})) Te4.call(t2, e3) && K7(s4, e3, t2[e3]);
  if (yt6) for (var e3 of yt6(t2)) ts.call(t2, e3) && K7(s4, e3, t2[e3]);
  return s4;
};
var V5 = (s4, t2) => Qe3(s4, Ze4(t2));
var u3 = (s4, t2, e3) => K7(s4, typeof t2 != "symbol" ? t2 + "" : t2, e3);
var x7 = class _x {
  constructor(t2) {
    u3(this, "client"), u3(this, "namespaces"), u3(this, "optionalNamespaces"), u3(this, "sessionProperties"), u3(this, "scopedProperties"), u3(this, "events", new import_events10.default()), u3(this, "rpcProviders", {}), u3(this, "session"), u3(this, "providerOpts"), u3(this, "logger"), u3(this, "uri"), u3(this, "disableProviderPing", false), this.providerOpts = t2, this.logger = typeof (t2 == null ? void 0 : t2.logger) < "u" && typeof (t2 == null ? void 0 : t2.logger) != "string" ? t2.logger : (0, import_pino2.default)(k2({ level: (t2 == null ? void 0 : t2.logger) || tt3 })), this.disableProviderPing = (t2 == null ? void 0 : t2.disableProviderPing) || false;
  }
  static async init(t2) {
    const e3 = new _x(t2);
    return await e3.initialize(), e3;
  }
  async request(t2, e3, i5) {
    const [r3, a3] = this.validateChain(e3);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(r3).request({ request: L4({}, t2), chainId: `${r3}:${a3}`, topic: this.session.topic, expiry: i5 });
  }
  sendAsync(t2, e3, i5, r3) {
    const a3 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t2, i5, r3).then((n5) => e3(null, formatJsonRpcResult(a3, n5))).catch((n5) => e3(n5, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t2;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t2 = this.session) == null ? void 0 : t2.topic, reason: de5("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t2), await this.cleanupPendingPairings(), !t2.skipPairing) return await this.pair(t2.pairingTopic);
  }
  async authenticate(t2, e3) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t2), await this.cleanupPendingPairings();
    const { uri: i5, response: r3 } = await this.client.authenticate(t2, e3);
    i5 && (this.uri = i5, this.events.emit("display_uri", i5));
    const a3 = await r3();
    if (this.session = a3.session, this.session) {
      const n5 = mt5(this.session.namespaces);
      this.namespaces = J7(this.namespaces, n5), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a3;
  }
  on(t2, e3) {
    this.events.on(t2, e3);
  }
  once(t2, e3) {
    this.events.once(t2, e3);
  }
  removeListener(t2, e3) {
    this.events.removeListener(t2, e3);
  }
  off(t2, e3) {
    this.events.off(t2, e3);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t2) {
    const { uri: e3, approval: i5 } = await this.client.connect({ pairingTopic: t2, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e3 && (this.uri = e3, this.events.emit("display_uri", e3));
    const r3 = await i5();
    this.session = r3;
    const a3 = mt5(r3.namespaces);
    return this.namespaces = J7(this.namespaces, a3), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t2, e3) {
    try {
      if (!this.session) return;
      const [i5, r3] = this.validateChain(t2), a3 = this.getProvider(i5);
      a3.name === w5 ? a3.setDefaultChain(`${i5}:${r3}`, e3) : a3.setDefaultChain(r3, e3);
    } catch (i5) {
      if (!/Please call connect/.test(i5.message)) throw i5;
    }
  }
  async cleanupPendingPairings(t2 = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e3 = this.client.pairing.getAll();
    if ($e4(e3)) {
      for (const i5 of e3) t2.deletePairings ? this.client.core.expirer.set(i5.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i5.topic);
      this.logger.info(`Inactive pairings cleared: ${e3.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t2, e3;
    if (this.client = this.providerOpts.client || await Ee5.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || tt3, relayUrl: this.providerOpts.relayUrl || Nt4, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i5) {
      throw this.logger.error("Failed to get session", i5), new Error(`The provided session: ${(e3 = (t2 = this.providerOpts) == null ? void 0 : t2.session) == null ? void 0 : e3.topic} doesn't exist in the Sign client`);
    }
    else {
      const i5 = this.client.session.getAll();
      this.session = i5[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t2 = [...new Set(Object.keys(this.session.namespaces).map((e3) => pr3(e3)))];
    k6("client", this.client), k6("events", this.events), k6("disableProviderPing", this.disableProviderPing), t2.forEach((e3) => {
      if (!this.session) return;
      const i5 = ue4(e3, this.session), r3 = lt3(i5), a3 = J7(this.namespaces, this.optionalNamespaces), n5 = V5(L4({}, a3[e3]), { accounts: i5, chains: r3 });
      switch (e3) {
        case "eip155":
          this.rpcProviders[e3] = new Ie5({ namespace: n5 });
          break;
        case "algorand":
          this.rpcProviders[e3] = new De4({ namespace: n5 });
          break;
        case "solana":
          this.rpcProviders[e3] = new Ae4({ namespace: n5 });
          break;
        case "cosmos":
          this.rpcProviders[e3] = new Ce6({ namespace: n5 });
          break;
        case "polkadot":
          this.rpcProviders[e3] = new ve5({ namespace: n5 });
          break;
        case "cip34":
          this.rpcProviders[e3] = new Re3({ namespace: n5 });
          break;
        case "elrond":
          this.rpcProviders[e3] = new Fe3({ namespace: n5 });
          break;
        case "multiversx":
          this.rpcProviders[e3] = new Me5({ namespace: n5 });
          break;
        case "near":
          this.rpcProviders[e3] = new Je3({ namespace: n5 });
          break;
        case "tezos":
          this.rpcProviders[e3] = new We7({ namespace: n5 });
          break;
        default:
          this.rpcProviders[w5] ? this.rpcProviders[w5].updateNamespace(n5) : this.rpcProviders[w5] = new Xe3({ namespace: n5 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t2) => {
      var e3;
      const { topic: i5 } = t2;
      i5 === ((e3 = this.session) == null ? void 0 : e3.topic) && this.events.emit("session_ping", t2);
    }), this.client.on("session_event", (t2) => {
      var e3;
      const { params: i5, topic: r3 } = t2;
      if (r3 !== ((e3 = this.session) == null ? void 0 : e3.topic)) return;
      const { event: a3 } = i5;
      if (a3.name === "accountsChanged") {
        const n5 = a3.data;
        n5 && $e4(n5) && this.events.emit("accountsChanged", n5.map(le4));
      } else if (a3.name === "chainChanged") {
        const n5 = i5.chainId, c8 = i5.event.data, h6 = pr3(n5), v7 = z7(n5) !== z7(c8) ? `${h6}:${z7(c8)}` : n5;
        this.onChainChanged(v7);
      } else this.events.emit(a3.name, a3.data);
      this.events.emit("session_event", t2);
    }), this.client.on("session_update", ({ topic: t2, params: e3 }) => {
      var i5, r3;
      if (t2 !== ((i5 = this.session) == null ? void 0 : i5.topic)) return;
      const { namespaces: a3 } = e3, n5 = (r3 = this.client) == null ? void 0 : r3.session.get(t2);
      this.session = V5(L4({}, n5), { namespaces: a3 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t2, params: e3 });
    }), this.client.on("session_delete", async (t2) => {
      var e3;
      t2.topic === ((e3 = this.session) == null ? void 0 : e3.topic) && (await this.cleanup(), this.events.emit("session_delete", t2), this.events.emit("disconnect", V5(L4({}, de5("USER_DISCONNECTED")), { data: t2.topic })));
    }), this.on(d5.DEFAULT_CHAIN_CHANGED, (t2) => {
      this.onChainChanged(t2, true);
    });
  }
  getProvider(t2) {
    return this.rpcProviders[t2] || this.rpcProviders[w5];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t2) => {
      var e3;
      this.getProvider(t2).updateNamespace((e3 = this.session) == null ? void 0 : e3.namespaces[t2]);
    });
  }
  setNamespaces(t2) {
    const { namespaces: e3, optionalNamespaces: i5, sessionProperties: r3, scopedProperties: a3 } = t2;
    e3 && Object.keys(e3).length && (this.namespaces = e3), i5 && Object.keys(i5).length && (this.optionalNamespaces = i5), this.sessionProperties = r3, this.scopedProperties = a3;
  }
  validateChain(t2) {
    const [e3, i5] = (t2 == null ? void 0 : t2.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e3, i5];
    if (e3 && !Object.keys(this.namespaces || {}).map((n5) => pr3(n5)).includes(e3)) throw new Error(`Namespace '${e3}' is not configured. Please call connect() first with namespace config.`);
    if (e3 && i5) return [e3, i5];
    const r3 = pr3(Object.keys(this.namespaces)[0]), a3 = this.rpcProviders[r3].getDefaultChain();
    return [r3, a3];
  }
  async requestAccounts() {
    const [t2] = this.validateChain();
    return await this.getProvider(t2).requestAccounts();
  }
  async onChainChanged(t2, e3 = false) {
    if (!this.namespaces) return;
    const [i5, r3] = this.validateChain(t2);
    r3 && (e3 || this.getProvider(i5).setDefaultChain(r3), this.namespaces[i5] ? this.namespaces[i5].defaultChain = r3 : this.namespaces[`${i5}:${r3}`] ? this.namespaces[`${i5}:${r3}`].defaultChain = r3 : this.namespaces[`${i5}:${r3}`] = { defaultChain: r3 }, this.events.emit("chainChanged", r3), await this.persist("namespaces", this.namespaces));
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t2, e3) {
    var i5;
    const r3 = ((i5 = this.session) == null ? void 0 : i5.topic) || "";
    await this.client.core.storage.setItem(`${_3}/${t2}${r3}`, e3);
  }
  async getFromStore(t2) {
    var e3;
    const i5 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    return await this.client.core.storage.getItem(`${_3}/${t2}${i5}`);
  }
  async deleteFromStore(t2) {
    var e3;
    const i5 = ((e3 = this.session) == null ? void 0 : e3.topic) || "";
    await this.client.core.storage.removeItem(`${_3}/${t2}${i5}`);
  }
  async cleanupStorage() {
    var t2;
    try {
      if (((t2 = this.client) == null ? void 0 : t2.session.length) > 0) return;
      const e3 = await this.client.core.storage.getKeys();
      for (const i5 of e3) i5.startsWith(_3) && await this.client.core.storage.removeItem(i5);
    } catch (e3) {
      this.logger.warn("Failed to cleanup storage", e3);
    }
  }
};

// ../node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js
var DEFAULT_SDK_URL = "https://secure.walletconnect.org/sdk";
var SECURE_SITE_SDK = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_URL"] : void 0) || DEFAULT_SDK_URL;
var DEFAULT_LOG_LEVEL = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_DEFAULT_LOG_LEVEL"] : void 0) || "error";
var SECURE_SITE_SDK_VERSION = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_VERSION"] : void 0) || "4";
var W3mFrameRpcConstants = {
  SAFE_RPC_METHODS: [
    "eth_accounts",
    "eth_blockNumber",
    "eth_call",
    "eth_chainId",
    "eth_estimateGas",
    "eth_feeHistory",
    "eth_gasPrice",
    "eth_getAccount",
    "eth_getBalance",
    "eth_getBlockByHash",
    "eth_getBlockByNumber",
    "eth_getBlockReceipts",
    "eth_getBlockTransactionCountByHash",
    "eth_getBlockTransactionCountByNumber",
    "eth_getCode",
    "eth_getFilterChanges",
    "eth_getFilterLogs",
    "eth_getLogs",
    "eth_getProof",
    "eth_getStorageAt",
    "eth_getTransactionByBlockHashAndIndex",
    "eth_getTransactionByBlockNumberAndIndex",
    "eth_getTransactionByHash",
    "eth_getTransactionCount",
    "eth_getTransactionReceipt",
    "eth_getUncleCountByBlockHash",
    "eth_getUncleCountByBlockNumber",
    "eth_maxPriorityFeePerGas",
    "eth_newBlockFilter",
    "eth_newFilter",
    "eth_newPendingTransactionFilter",
    "eth_sendRawTransaction",
    "eth_syncing",
    "eth_uninstallFilter",
    "wallet_getCapabilities",
    "wallet_getCallsStatus",
    "eth_getUserOperationReceipt",
    "eth_estimateUserOperationGas",
    "eth_getUserOperationByHash",
    "eth_supportedEntryPoints",
    "wallet_getAssets"
  ],
  NOT_SAFE_RPC_METHODS: [
    "personal_sign",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "solana_signMessage",
    "solana_signTransaction",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction",
    "wallet_sendCalls",
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    "eth_sendUserOperation"
  ],
  GET_CHAIN_ID: "eth_chainId",
  RPC_METHOD_NOT_ALLOWED_MESSAGE: "Requested RPC call is not allowed",
  RPC_METHOD_NOT_ALLOWED_UI_MESSAGE: "Action not allowed",
  ACCOUNT_TYPES: {
    EOA: "eoa",
    SMART_ACCOUNT: "smartAccount"
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state7 = proxy({
  message: "",
  variant: "info",
  open: false
});
var AlertController = {
  state: state7,
  subscribeKey(key, callback) {
    return subscribeKey(state7, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { shortMessage, longMessage } = message;
    if (debug) {
      state7.message = shortMessage;
      state7.variant = variant;
      state7.open = true;
    }
    if (longMessage) {
      console.error(typeof longMessage === "function" ? longMessage() : longMessage);
    }
  },
  close() {
    state7.open = false;
    state7.message = "";
    state7.variant = "info";
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js
var baseUrl2 = CoreHelperUtil.getAnalyticsUrl();
var api = new FetchUtil({ baseUrl: baseUrl2, clientId: null });
var excluded = ["MODAL_CREATED"];
var state8 = proxy({
  timestamp: Date.now(),
  reportedErrors: {},
  data: {
    type: "track",
    event: "MODAL_CREATED"
  }
});
var EventsController = {
  state: state8,
  subscribe(callback) {
    return subscribe(state8, () => callback(state8));
  },
  getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType,
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  async _sendAnalyticsEvent(payload) {
    try {
      const address = AccountController.state.address;
      if (excluded.includes(payload.data.event) || typeof window === "undefined") {
        return;
      }
      await api.post({
        path: "/e",
        params: EventsController.getSdkProperties(),
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: payload.timestamp,
          props: { ...payload.data, address }
        }
      });
      state8.reportedErrors["FORBIDDEN"] = false;
    } catch (err) {
      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state8.reportedErrors["FORBIDDEN"];
      if (isForbiddenError) {
        AlertController.open({
          shortMessage: "Invalid App Configuration",
          longMessage: `Origin ${isSafe() ? window.origin : "uknown"} not found on Allowlist - update configuration on cloud.reown.com`
        }, "error");
        state8.reportedErrors["FORBIDDEN"] = true;
      }
    }
  },
  sendEvent(data) {
    var _a;
    state8.timestamp = Date.now();
    state8.data = data;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      EventsController._sendAnalyticsEvent(state8);
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled() {
    var _a;
    const siwx = OptionsController.state.siwx;
    const caipAddress = ChainController.getActiveCaipAddress();
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace)) {
      return;
    }
    try {
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties()
      });
      await ((_a = ConnectionController._getClient()) == null ? void 0 : _a.disconnect().catch(console.error));
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({
          view: null,
          goBack: false,
          replace: true
        });
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      const properties = this.getSIWXEventProperties();
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      if (properties.isSmartAccount) {
        SnackController.showError("This application might not support Smart Accounts");
      } else {
        SnackController.showError("Signature declined");
      }
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    var _a;
    try {
      const siwx = this.getSIWX();
      const isRequired = (_a = siwx == null ? void 0 : siwx.getRequired) == null ? void 0 : _a.call(siwx);
      if (isRequired) {
        await ConnectionController.disconnect();
      } else {
        ModalController.close();
      }
      RouterController.reset("Connect");
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getSessions() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network.caipNetworkId, address);
  },
  async isSIWXCloseDisabled() {
    var _a;
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return ((_a = siwx.getRequired) == null ? void 0 : _a.call(siwx)) && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    var _a, _b, _c;
    const siwx = SIWXUtil.getSIWX();
    const namespaces = new Set(chains.map((chain) => chain.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a = ChainController.getActiveCaipNetwork()) == null ? void 0 : _a.caipNetworkId) || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain) => chain !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    AccountController.setConnectedWalletInfo({
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: (_b = result.session.peer.metadata.icons) == null ? void 0 : _b[0],
      type: "WALLET_CONNECT"
    }, Array.from(namespaces)[0]);
    if ((_c = result == null ? void 0 : result.auths) == null ? void 0 : _c.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties()
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties() {
    var _a;
    return {
      network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || "",
      isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TransactionsController.js
var state9 = proxy({
  transactions: [],
  coinbaseTransactions: {},
  transactionsByYear: {},
  lastNetworkInView: void 0,
  loading: false,
  empty: false,
  next: void 0
});
var TransactionsController = {
  state: state9,
  subscribe(callback) {
    return subscribe(state9, () => callback(state9));
  },
  setLastNetworkInView(lastNetworkInView) {
    state9.lastNetworkInView = lastNetworkInView;
  },
  async fetchTransactions(accountAddress, onramp) {
    var _a;
    if (!accountAddress) {
      throw new Error("Transactions can't be fetched without an accountAddress");
    }
    state9.loading = true;
    try {
      const response = await BlockchainApiController.fetchTransactions({
        account: accountAddress,
        cursor: state9.next,
        onramp,
        // Coinbase transaction history state updates require the latest data
        cache: onramp === "coinbase" ? "no-cache" : void 0,
        chainId: (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId
      });
      const nonSpamTransactions = this.filterSpamTransactions(response.data);
      const sameChainTransactions = this.filterByConnectedChain(nonSpamTransactions);
      const filteredTransactions = [...state9.transactions, ...sameChainTransactions];
      state9.loading = false;
      if (onramp === "coinbase") {
        state9.coinbaseTransactions = this.groupTransactionsByYearAndMonth(state9.coinbaseTransactions, response.data);
      } else {
        state9.transactions = filteredTransactions;
        state9.transactionsByYear = this.groupTransactionsByYearAndMonth(state9.transactionsByYear, sameChainTransactions);
      }
      state9.empty = filteredTransactions.length === 0;
      state9.next = response.next ? response.next : void 0;
    } catch (error) {
      EventsController.sendEvent({
        type: "track",
        event: "ERROR_FETCH_TRANSACTIONS",
        properties: {
          address: accountAddress,
          projectId: OptionsController.state.projectId,
          cursor: state9.next,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SnackController.showError("Failed to fetch transactions");
      state9.loading = false;
      state9.empty = true;
      state9.next = void 0;
    }
  },
  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {
    const grouped = transactionsMap;
    transactions.forEach((transaction) => {
      const year = new Date(transaction.metadata.minedAt).getFullYear();
      const month = new Date(transaction.metadata.minedAt).getMonth();
      const yearTransactions = grouped[year] ?? {};
      const monthTransactions = yearTransactions[month] ?? [];
      const newMonthTransactions = monthTransactions.filter((tx) => tx.id !== transaction.id);
      grouped[year] = {
        ...yearTransactions,
        [month]: [...newMonthTransactions, transaction].sort((a3, b6) => new Date(b6.metadata.minedAt).getTime() - new Date(a3.metadata.minedAt).getTime())
      };
    });
    return grouped;
  },
  filterSpamTransactions(transactions) {
    return transactions.filter((transaction) => {
      const isAllSpam = transaction.transfers.every((transfer) => {
        var _a;
        return ((_a = transfer.nft_info) == null ? void 0 : _a.flags.is_spam) === true;
      });
      return !isAllSpam;
    });
  },
  filterByConnectedChain(transactions) {
    var _a;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const filteredTransactions = transactions.filter((transaction) => transaction.metadata.chain === chainId);
    return filteredTransactions;
  },
  clearCursor() {
    state9.next = void 0;
  },
  resetTransactions() {
    state9.transactions = [];
    state9.transactionsByYear = {};
    state9.lastNetworkInView = void 0;
    state9.loading = false;
    state9.empty = false;
    state9.next = void 0;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js
var state10 = proxy({
  wcError: false,
  buffering: false,
  status: "disconnected"
});
var wcConnectionPromise;
var ConnectionController = {
  state: state10,
  subscribeKey(key, callback) {
    return subscribeKey(state10, key, callback);
  },
  _getClient() {
    return state10._client;
  },
  setClient(client) {
    state10._client = ref(client);
  },
  async connectWalletConnect() {
    var _a, _b, _c, _d;
    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {
      if (wcConnectionPromise) {
        await wcConnectionPromise;
        wcConnectionPromise = void 0;
        return;
      }
      if (!CoreHelperUtil.isPairingExpired(state10 == null ? void 0 : state10.wcPairingExpiry)) {
        const link = state10.wcUri;
        state10.wcUri = link;
        return;
      }
      wcConnectionPromise = (_b = (_a = this._getClient()) == null ? void 0 : _a.connectWalletConnect) == null ? void 0 : _b.call(_a).catch(() => void 0);
      this.state.status = "connecting";
      await wcConnectionPromise;
      wcConnectionPromise = void 0;
      state10.wcPairingExpiry = void 0;
      this.state.status = "connected";
    } else {
      await ((_d = (_c = this._getClient()) == null ? void 0 : _c.connectWalletConnect) == null ? void 0 : _d.call(_c));
    }
  },
  async connectExternal(options, chain, setChain = true) {
    var _a, _b;
    await ((_b = (_a = this._getClient()) == null ? void 0 : _a.connectExternal) == null ? void 0 : _b.call(_a, options));
    if (setChain) {
      ChainController.setActiveNamespace(chain);
    }
  },
  async reconnectExternal(options) {
    var _a, _b;
    await ((_b = (_a = this._getClient()) == null ? void 0 : _a.reconnectExternal) == null ? void 0 : _b.call(_a, options));
    const namespace = options.chain || ChainController.state.activeChain;
    if (namespace) {
      ConnectorController.setConnectorId(options.id, namespace);
    }
  },
  async setPreferredAccountType(accountType) {
    var _a;
    ModalController.setLoading(true, ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      return;
    }
    await (authConnector == null ? void 0 : authConnector.provider.setPreferredAccount(accountType));
    await this.reconnectExternal(authConnector);
    ModalController.setLoading(false, ChainController.state.activeChain);
    EventsController.sendEvent({
      type: "track",
      event: "SET_PREFERRED_ACCOUNT_TYPE",
      properties: {
        accountType,
        network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || ""
      }
    });
  },
  async signMessage(message) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.signMessage(message);
  },
  parseUnits(value, decimals) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.parseUnits(value, decimals);
  },
  formatUnits(value, decimals) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.formatUnits(value, decimals);
  },
  async sendTransaction(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.sendTransaction(args);
  },
  async getCapabilities(params) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getCapabilities(params);
  },
  async grantPermissions(params) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.grantPermissions(params);
  },
  async walletGetAssets(params) {
    var _a;
    return ((_a = this._getClient()) == null ? void 0 : _a.walletGetAssets(params)) ?? {};
  },
  async estimateGas(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.estimateGas(args);
  },
  async writeContract(args) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.writeContract(args);
  },
  async getEnsAddress(value) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getEnsAddress(value);
  },
  async getEnsAvatar(value) {
    var _a;
    return (_a = this._getClient()) == null ? void 0 : _a.getEnsAvatar(value);
  },
  checkInstalled(ids) {
    var _a, _b;
    return ((_b = (_a = this._getClient()) == null ? void 0 : _a.checkInstalled) == null ? void 0 : _b.call(_a, ids)) || false;
  },
  resetWcConnection() {
    state10.wcUri = void 0;
    state10.wcPairingExpiry = void 0;
    state10.wcLinking = void 0;
    state10.recentWallet = void 0;
    state10.status = "disconnected";
    TransactionsController.resetTransactions();
    StorageUtil.deleteWalletConnectDeepLink();
  },
  resetUri() {
    state10.wcUri = void 0;
    state10.wcPairingExpiry = void 0;
  },
  finalizeWcConnection() {
    var _a, _b;
    const { wcLinking, recentWallet } = ConnectionController.state;
    if (wcLinking) {
      StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (recentWallet) {
      StorageUtil.setAppKitRecent(recentWallet);
    }
    EventsController.sendEvent({
      type: "track",
      event: "CONNECT_SUCCESS",
      properties: {
        method: wcLinking ? "mobile" : "qrcode",
        name: ((_b = (_a = RouterController.state.data) == null ? void 0 : _a.wallet) == null ? void 0 : _b.name) || "Unknown"
      }
    });
  },
  setWcBasic(wcBasic) {
    state10.wcBasic = wcBasic;
  },
  setUri(uri) {
    state10.wcUri = uri;
    state10.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
  },
  setWcLinking(wcLinking) {
    state10.wcLinking = wcLinking;
  },
  setWcError(wcError) {
    state10.wcError = wcError;
    state10.buffering = false;
  },
  setRecentWallet(wallet) {
    state10.recentWallet = wallet;
  },
  setBuffering(buffering) {
    state10.buffering = buffering;
  },
  setStatus(status) {
    state10.status = status;
  },
  async disconnect(namespace) {
    try {
      ModalController.setLoading(true, namespace);
      await SIWXUtil.clearSessions();
      await ChainController.disconnect(namespace);
      ModalController.setLoading(false, namespace);
      ConnectorController.setFilterByNamespace(void 0);
    } catch (error) {
      throw new Error("Failed to disconnect");
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js
var state11 = proxy({
  loading: false,
  open: false,
  selectedNetworkId: void 0,
  activeChain: void 0,
  initialized: false
});
var PublicStateController = {
  state: state11,
  subscribe(callback) {
    return subscribe(state11, () => callback(state11));
  },
  set(newState) {
    Object.assign(state11, { ...state11, ...newState });
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js
var state12 = proxy({
  loading: false,
  loadingNamespaceMap: /* @__PURE__ */ new Map(),
  open: false,
  shake: false,
  namespace: void 0
});
var ModalController = {
  state: state12,
  subscribe(callback) {
    return subscribe(state12, () => callback(state12));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state12, key, callback);
  },
  async open(options) {
    var _a;
    const isConnected = AccountController.state.status === "connected";
    if (ConnectionController.state.wcBasic) {
      ApiController.prefetch({ fetchNetworkImages: false, fetchConnectorImages: false });
    } else {
      await ApiController.prefetch({
        fetchConnectorImages: !isConnected,
        fetchFeaturedWallets: !isConnected,
        fetchRecommendedWallets: !isConnected
      });
    }
    if (options == null ? void 0 : options.namespace) {
      await ChainController.switchActiveNamespace(options.namespace);
      ModalController.setLoading(true, options.namespace);
    } else {
      ModalController.setLoading(true);
    }
    ConnectorController.setFilterByNamespace(options == null ? void 0 : options.namespace);
    const caipAddress = (_a = ChainController.getAccountData(options == null ? void 0 : options.namespace)) == null ? void 0 : _a.caipAddress;
    const hasNoAdapters = ChainController.state.noAdapters;
    if (hasNoAdapters && !caipAddress) {
      if (CoreHelperUtil.isMobile()) {
        RouterController.reset("AllWallets");
      } else {
        RouterController.reset("ConnectingWalletConnectBasic");
      }
    } else if (options == null ? void 0 : options.view) {
      RouterController.reset(options.view);
    } else if (caipAddress) {
      RouterController.reset("Account");
    } else {
      RouterController.reset("Connect");
    }
    state12.open = true;
    PublicStateController.set({ open: true });
    EventsController.sendEvent({
      type: "track",
      event: "MODAL_OPEN",
      properties: { connected: Boolean(caipAddress) }
    });
  },
  close() {
    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;
    const isConnected = Boolean(ChainController.state.activeCaipAddress);
    if (state12.open) {
      EventsController.sendEvent({
        type: "track",
        event: "MODAL_CLOSE",
        properties: { connected: isConnected }
      });
    }
    state12.open = false;
    ModalController.clearLoading();
    if (isEmbeddedEnabled) {
      if (isConnected) {
        RouterController.replace("Account");
      } else {
        RouterController.push("Connect");
      }
    } else {
      PublicStateController.set({ open: false });
    }
    ConnectionController.resetUri();
  },
  setLoading(loading, namespace) {
    if (namespace) {
      state12.loadingNamespaceMap.set(namespace, loading);
    }
    state12.loading = loading;
    PublicStateController.set({ loading });
  },
  clearLoading() {
    state12.loadingNamespaceMap.clear();
    state12.loading = false;
  },
  shake() {
    if (state12.shake) {
      return;
    }
    state12.shake = true;
    setTimeout(() => {
      state12.shake = false;
    }, 500);
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js
var state13 = proxy({
  view: "Connect",
  history: ["Connect"],
  transactionStack: []
});
var RouterController = {
  state: state13,
  subscribeKey(key, callback) {
    return subscribeKey(state13, key, callback);
  },
  pushTransactionStack(action) {
    state13.transactionStack.push(action);
  },
  popTransactionStack(cancel) {
    var _a, _b;
    const action = state13.transactionStack.pop();
    if (!action) {
      return;
    }
    if (cancel) {
      this.goBack();
      (_a = action == null ? void 0 : action.onCancel) == null ? void 0 : _a.call(action);
    } else {
      if (action.goBack) {
        this.goBack();
      } else if (action.replace) {
        const history = state13.history;
        const connectingSiweIndex = history.indexOf("ConnectingSiwe");
        if (connectingSiweIndex > 0) {
          this.goBackToIndex(connectingSiweIndex - 1);
        } else {
          ModalController.close();
          state13.history = [];
        }
      } else if (action.view) {
        this.reset(action.view);
      }
      (_b = action == null ? void 0 : action.onSuccess) == null ? void 0 : _b.call(action);
    }
  },
  push(view, data) {
    if (view !== state13.view) {
      state13.view = view;
      state13.history.push(view);
      state13.data = data;
    }
  },
  reset(view, data) {
    state13.view = view;
    state13.history = [view];
    state13.data = data;
  },
  replace(view, data) {
    const lastView = state13.history.at(-1);
    const isSameView = lastView === view;
    if (!isSameView) {
      state13.view = view;
      state13.history[state13.history.length - 1] = view;
      state13.data = data;
    }
  },
  goBack() {
    var _a;
    const shouldReload = !ChainController.state.activeCaipAddress && this.state.view === "ConnectingFarcaster";
    if (state13.history.length > 1 && !state13.history.includes("UnsupportedChain")) {
      state13.history.pop();
      const [last] = state13.history.slice(-1);
      if (last) {
        state13.view = last;
      }
    } else {
      ModalController.close();
    }
    if ((_a = state13.data) == null ? void 0 : _a.wallet) {
      state13.data.wallet = void 0;
    }
    setTimeout(() => {
      var _a2, _b, _c;
      if (shouldReload) {
        AccountController.setFarcasterUrl(void 0, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.reload();
        const optionsState = snapshot(OptionsController.state);
        (_c = (_b = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _b.syncDappData) == null ? void 0 : _c.call(_b, {
          metadata: optionsState.metadata,
          sdkVersion: optionsState.sdkVersion,
          projectId: optionsState.projectId,
          sdkType: optionsState.sdkType
        });
      }
    }, 100);
  },
  goBackToIndex(historyIndex) {
    if (state13.history.length > 1) {
      state13.history = state13.history.slice(0, historyIndex + 1);
      const [last] = state13.history.slice(-1);
      if (last) {
        state13.view = last;
      }
    }
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js
var state14 = proxy({
  themeMode: "dark",
  themeVariables: {},
  w3mThemeVariables: void 0
});
var ThemeController = {
  state: state14,
  subscribe(callback) {
    return subscribe(state14, () => callback(state14));
  },
  setThemeMode(themeMode) {
    state14.themeMode = themeMode;
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariables = ThemeController.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeMode,
          themeVariables,
          w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  setThemeVariables(themeVariables) {
    state14.themeVariables = { ...state14.themeVariables, ...themeVariables };
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariablesSnapshot = ThemeController.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeVariables: themeVariablesSnapshot,
          w3mThemeVariables: getW3mThemeVariables(state14.themeVariables, state14.themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  getSnapshot() {
    return snapshot(state14);
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js
var defaultActiveConnectors = {
  eip155: void 0,
  solana: void 0,
  polkadot: void 0,
  bip122: void 0
};
var state15 = proxy({
  allConnectors: [],
  connectors: [],
  activeConnector: void 0,
  filterByNamespace: void 0,
  activeConnectorIds: { ...defaultActiveConnectors }
});
var ConnectorController = {
  state: state15,
  subscribe(callback) {
    return subscribe(state15, () => {
      callback(state15);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state15, key, callback);
  },
  initialize(namespaces) {
    namespaces.forEach((namespace) => {
      const connectorId = StorageUtil.getConnectedConnectorId(namespace);
      if (connectorId) {
        this.setConnectorId(connectorId, namespace);
      }
    });
  },
  setActiveConnector(connector) {
    if (connector) {
      state15.activeConnector = ref(connector);
    }
  },
  setConnectors(connectors) {
    const newConnectors = connectors.filter((newConnector) => !state15.allConnectors.some((existingConnector) => existingConnector.id === newConnector.id && this.getConnectorName(existingConnector.name) === this.getConnectorName(newConnector.name) && existingConnector.chain === newConnector.chain));
    newConnectors.forEach((connector) => {
      if (connector.type !== "MULTI_CHAIN") {
        state15.allConnectors.push(ref(connector));
      }
    });
    state15.connectors = this.mergeMultiChainConnectors(state15.allConnectors);
  },
  removeAdapter(namespace) {
    state15.allConnectors = state15.allConnectors.filter((connector) => connector.chain !== namespace);
    state15.connectors = this.mergeMultiChainConnectors(state15.allConnectors);
  },
  mergeMultiChainConnectors(connectors) {
    const connectorsByNameMap = this.generateConnectorMapByName(connectors);
    const mergedConnectors = [];
    connectorsByNameMap.forEach((keyConnectors) => {
      const firstItem = keyConnectors[0];
      const isAuthConnector = (firstItem == null ? void 0 : firstItem.id) === ConstantsUtil.CONNECTOR_ID.AUTH;
      if (keyConnectors.length > 1 && firstItem) {
        mergedConnectors.push({
          name: firstItem.name,
          imageUrl: firstItem.imageUrl,
          imageId: firstItem.imageId,
          connectors: [...keyConnectors],
          type: isAuthConnector ? "AUTH" : "MULTI_CHAIN",
          // These values are just placeholders, we don't use them in multi-chain connector select screen
          chain: "eip155",
          id: (firstItem == null ? void 0 : firstItem.id) || ""
        });
      } else if (firstItem) {
        mergedConnectors.push(firstItem);
      }
    });
    return mergedConnectors;
  },
  generateConnectorMapByName(connectors) {
    const connectorsByNameMap = /* @__PURE__ */ new Map();
    connectors.forEach((connector) => {
      const { name: name2 } = connector;
      const connectorName = this.getConnectorName(name2);
      if (!connectorName) {
        return;
      }
      const connectorsByName = connectorsByNameMap.get(connectorName) || [];
      const haveSameConnector = connectorsByName.find((c8) => c8.chain === connector.chain);
      if (!haveSameConnector) {
        connectorsByName.push(connector);
      }
      connectorsByNameMap.set(connectorName, connectorsByName);
    });
    return connectorsByNameMap;
  },
  getConnectorName(name2) {
    if (!name2) {
      return name2;
    }
    const nameOverrideMap = {
      "Trust Wallet": "Trust"
    };
    return nameOverrideMap[name2] || name2;
  },
  getUniqueConnectorsByName(connectors) {
    const uniqueConnectors = [];
    connectors.forEach((c8) => {
      if (!uniqueConnectors.find((uc) => uc.chain === c8.chain)) {
        uniqueConnectors.push(c8);
      }
    });
    return uniqueConnectors;
  },
  addConnector(connector) {
    var _a, _b, _c;
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const authConnector = connector;
      const optionsState = snapshot(OptionsController.state);
      const themeMode = ThemeController.getSnapshot().themeMode;
      const themeVariables = ThemeController.getSnapshot().themeVariables;
      (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
        metadata: optionsState.metadata,
        sdkVersion: optionsState.sdkVersion,
        projectId: optionsState.projectId,
        sdkType: optionsState.sdkType
      });
      (_c = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _c.syncTheme({
        themeMode,
        themeVariables,
        w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
      });
      this.setConnectors([connector]);
    } else {
      this.setConnectors([connector]);
    }
  },
  getAuthConnector(chainNamespace) {
    var _a;
    const activeNamespace = chainNamespace || ChainController.state.activeChain;
    const authConnector = state15.connectors.find((c8) => c8.id === ConstantsUtil.CONNECTOR_ID.AUTH);
    if (!authConnector) {
      return void 0;
    }
    if ((_a = authConnector == null ? void 0 : authConnector.connectors) == null ? void 0 : _a.length) {
      const connector = authConnector.connectors.find((c8) => c8.chain === activeNamespace);
      return connector;
    }
    return authConnector;
  },
  getAnnouncedConnectorRdns() {
    return state15.connectors.filter((c8) => c8.type === "ANNOUNCED").map((c8) => {
      var _a;
      return (_a = c8.info) == null ? void 0 : _a.rdns;
    });
  },
  getConnectorById(id) {
    return state15.allConnectors.find((c8) => c8.id === id);
  },
  getConnector(id, rdns) {
    const connectorsByNamespace = state15.allConnectors.filter((c8) => c8.chain === ChainController.state.activeChain);
    return connectorsByNamespace.find((c8) => {
      var _a;
      return c8.explorerId === id || ((_a = c8.info) == null ? void 0 : _a.rdns) === rdns;
    });
  },
  syncIfAuthConnector(connector) {
    var _a, _b;
    if (connector.id !== "ID_AUTH") {
      return;
    }
    const authConnector = connector;
    const optionsState = snapshot(OptionsController.state);
    const themeMode = ThemeController.getSnapshot().themeMode;
    const themeVariables = ThemeController.getSnapshot().themeVariables;
    (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
      metadata: optionsState.metadata,
      sdkVersion: optionsState.sdkVersion,
      sdkType: optionsState.sdkType,
      projectId: optionsState.projectId
    });
    authConnector.provider.syncTheme({
      themeMode,
      themeVariables,
      w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
    });
  },
  /**
   * Returns the connectors filtered by namespace.
   * @param namespace - The namespace to filter the connectors by.
   * @returns ConnectorWithProviders[].
   */
  getConnectorsByNamespace(namespace) {
    const namespaceConnectors = state15.allConnectors.filter((connector) => connector.chain === namespace);
    return this.mergeMultiChainConnectors(namespaceConnectors);
  },
  selectWalletConnector(wallet) {
    const connector = ConnectorController.getConnector(wallet.id, wallet.rdns);
    if (ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA) {
      MobileWalletUtil.handleSolanaDeeplinkRedirect((connector == null ? void 0 : connector.name) || wallet.name || "");
    }
    if (connector) {
      RouterController.push("ConnectingExternal", { connector });
    } else {
      RouterController.push("ConnectingWalletConnect", { wallet });
    }
  },
  /**
   * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
   * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
   * @returns ConnectorWithProviders[].
   */
  getConnectors(namespace) {
    if (namespace) {
      return this.getConnectorsByNamespace(namespace);
    }
    return this.mergeMultiChainConnectors(state15.allConnectors);
  },
  /**
   * Sets the filter by namespace and updates the connectors.
   * @param namespace - The namespace to filter the connectors by.
   */
  setFilterByNamespace(namespace) {
    state15.filterByNamespace = namespace;
    state15.connectors = this.getConnectors(namespace);
    ApiController.setFilterByNamespace(namespace);
  },
  setConnectorId(connectorId, namespace) {
    if (connectorId) {
      state15.activeConnectorIds = {
        ...state15.activeConnectorIds,
        [namespace]: connectorId
      };
      StorageUtil.setConnectedConnectorId(namespace, connectorId);
    }
  },
  removeConnectorId(namespace) {
    state15.activeConnectorIds = {
      ...state15.activeConnectorIds,
      [namespace]: void 0
    };
    StorageUtil.deleteConnectedConnectorId(namespace);
  },
  getConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    return state15.activeConnectorIds[namespace];
  },
  isConnected(namespace) {
    if (!namespace) {
      return Object.values(state15.activeConnectorIds).some((id) => Boolean(id));
    }
    return Boolean(state15.activeConnectorIds[namespace]);
  },
  resetConnectorIds() {
    state15.activeConnectorIds = { ...defaultActiveConnectors };
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConnectorControllerUtil.js
function checkNamespaceConnectorId(namespace, connectorId) {
  return ConnectorController.getConnectorId(namespace) === connectorId;
}

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ChainControllerUtil.js
function getChainsToDisconnect(namespace) {
  const namespaces = Array.from(ChainController.state.chains.keys());
  let chains = [];
  if (namespace) {
    chains.push([namespace, ChainController.state.chains.get(namespace)]);
    if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.WALLET_CONNECT)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    } else if (checkNamespaceConnectorId(namespace, ConstantsUtil.CONNECTOR_ID.AUTH)) {
      namespaces.forEach((ns) => {
        if (ns !== namespace && checkNamespaceConnectorId(ns, ConstantsUtil.CONNECTOR_ID.AUTH)) {
          chains.push([ns, ChainController.state.chains.get(ns)]);
        }
      });
    }
  } else {
    chains = Array.from(ChainController.state.chains.entries());
  }
  return chains;
}

// ../node_modules/viem/_esm/utils/encoding/toRlp.js
function toRlp4(bytes, to3 = "hex") {
  const encodable = getEncodable(bytes);
  const cursor = createCursor(new Uint8Array(encodable.length));
  encodable.encode(cursor);
  if (to3 === "hex")
    return bytesToHex(cursor.bytes);
  return cursor.bytes;
}
function getEncodable(bytes) {
  if (Array.isArray(bytes))
    return getEncodableList(bytes.map((x8) => getEncodable(x8)));
  return getEncodableBytes(bytes);
}
function getEncodableList(list) {
  const bodyLength = list.reduce((acc, x8) => acc + x8.length, 0);
  const sizeOfBodyLength = getSizeOfLength(bodyLength);
  const length2 = (() => {
    if (bodyLength <= 55)
      return 1 + bodyLength;
    return 1 + sizeOfBodyLength + bodyLength;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bodyLength <= 55) {
        cursor.pushByte(192 + bodyLength);
      } else {
        cursor.pushByte(192 + 55 + sizeOfBodyLength);
        if (sizeOfBodyLength === 1)
          cursor.pushUint8(bodyLength);
        else if (sizeOfBodyLength === 2)
          cursor.pushUint16(bodyLength);
        else if (sizeOfBodyLength === 3)
          cursor.pushUint24(bodyLength);
        else
          cursor.pushUint32(bodyLength);
      }
      for (const { encode: encode17 } of list) {
        encode17(cursor);
      }
    }
  };
}
function getEncodableBytes(bytesOrHex) {
  const bytes = typeof bytesOrHex === "string" ? hexToBytes(bytesOrHex) : bytesOrHex;
  const sizeOfBytesLength = getSizeOfLength(bytes.length);
  const length2 = (() => {
    if (bytes.length === 1 && bytes[0] < 128)
      return 1;
    if (bytes.length <= 55)
      return 1 + bytes.length;
    return 1 + sizeOfBytesLength + bytes.length;
  })();
  return {
    length: length2,
    encode(cursor) {
      if (bytes.length === 1 && bytes[0] < 128) {
        cursor.pushBytes(bytes);
      } else if (bytes.length <= 55) {
        cursor.pushByte(128 + bytes.length);
        cursor.pushBytes(bytes);
      } else {
        cursor.pushByte(128 + 55 + sizeOfBytesLength);
        if (sizeOfBytesLength === 1)
          cursor.pushUint8(bytes.length);
        else if (sizeOfBytesLength === 2)
          cursor.pushUint16(bytes.length);
        else if (sizeOfBytesLength === 3)
          cursor.pushUint24(bytes.length);
        else
          cursor.pushUint32(bytes.length);
        cursor.pushBytes(bytes);
      }
    }
  };
}
function getSizeOfLength(length2) {
  if (length2 < 2 ** 8)
    return 1;
  if (length2 < 2 ** 16)
    return 2;
  if (length2 < 2 ** 24)
    return 3;
  if (length2 < 2 ** 32)
    return 4;
  throw new BaseError("Length is too large.");
}

// ../node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType4 = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction4(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber4(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber4(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType4[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList4(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction4 = defineFormatter4("transaction", formatTransaction4);
function formatAuthorizationList4(authorizationList) {
  return authorizationList.map((authorization) => ({
    address: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// ../node_modules/viem/_esm/utils/formatters/block.js
function formatBlock4(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction4(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock4 = defineFormatter4("block", formatBlock4);

// ../node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount4(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [
      address,
      typeof blockNumber === "bigint" ? numberToHex4(blockNumber) : blockTag
    ]
  }, {
    dedupe: Boolean(blockNumber)
  });
  return hexToNumber4(count);
}

// ../node_modules/viem/_esm/utils/blob/blobsToCommitments.js
function blobsToCommitments4(parameters) {
  const { kzg } = parameters;
  const to3 = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
  const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x8) => hexToBytes(x8)) : parameters.blobs;
  const commitments = [];
  for (const blob of blobs)
    commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
  return to3 === "bytes" ? commitments : commitments.map((x8) => bytesToHex(x8));
}

// ../node_modules/viem/_esm/utils/blob/blobsToProofs.js
function blobsToProofs4(parameters) {
  const { kzg } = parameters;
  const to3 = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
  const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x8) => hexToBytes(x8)) : parameters.blobs;
  const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x8) => hexToBytes(x8)) : parameters.commitments;
  const proofs = [];
  for (let i5 = 0; i5 < blobs.length; i5++) {
    const blob = blobs[i5];
    const commitment = commitments[i5];
    proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
  }
  return to3 === "bytes" ? proofs : proofs.map((x8) => bytesToHex(x8));
}

// ../node_modules/viem/_esm/utils/hash/sha256.js
init_sha256();
function sha25615(value, to_) {
  const to3 = to_ || "hex";
  const bytes = sha256(isHex2(value, { strict: false }) ? toBytes(value) : value);
  if (to3 === "bytes")
    return bytes;
  return toHex2(bytes);
}

// ../node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js
function commitmentToVersionedHash4(parameters) {
  const { commitment, version: version5 = 1 } = parameters;
  const to3 = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
  const versionedHash = sha25615(commitment, "bytes");
  versionedHash.set([version5], 0);
  return to3 === "bytes" ? versionedHash : bytesToHex(versionedHash);
}

// ../node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js
function commitmentsToVersionedHashes4(parameters) {
  const { commitments, version: version5 } = parameters;
  const to3 = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
  const hashes2 = [];
  for (const commitment of commitments) {
    hashes2.push(commitmentToVersionedHash4({
      commitment,
      to: to3,
      version: version5
    }));
  }
  return hashes2;
}

// ../node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction4 = 6;
var bytesPerFieldElement4 = 32;
var fieldElementsPerBlob4 = 4096;
var bytesPerBlob4 = bytesPerFieldElement4 * fieldElementsPerBlob4;
var maxBytesPerTransaction4 = bytesPerBlob4 * blobsPerTransaction4 - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob4 * blobsPerTransaction4;

// ../node_modules/viem/_esm/constants/kzg.js
var versionedHashVersionKzg4 = 1;

// ../node_modules/viem/_esm/errors/blob.js
var BlobSizeTooLargeError4 = class extends BaseError {
  constructor({ maxSize, size: size14 }) {
    super("Blob size is too large.", {
      metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size14} bytes`],
      name: "BlobSizeTooLargeError"
    });
  }
};
var EmptyBlobError4 = class extends BaseError {
  constructor() {
    super("Blob data must not be empty.", { name: "EmptyBlobError" });
  }
};
var InvalidVersionedHashSizeError4 = class extends BaseError {
  constructor({ hash, size: size14 }) {
    super(`Versioned hash "${hash}" size is invalid.`, {
      metaMessages: ["Expected: 32", `Received: ${size14}`],
      name: "InvalidVersionedHashSizeError"
    });
  }
};
var InvalidVersionedHashVersionError4 = class extends BaseError {
  constructor({ hash, version: version5 }) {
    super(`Versioned hash "${hash}" version is invalid.`, {
      metaMessages: [
        `Expected: ${versionedHashVersionKzg4}`,
        `Received: ${version5}`
      ],
      name: "InvalidVersionedHashVersionError"
    });
  }
};

// ../node_modules/viem/_esm/utils/blob/toBlobs.js
function toBlobs4(parameters) {
  const to3 = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
  const data = typeof parameters.data === "string" ? hexToBytes(parameters.data) : parameters.data;
  const size_ = size(data);
  if (!size_)
    throw new EmptyBlobError4();
  if (size_ > maxBytesPerTransaction4)
    throw new BlobSizeTooLargeError4({
      maxSize: maxBytesPerTransaction4,
      size: size_
    });
  const blobs = [];
  let active = true;
  let position = 0;
  while (active) {
    const blob = createCursor(new Uint8Array(bytesPerBlob4));
    let size14 = 0;
    while (size14 < fieldElementsPerBlob4) {
      const bytes = data.slice(position, position + (bytesPerFieldElement4 - 1));
      blob.pushByte(0);
      blob.pushBytes(bytes);
      if (bytes.length < 31) {
        blob.pushByte(128);
        active = false;
        break;
      }
      size14++;
      position += 31;
    }
    blobs.push(blob);
  }
  return to3 === "bytes" ? blobs.map((x8) => x8.bytes) : blobs.map((x8) => bytesToHex(x8.bytes));
}

// ../node_modules/viem/_esm/utils/blob/toBlobSidecars.js
function toBlobSidecars4(parameters) {
  const { data, kzg, to: to3 } = parameters;
  const blobs = parameters.blobs ?? toBlobs4({ data, to: to3 });
  const commitments = parameters.commitments ?? blobsToCommitments4({ blobs, kzg, to: to3 });
  const proofs = parameters.proofs ?? blobsToProofs4({ blobs, commitments, kzg, to: to3 });
  const sidecars = [];
  for (let i5 = 0; i5 < blobs.length; i5++)
    sidecars.push({
      blob: blobs[i5],
      commitment: commitments[i5],
      proof: proofs[i5]
    });
  return sidecars;
}

// ../node_modules/viem/_esm/utils/transaction/getTransactionType.js
function getTransactionType4(transaction) {
  if (transaction.type)
    return transaction.type;
  if (typeof transaction.authorizationList !== "undefined")
    return "eip7702";
  if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
    return "eip4844";
  if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
    return "eip1559";
  }
  if (typeof transaction.gasPrice !== "undefined") {
    if (typeof transaction.accessList !== "undefined")
      return "eip2930";
    return "legacy";
  }
  throw new InvalidSerializableTransactionError({ transaction });
}

// ../node_modules/viem/_esm/utils/formatters/log.js
function formatLog4(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// ../node_modules/viem/_esm/utils/wait.js
async function wait4(time) {
  return new Promise((res) => setTimeout(res, time));
}

// ../node_modules/viem/_esm/errors/account.js
var AccountNotFoundError4 = class extends BaseError {
  constructor({ docsPath } = {}) {
    super([
      "Could not find an Account to execute with this Action.",
      "Please provide an Account with the `account` argument on the Action, or by supplying an `account` to the Client."
    ].join("\n"), {
      docsPath,
      docsSlug: "account",
      name: "AccountNotFoundError"
    });
  }
};

// ../node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace4 = new LruMap4(128);

// ../node_modules/viem/_esm/utils/promise/withRetry.js
function withRetry4(fn5, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
  return new Promise((resolve, reject) => {
    const attemptRetry = async ({ count = 0 } = {}) => {
      const retry = async ({ error }) => {
        const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
        if (delay)
          await wait4(delay);
        attemptRetry({ count: count + 1 });
      };
      try {
        const data = await fn5();
        resolve(data);
      } catch (err) {
        if (count < retryCount && await shouldRetry2({ count, error: err }))
          return retry({ error: err });
        reject(err);
      }
    };
    attemptRetry();
  });
}

// ../node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses4 = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt4(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog4(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber4(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses4[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType4[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt4 = defineFormatter4("transactionReceipt", formatTransactionReceipt4);

// ../node_modules/viem/_esm/actions/wallet/sendCalls.js
var fallbackTransactionErrorMagicIdentifier = numberToHex4(0, {
  size: 32
});

// ../node_modules/viem/_esm/utils/uid.js
var size12 = 256;
var index = size12;
var buffer;
function uid4(length2 = 11) {
  if (!buffer || index + length2 > size12 * 2) {
    buffer = "";
    index = 0;
    for (let i5 = 0; i5 < size12; i5++) {
      buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
    }
  }
  return buffer.substring(index, index++ + length2);
}

// ../node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache4 = new LruMap4(8192);
function withDedupe4(fn5, { enabled = true, id }) {
  if (!enabled || !id)
    return fn5();
  if (promiseCache4.get(id))
    return promiseCache4.get(id);
  const promise = fn5().finally(() => promiseCache4.delete(id));
  promiseCache4.set(id, promise);
  return promise;
}

// ../node_modules/viem/_esm/utils/buildRequest.js
function buildRequest4(request, options = {}) {
  return async (args, overrideOptions = {}) => {
    var _a;
    const { dedupe = false, methods, retryDelay = 150, retryCount = 3, uid: uid5 } = {
      ...options,
      ...overrideOptions
    };
    const { method } = args;
    if ((_a = methods == null ? void 0 : methods.exclude) == null ? void 0 : _a.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    if ((methods == null ? void 0 : methods.include) && !methods.include.includes(method))
      throw new MethodNotSupportedRpcError(new Error("method not supported"), {
        method
      });
    const requestId = dedupe ? stringToHex(`${uid5}.${stringify(args)}`) : void 0;
    return withDedupe4(() => withRetry4(async () => {
      try {
        return await request(args);
      } catch (err_) {
        const err = err_;
        switch (err.code) {
          // -32700
          case ParseRpcError.code:
            throw new ParseRpcError(err);
          // -32600
          case InvalidRequestRpcError.code:
            throw new InvalidRequestRpcError(err);
          // -32601
          case MethodNotFoundRpcError.code:
            throw new MethodNotFoundRpcError(err, { method: args.method });
          // -32602
          case InvalidParamsRpcError.code:
            throw new InvalidParamsRpcError(err);
          // -32603
          case InternalRpcError.code:
            throw new InternalRpcError(err);
          // -32000
          case InvalidInputRpcError.code:
            throw new InvalidInputRpcError(err);
          // -32001
          case ResourceNotFoundRpcError.code:
            throw new ResourceNotFoundRpcError(err);
          // -32002
          case ResourceUnavailableRpcError.code:
            throw new ResourceUnavailableRpcError(err);
          // -32003
          case TransactionRejectedRpcError.code:
            throw new TransactionRejectedRpcError(err);
          // -32004
          case MethodNotSupportedRpcError.code:
            throw new MethodNotSupportedRpcError(err, {
              method: args.method
            });
          // -32005
          case LimitExceededRpcError.code:
            throw new LimitExceededRpcError(err);
          // -32006
          case JsonRpcVersionUnsupportedError.code:
            throw new JsonRpcVersionUnsupportedError(err);
          // 4001
          case UserRejectedRequestError.code:
            throw new UserRejectedRequestError(err);
          // 4100
          case UnauthorizedProviderError.code:
            throw new UnauthorizedProviderError(err);
          // 4200
          case UnsupportedProviderMethodError.code:
            throw new UnsupportedProviderMethodError(err);
          // 4900
          case ProviderDisconnectedError.code:
            throw new ProviderDisconnectedError(err);
          // 4901
          case ChainDisconnectedError.code:
            throw new ChainDisconnectedError(err);
          // 4902
          case SwitchChainError.code:
            throw new SwitchChainError(err);
          // 5700
          case UnsupportedNonOptionalCapabilityError.code:
            throw new UnsupportedNonOptionalCapabilityError(err);
          // 5710
          case UnsupportedChainIdError.code:
            throw new UnsupportedChainIdError(err);
          // 5720
          case DuplicateIdError.code:
            throw new DuplicateIdError(err);
          // 5730
          case UnknownBundleIdError.code:
            throw new UnknownBundleIdError(err);
          // 5740
          case BundleTooLargeError.code:
            throw new BundleTooLargeError(err);
          // 5750
          case AtomicReadyWalletRejectedUpgradeError.code:
            throw new AtomicReadyWalletRejectedUpgradeError(err);
          // 5760
          case AtomicityNotSupportedError.code:
            throw new AtomicityNotSupportedError(err);
          // CAIP-25: User Rejected Error
          // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25
          case 5e3:
            throw new UserRejectedRequestError(err);
          default:
            if (err_ instanceof BaseError)
              throw err_;
            throw new UnknownRpcError(err);
        }
      }
    }, {
      delay: ({ count, error }) => {
        var _a2;
        if (error && error instanceof HttpRequestError) {
          const retryAfter = (_a2 = error == null ? void 0 : error.headers) == null ? void 0 : _a2.get("Retry-After");
          if (retryAfter == null ? void 0 : retryAfter.match(/\d/))
            return Number.parseInt(retryAfter) * 1e3;
        }
        return ~~(1 << count) * retryDelay;
      },
      retryCount,
      shouldRetry: ({ error }) => shouldRetry(error)
    }), { enabled: dedupe, id: requestId });
  };
}
function shouldRetry(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === -1)
      return true;
    if (error.code === LimitExceededRpcError.code)
      return true;
    if (error.code === InternalRpcError.code)
      return true;
    return false;
  }
  if (error instanceof HttpRequestError && error.status) {
    if (error.status === 403)
      return true;
    if (error.status === 408)
      return true;
    if (error.status === 413)
      return true;
    if (error.status === 429)
      return true;
    if (error.status === 500)
      return true;
    if (error.status === 502)
      return true;
    if (error.status === 503)
      return true;
    if (error.status === 504)
      return true;
    return false;
  }
  return true;
}

// ../node_modules/viem/_esm/clients/transports/createTransport.js
function createTransport4({ key, methods, name: name2, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
  const uid5 = uid4();
  return {
    config: {
      key,
      methods,
      name: name2,
      request,
      retryCount,
      retryDelay,
      timeout,
      type
    },
    request: buildRequest4(request, { methods, retryCount, retryDelay, uid: uid5 }),
    value
  };
}

// ../node_modules/viem/_esm/clients/transports/fallback.js
function fallback4(transports_, config = {}) {
  const { key = "fallback", name: name2 = "Fallback", rank = false, shouldThrow: shouldThrow_ = shouldThrow, retryCount, retryDelay } = config;
  return ({ chain, pollingInterval = 4e3, timeout, ...rest }) => {
    let transports = transports_;
    let onResponse = () => {
    };
    const transport = createTransport4({
      key,
      name: name2,
      async request({ method, params }) {
        let includes;
        const fetch2 = async (i5 = 0) => {
          const transport2 = transports[i5]({
            ...rest,
            chain,
            retryCount: 0,
            timeout
          });
          try {
            const response = await transport2.request({
              method,
              params
            });
            onResponse({
              method,
              params,
              response,
              transport: transport2,
              status: "success"
            });
            return response;
          } catch (err) {
            onResponse({
              error: err,
              method,
              params,
              transport: transport2,
              status: "error"
            });
            if (shouldThrow_(err))
              throw err;
            if (i5 === transports.length - 1)
              throw err;
            includes ?? (includes = transports.slice(i5 + 1).some((transport3) => {
              const { include, exclude } = transport3({ chain }).config.methods || {};
              if (include)
                return include.includes(method);
              if (exclude)
                return !exclude.includes(method);
              return true;
            }));
            if (!includes)
              throw err;
            return fetch2(i5 + 1);
          }
        };
        return fetch2();
      },
      retryCount,
      retryDelay,
      type: "fallback"
    }, {
      onResponse: (fn5) => onResponse = fn5,
      transports: transports.map((fn5) => fn5({ chain, retryCount: 0 }))
    });
    if (rank) {
      const rankOptions = typeof rank === "object" ? rank : {};
      rankTransports({
        chain,
        interval: rankOptions.interval ?? pollingInterval,
        onTransports: (transports_2) => transports = transports_2,
        ping: rankOptions.ping,
        sampleCount: rankOptions.sampleCount,
        timeout: rankOptions.timeout,
        transports,
        weights: rankOptions.weights
      });
    }
    return transport;
  };
}
function shouldThrow(error) {
  if ("code" in error && typeof error.code === "number") {
    if (error.code === TransactionRejectedRpcError.code || error.code === UserRejectedRequestError.code || ExecutionRevertedError.nodeMessage.test(error.message) || error.code === 5e3)
      return true;
  }
  return false;
}
function rankTransports({ chain, interval = 4e3, onTransports, ping, sampleCount = 10, timeout = 1e3, transports, weights = {} }) {
  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } = weights;
  const samples = [];
  const rankTransports_ = async () => {
    const sample = await Promise.all(transports.map(async (transport) => {
      const transport_ = transport({ chain, retryCount: 0, timeout });
      const start = Date.now();
      let end;
      let success;
      try {
        await (ping ? ping({ transport: transport_ }) : transport_.request({ method: "net_listening" }));
        success = 1;
      } catch {
        success = 0;
      } finally {
        end = Date.now();
      }
      const latency = end - start;
      return { latency, success };
    }));
    samples.push(sample);
    if (samples.length > sampleCount)
      samples.shift();
    const maxLatency = Math.max(...samples.map((sample2) => Math.max(...sample2.map(({ latency }) => latency))));
    const scores = transports.map((_4, i5) => {
      const latencies = samples.map((sample2) => sample2[i5].latency);
      const meanLatency = latencies.reduce((acc, latency) => acc + latency, 0) / latencies.length;
      const latencyScore = 1 - meanLatency / maxLatency;
      const successes = samples.map((sample2) => sample2[i5].success);
      const stabilityScore = successes.reduce((acc, success) => acc + success, 0) / successes.length;
      if (stabilityScore === 0)
        return [0, i5];
      return [
        latencyWeight * latencyScore + stabilityWeight * stabilityScore,
        i5
      ];
    }).sort((a3, b6) => b6[0] - a3[0]);
    onTransports(scores.map(([, i5]) => transports[i5]));
    await wait4(interval);
    rankTransports_();
  };
  rankTransports_();
}

// ../node_modules/viem/_esm/errors/transport.js
var UrlRequiredError4 = class extends BaseError {
  constructor() {
    super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
      docsPath: "/docs/clients/intro",
      name: "UrlRequiredError"
    });
  }
};

// ../node_modules/viem/_esm/utils/promise/withTimeout.js
function withTimeout4(fn5, { errorInstance = new Error("timed out"), timeout, signal }) {
  return new Promise((resolve, reject) => {
    ;
    (async () => {
      let timeoutId;
      try {
        const controller = new AbortController();
        if (timeout > 0) {
          timeoutId = setTimeout(() => {
            if (signal) {
              controller.abort();
            } else {
              reject(errorInstance);
            }
          }, timeout);
        }
        resolve(await fn5({ signal: (controller == null ? void 0 : controller.signal) || null }));
      } catch (err) {
        if ((err == null ? void 0 : err.name) === "AbortError")
          reject(errorInstance);
        reject(err);
      } finally {
        clearTimeout(timeoutId);
      }
    })();
  });
}

// ../node_modules/viem/_esm/utils/rpc/id.js
function createIdStore4() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache4 = createIdStore4();

// ../node_modules/viem/_esm/utils/rpc/http.js
function getHttpRpcClient4(url, options = {}) {
  return {
    async request(params) {
      var _a;
      const { body, onRequest = options.onRequest, onResponse = options.onResponse, timeout = options.timeout ?? 1e4 } = params;
      const fetchOptions = {
        ...options.fetchOptions ?? {},
        ...params.fetchOptions ?? {}
      };
      const { headers, method, signal: signal_ } = fetchOptions;
      try {
        const response = await withTimeout4(async ({ signal }) => {
          const init = {
            ...fetchOptions,
            body: Array.isArray(body) ? stringify(body.map((body2) => ({
              jsonrpc: "2.0",
              id: body2.id ?? idCache4.take(),
              ...body2
            }))) : stringify({
              jsonrpc: "2.0",
              id: body.id ?? idCache4.take(),
              ...body
            }),
            headers: {
              "Content-Type": "application/json",
              ...headers
            },
            method: method || "POST",
            signal: signal_ || (timeout > 0 ? signal : null)
          };
          const request = new Request(url, init);
          const args = await (onRequest == null ? void 0 : onRequest(request, init)) ?? { ...init, url };
          const response2 = await fetch(args.url ?? url, args);
          return response2;
        }, {
          errorInstance: new TimeoutError({ body, url }),
          timeout,
          signal: true
        });
        if (onResponse)
          await onResponse(response);
        let data;
        if ((_a = response.headers.get("Content-Type")) == null ? void 0 : _a.startsWith("application/json"))
          data = await response.json();
        else {
          data = await response.text();
          try {
            data = JSON.parse(data || "{}");
          } catch (err) {
            if (response.ok)
              throw err;
            data = { error: data };
          }
        }
        if (!response.ok) {
          throw new HttpRequestError({
            body,
            details: stringify(data.error) || response.statusText,
            headers: response.headers,
            status: response.status,
            url
          });
        }
        return data;
      } catch (err) {
        if (err instanceof HttpRequestError)
          throw err;
        if (err instanceof TimeoutError)
          throw err;
        throw new HttpRequestError({
          body,
          cause: err,
          url
        });
      }
    }
  };
}

// ../node_modules/viem/_esm/clients/transports/http.js
function http4(url, config = {}) {
  const { batch, fetchOptions, key = "http", methods, name: name2 = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay, raw } = config;
  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
    const { batchSize = 1e3, wait: wait5 = 0 } = typeof batch === "object" ? batch : {};
    const retryCount = config.retryCount ?? retryCount_;
    const timeout = timeout_ ?? config.timeout ?? 1e4;
    const url_ = url || (chain == null ? void 0 : chain.rpcUrls.default.http[0]);
    if (!url_)
      throw new UrlRequiredError4();
    const rpcClient = getHttpRpcClient4(url_, {
      fetchOptions,
      onRequest: onFetchRequest,
      onResponse: onFetchResponse,
      timeout
    });
    return createTransport4({
      key,
      methods,
      name: name2,
      async request({ method, params }) {
        const body = { method, params };
        const { schedule } = createBatchScheduler({
          id: url_,
          wait: wait5,
          shouldSplitBatch(requests) {
            return requests.length > batchSize;
          },
          fn: (body2) => rpcClient.request({
            body: body2
          }),
          sort: (a3, b6) => a3.id - b6.id
        });
        const fn5 = async (body2) => batch ? schedule(body2) : [
          await rpcClient.request({
            body: body2
          })
        ];
        const [{ error, result }] = await fn5(body);
        if (raw)
          return { error, result };
        if (error)
          throw new RpcRequestError({
            body,
            error,
            url: url_
          });
        return result;
      },
      retryCount,
      retryDelay,
      timeout,
      type: "http"
    }, {
      fetchOptions,
      url: url_
    });
  };
}

// ../node_modules/viem/_esm/utils/chain/defineChain.js
function defineChain4(chain) {
  return {
    formatters: void 0,
    fees: void 0,
    serializers: void 0,
    ...chain
  };
}

// ../node_modules/viem/_esm/utils/transaction/assertTransaction.js
function assertTransactionEIP77024(transaction) {
  const { authorizationList } = transaction;
  if (authorizationList) {
    for (const authorization of authorizationList) {
      const { chainId } = authorization;
      const address = authorization.address;
      if (!isAddress(address))
        throw new InvalidAddressError({ address });
      if (chainId < 0)
        throw new InvalidChainIdError({ chainId });
    }
  }
  assertTransactionEIP15594(transaction);
}
function assertTransactionEIP48444(transaction) {
  const { blobVersionedHashes } = transaction;
  if (blobVersionedHashes) {
    if (blobVersionedHashes.length === 0)
      throw new EmptyBlobError4();
    for (const hash of blobVersionedHashes) {
      const size_ = size(hash);
      const version5 = hexToNumber4(slice(hash, 0, 1));
      if (size_ !== 32)
        throw new InvalidVersionedHashSizeError4({ hash, size: size_ });
      if (version5 !== versionedHashVersionKzg4)
        throw new InvalidVersionedHashVersionError4({
          hash,
          version: version5
        });
    }
  }
  assertTransactionEIP15594(transaction);
}
function assertTransactionEIP15594(transaction) {
  const { chainId, maxPriorityFeePerGas, maxFeePerGas, to: to3 } = transaction;
  if (chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (to3 && !isAddress(to3))
    throw new InvalidAddressError({ address: to3 });
  if (maxFeePerGas && maxFeePerGas > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas });
  if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas)
    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });
}
function assertTransactionEIP29304(transaction) {
  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to: to3 } = transaction;
  if (chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (to3 && !isAddress(to3))
    throw new InvalidAddressError({ address: to3 });
  if (maxPriorityFeePerGas || maxFeePerGas)
    throw new BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.");
  if (gasPrice && gasPrice > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });
}
function assertTransactionLegacy4(transaction) {
  const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to: to3 } = transaction;
  if (to3 && !isAddress(to3))
    throw new InvalidAddressError({ address: to3 });
  if (typeof chainId !== "undefined" && chainId <= 0)
    throw new InvalidChainIdError({ chainId });
  if (maxPriorityFeePerGas || maxFeePerGas)
    throw new BaseError("`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.");
  if (gasPrice && gasPrice > maxUint256)
    throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });
}

// ../node_modules/viem/_esm/utils/transaction/serializeAccessList.js
function serializeAccessList4(accessList) {
  if (!accessList || accessList.length === 0)
    return [];
  const serializedAccessList = [];
  for (let i5 = 0; i5 < accessList.length; i5++) {
    const { address, storageKeys } = accessList[i5];
    for (let j4 = 0; j4 < storageKeys.length; j4++) {
      if (storageKeys[j4].length - 2 !== 64) {
        throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j4] });
      }
    }
    if (!isAddress(address, { strict: false })) {
      throw new InvalidAddressError({ address });
    }
    serializedAccessList.push([address, storageKeys]);
  }
  return serializedAccessList;
}

// ../node_modules/viem/_esm/utils/transaction/serializeTransaction.js
function serializeTransaction4(transaction, signature) {
  const type = getTransactionType4(transaction);
  if (type === "eip1559")
    return serializeTransactionEIP1559(transaction, signature);
  if (type === "eip2930")
    return serializeTransactionEIP2930(transaction, signature);
  if (type === "eip4844")
    return serializeTransactionEIP4844(transaction, signature);
  if (type === "eip7702")
    return serializeTransactionEIP7702(transaction, signature);
  return serializeTransactionLegacy(transaction, signature);
}
function serializeTransactionEIP7702(transaction, signature) {
  const { authorizationList, chainId, gas, nonce, to: to3, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP77024(transaction);
  const serializedAccessList = serializeAccessList4(accessList);
  const serializedAuthorizationList = serializeAuthorizationList4(authorizationList);
  return concatHex([
    "0x04",
    toRlp4([
      numberToHex4(chainId),
      nonce ? numberToHex4(nonce) : "0x",
      maxPriorityFeePerGas ? numberToHex4(maxPriorityFeePerGas) : "0x",
      maxFeePerGas ? numberToHex4(maxFeePerGas) : "0x",
      gas ? numberToHex4(gas) : "0x",
      to3 ?? "0x",
      value ? numberToHex4(value) : "0x",
      data ?? "0x",
      serializedAccessList,
      serializedAuthorizationList,
      ...toYParitySignatureArray4(transaction, signature)
    ])
  ]);
}
function serializeTransactionEIP4844(transaction, signature) {
  const { chainId, gas, nonce, to: to3, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP48444(transaction);
  let blobVersionedHashes = transaction.blobVersionedHashes;
  let sidecars = transaction.sidecars;
  if (transaction.blobs && (typeof blobVersionedHashes === "undefined" || typeof sidecars === "undefined")) {
    const blobs2 = typeof transaction.blobs[0] === "string" ? transaction.blobs : transaction.blobs.map((x8) => bytesToHex(x8));
    const kzg = transaction.kzg;
    const commitments2 = blobsToCommitments4({
      blobs: blobs2,
      kzg
    });
    if (typeof blobVersionedHashes === "undefined")
      blobVersionedHashes = commitmentsToVersionedHashes4({
        commitments: commitments2
      });
    if (typeof sidecars === "undefined") {
      const proofs2 = blobsToProofs4({ blobs: blobs2, commitments: commitments2, kzg });
      sidecars = toBlobSidecars4({ blobs: blobs2, commitments: commitments2, proofs: proofs2 });
    }
  }
  const serializedAccessList = serializeAccessList4(accessList);
  const serializedTransaction = [
    numberToHex4(chainId),
    nonce ? numberToHex4(nonce) : "0x",
    maxPriorityFeePerGas ? numberToHex4(maxPriorityFeePerGas) : "0x",
    maxFeePerGas ? numberToHex4(maxFeePerGas) : "0x",
    gas ? numberToHex4(gas) : "0x",
    to3 ?? "0x",
    value ? numberToHex4(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    maxFeePerBlobGas ? numberToHex4(maxFeePerBlobGas) : "0x",
    blobVersionedHashes ?? [],
    ...toYParitySignatureArray4(transaction, signature)
  ];
  const blobs = [];
  const commitments = [];
  const proofs = [];
  if (sidecars)
    for (let i5 = 0; i5 < sidecars.length; i5++) {
      const { blob, commitment, proof } = sidecars[i5];
      blobs.push(blob);
      commitments.push(commitment);
      proofs.push(proof);
    }
  return concatHex([
    "0x03",
    sidecars ? (
      // If sidecars are enabled, envelope turns into a "wrapper":
      toRlp4([serializedTransaction, blobs, commitments, proofs])
    ) : (
      // If sidecars are disabled, standard envelope is used:
      toRlp4(serializedTransaction)
    )
  ]);
}
function serializeTransactionEIP1559(transaction, signature) {
  const { chainId, gas, nonce, to: to3, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data } = transaction;
  assertTransactionEIP15594(transaction);
  const serializedAccessList = serializeAccessList4(accessList);
  const serializedTransaction = [
    numberToHex4(chainId),
    nonce ? numberToHex4(nonce) : "0x",
    maxPriorityFeePerGas ? numberToHex4(maxPriorityFeePerGas) : "0x",
    maxFeePerGas ? numberToHex4(maxFeePerGas) : "0x",
    gas ? numberToHex4(gas) : "0x",
    to3 ?? "0x",
    value ? numberToHex4(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    ...toYParitySignatureArray4(transaction, signature)
  ];
  return concatHex([
    "0x02",
    toRlp4(serializedTransaction)
  ]);
}
function serializeTransactionEIP2930(transaction, signature) {
  const { chainId, gas, data, nonce, to: to3, value, accessList, gasPrice } = transaction;
  assertTransactionEIP29304(transaction);
  const serializedAccessList = serializeAccessList4(accessList);
  const serializedTransaction = [
    numberToHex4(chainId),
    nonce ? numberToHex4(nonce) : "0x",
    gasPrice ? numberToHex4(gasPrice) : "0x",
    gas ? numberToHex4(gas) : "0x",
    to3 ?? "0x",
    value ? numberToHex4(value) : "0x",
    data ?? "0x",
    serializedAccessList,
    ...toYParitySignatureArray4(transaction, signature)
  ];
  return concatHex([
    "0x01",
    toRlp4(serializedTransaction)
  ]);
}
function serializeTransactionLegacy(transaction, signature) {
  const { chainId = 0, gas, data, nonce, to: to3, value, gasPrice } = transaction;
  assertTransactionLegacy4(transaction);
  let serializedTransaction = [
    nonce ? numberToHex4(nonce) : "0x",
    gasPrice ? numberToHex4(gasPrice) : "0x",
    gas ? numberToHex4(gas) : "0x",
    to3 ?? "0x",
    value ? numberToHex4(value) : "0x",
    data ?? "0x"
  ];
  if (signature) {
    const v7 = (() => {
      if (signature.v >= 35n) {
        const inferredChainId = (signature.v - 35n) / 2n;
        if (inferredChainId > 0)
          return signature.v;
        return 27n + (signature.v === 35n ? 0n : 1n);
      }
      if (chainId > 0)
        return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);
      const v8 = 27n + (signature.v === 27n ? 0n : 1n);
      if (signature.v !== v8)
        throw new InvalidLegacyVError({ v: signature.v });
      return v8;
    })();
    const r3 = trim(signature.r);
    const s4 = trim(signature.s);
    serializedTransaction = [
      ...serializedTransaction,
      numberToHex4(v7),
      r3 === "0x00" ? "0x" : r3,
      s4 === "0x00" ? "0x" : s4
    ];
  } else if (chainId > 0) {
    serializedTransaction = [
      ...serializedTransaction,
      numberToHex4(chainId),
      "0x",
      "0x"
    ];
  }
  return toRlp4(serializedTransaction);
}
function toYParitySignatureArray4(transaction, signature_) {
  const signature = signature_ ?? transaction;
  const { v: v7, yParity } = signature;
  if (typeof signature.r === "undefined")
    return [];
  if (typeof signature.s === "undefined")
    return [];
  if (typeof v7 === "undefined" && typeof yParity === "undefined")
    return [];
  const r3 = trim(signature.r);
  const s4 = trim(signature.s);
  const yParity_ = (() => {
    if (typeof yParity === "number")
      return yParity ? numberToHex4(1) : "0x";
    if (v7 === 0n)
      return "0x";
    if (v7 === 1n)
      return numberToHex4(1);
    return v7 === 27n ? "0x" : numberToHex4(1);
  })();
  return [yParity_, r3 === "0x00" ? "0x" : r3, s4 === "0x00" ? "0x" : s4];
}

// ../node_modules/viem/_esm/utils/authorization/serializeAuthorizationList.js
function serializeAuthorizationList4(authorizationList) {
  if (!authorizationList || authorizationList.length === 0)
    return [];
  const serializedAuthorizationList = [];
  for (const authorization of authorizationList) {
    const { chainId, nonce, ...signature } = authorization;
    const contractAddress = authorization.address;
    serializedAuthorizationList.push([
      chainId ? toHex2(chainId) : "0x",
      contractAddress,
      nonce ? toHex2(nonce) : "0x",
      ...toYParitySignatureArray4({}, signature)
    ]);
  }
  return serializedAuthorizationList;
}

// ../node_modules/@noble/hashes/esm/legacy.js
init_md();
init_utils();
var SHA1_IV4 = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W4 = new Uint32Array(80);
var SHA14 = class extends HashMD {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV4[0] | 0;
    this.B = SHA1_IV4[1] | 0;
    this.C = SHA1_IV4[2] | 0;
    this.D = SHA1_IV4[3] | 0;
    this.E = SHA1_IV4[4] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    return [A4, B4, C6, D3, E7];
  }
  set(A4, B4, C6, D3, E7) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E7 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      SHA1_W4[i5] = view.getUint32(offset, false);
    for (let i5 = 16; i5 < 80; i5++)
      SHA1_W4[i5] = rotl(SHA1_W4[i5 - 3] ^ SHA1_W4[i5 - 8] ^ SHA1_W4[i5 - 14] ^ SHA1_W4[i5 - 16], 1);
    let { A: A4, B: B4, C: C6, D: D3, E: E7 } = this;
    for (let i5 = 0; i5 < 80; i5++) {
      let F6, K9;
      if (i5 < 20) {
        F6 = Chi(B4, C6, D3);
        K9 = 1518500249;
      } else if (i5 < 40) {
        F6 = B4 ^ C6 ^ D3;
        K9 = 1859775393;
      } else if (i5 < 60) {
        F6 = Maj(B4, C6, D3);
        K9 = 2400959708;
      } else {
        F6 = B4 ^ C6 ^ D3;
        K9 = 3395469782;
      }
      const T4 = rotl(A4, 5) + F6 + E7 + K9 + SHA1_W4[i5] | 0;
      E7 = D3;
      D3 = C6;
      C6 = rotl(B4, 30);
      B4 = A4;
      A4 = T4;
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E7 = E7 + this.E | 0;
    this.set(A4, B4, C6, D3, E7);
  }
  roundClean() {
    clean(SHA1_W4);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha14 = createHasher(() => new SHA14());
var p324 = Math.pow(2, 32);
var K8 = Array.from({ length: 64 }, (_4, i5) => Math.floor(p324 * Math.abs(Math.sin(i5 + 1))));
var MD5_IV4 = SHA1_IV4.slice(0, 4);
var MD5_W4 = new Uint32Array(16);
var MD54 = class extends HashMD {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV4[0] | 0;
    this.B = MD5_IV4[1] | 0;
    this.C = MD5_IV4[2] | 0;
    this.D = MD5_IV4[3] | 0;
  }
  get() {
    const { A: A4, B: B4, C: C6, D: D3 } = this;
    return [A4, B4, C6, D3];
  }
  set(A4, B4, C6, D3) {
    this.A = A4 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      MD5_W4[i5] = view.getUint32(offset, true);
    let { A: A4, B: B4, C: C6, D: D3 } = this;
    for (let i5 = 0; i5 < 64; i5++) {
      let F6, g5, s4;
      if (i5 < 16) {
        F6 = Chi(B4, C6, D3);
        g5 = i5;
        s4 = [7, 12, 17, 22];
      } else if (i5 < 32) {
        F6 = Chi(D3, B4, C6);
        g5 = (5 * i5 + 1) % 16;
        s4 = [5, 9, 14, 20];
      } else if (i5 < 48) {
        F6 = B4 ^ C6 ^ D3;
        g5 = (3 * i5 + 5) % 16;
        s4 = [4, 11, 16, 23];
      } else {
        F6 = C6 ^ (B4 | ~D3);
        g5 = 7 * i5 % 16;
        s4 = [6, 10, 15, 21];
      }
      F6 = F6 + A4 + K8[i5] + MD5_W4[g5];
      A4 = D3;
      D3 = C6;
      C6 = B4;
      B4 = B4 + rotl(F6, s4[i5 % 4]);
    }
    A4 = A4 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A4, B4, C6, D3);
  }
  roundClean() {
    clean(MD5_W4);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md54 = createHasher(() => new MD54());
var Rho1604 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id1604 = (() => Uint8Array.from(new Array(16).fill(0).map((_4, i5) => i5)))();
var Pi1604 = (() => Id1604.map((i5) => (9 * i5 + 5) % 16))();
var idxLR4 = (() => {
  const L5 = [Id1604];
  const R3 = [Pi1604];
  const res = [L5, R3];
  for (let i5 = 0; i5 < 4; i5++)
    for (let j4 of res)
      j4.push(j4[i5].map((k7) => Rho1604[k7]));
  return res;
})();
var idxL7 = (() => idxLR4[0])();
var idxR7 = (() => idxLR4[1])();
var shifts1604 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i5) => Uint8Array.from(i5));
var shiftsL1604 = idxL7.map((idx, i5) => idx.map((j4) => shifts1604[i5][j4]));
var shiftsR1604 = idxR7.map((idx, i5) => idx.map((j4) => shifts1604[i5][j4]));
var Kl1604 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr1604 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f4(group, x8, y7, z8) {
  if (group === 0)
    return x8 ^ y7 ^ z8;
  if (group === 1)
    return x8 & y7 | ~x8 & z8;
  if (group === 2)
    return (x8 | ~y7) ^ z8;
  if (group === 3)
    return x8 & z8 | y7 & ~z8;
  return x8 ^ (y7 | ~z8);
}
var BUF_1604 = new Uint32Array(16);
var RIPEMD1607 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i5 = 0; i5 < 16; i5++, offset += 4)
      BUF_1604[i5] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar4 = al, bl = this.h1 | 0, br4 = bl, cl = this.h2 | 0, cr4 = cl, dl = this.h3 | 0, dr4 = dl, el = this.h4 | 0, er6 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl1604[group], hbr = Kr1604[group];
      const rl = idxL7[group], rr4 = idxR7[group];
      const sl = shiftsL1604[group], sr4 = shiftsR1604[group];
      for (let i5 = 0; i5 < 16; i5++) {
        const tl = rotl(al + ripemd_f4(group, bl, cl, dl) + BUF_1604[rl[i5]] + hbl, sl[i5]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i5 = 0; i5 < 16; i5++) {
        const tr6 = rotl(ar4 + ripemd_f4(rGroup, br4, cr4, dr4) + BUF_1604[rr4[i5]] + hbr, sr4[i5]) + er6 | 0;
        ar4 = er6, er6 = dr4, dr4 = rotl(cr4, 10) | 0, cr4 = br4, br4 = tr6;
      }
    }
    this.set(this.h1 + cl + dr4 | 0, this.h2 + dl + er6 | 0, this.h3 + el + ar4 | 0, this.h4 + al + br4 | 0, this.h0 + bl + cr4 | 0);
  }
  roundClean() {
    clean(BUF_1604);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd16013 = createHasher(() => new RIPEMD1607());

// ../node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager4(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap4(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc4() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount4(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager4 = createNonceManager4({
  source: jsonRpc4()
});

// ../node_modules/ox/_esm/core/Hash.js
init_sha3();
init_sha256();
function keccak2568(value, options = {}) {
  const { as: as4 = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as4 === "Bytes")
    return bytes;
  return fromBytes(bytes);
}

// ../node_modules/ox/_esm/core/internal/lru.js
var LruMap8 = class extends Map {
  constructor(size14) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size14;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// ../node_modules/ox/_esm/core/Caches.js
var caches4 = {
  checksum: new LruMap8(8192)
};
var checksum7 = caches4.checksum;

// ../node_modules/ox/_esm/core/Address.js
var addressRegex4 = /^0x[a-fA-F0-9]{40}$/;
function assert4(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex4.test(value))
    throw new InvalidAddressError8({
      address: value,
      cause: new InvalidInputError4()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum8(value) !== value)
      throw new InvalidAddressError8({
        address: value,
        cause: new InvalidChecksumError4()
      });
  }
}
function checksum8(address) {
  if (checksum7.has(address))
    return checksum7.get(address);
  assert4(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2568(fromString(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i5 = 0; i5 < 40; i5 += 2) {
    if (hash[i5 >> 1] >> 4 >= 8 && characters[i5]) {
      characters[i5] = characters[i5].toUpperCase();
    }
    if ((hash[i5 >> 1] & 15) >= 8 && characters[i5 + 1]) {
      characters[i5 + 1] = characters[i5 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum7.set(address, result);
  return result;
}
var InvalidAddressError8 = class extends BaseError2 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError4 = class extends BaseError2 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError4 = class extends BaseError2 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// ../node_modules/ox/_esm/core/Solidity.js
var arrayRegex8 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex8 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex8 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt87 = 2n ** (8n - 1n) - 1n;
var maxInt167 = 2n ** (16n - 1n) - 1n;
var maxInt247 = 2n ** (24n - 1n) - 1n;
var maxInt327 = 2n ** (32n - 1n) - 1n;
var maxInt407 = 2n ** (40n - 1n) - 1n;
var maxInt487 = 2n ** (48n - 1n) - 1n;
var maxInt567 = 2n ** (56n - 1n) - 1n;
var maxInt647 = 2n ** (64n - 1n) - 1n;
var maxInt727 = 2n ** (72n - 1n) - 1n;
var maxInt807 = 2n ** (80n - 1n) - 1n;
var maxInt887 = 2n ** (88n - 1n) - 1n;
var maxInt967 = 2n ** (96n - 1n) - 1n;
var maxInt1047 = 2n ** (104n - 1n) - 1n;
var maxInt1127 = 2n ** (112n - 1n) - 1n;
var maxInt1207 = 2n ** (120n - 1n) - 1n;
var maxInt1287 = 2n ** (128n - 1n) - 1n;
var maxInt1367 = 2n ** (136n - 1n) - 1n;
var maxInt1447 = 2n ** (144n - 1n) - 1n;
var maxInt1527 = 2n ** (152n - 1n) - 1n;
var maxInt1607 = 2n ** (160n - 1n) - 1n;
var maxInt1687 = 2n ** (168n - 1n) - 1n;
var maxInt1767 = 2n ** (176n - 1n) - 1n;
var maxInt1847 = 2n ** (184n - 1n) - 1n;
var maxInt1927 = 2n ** (192n - 1n) - 1n;
var maxInt2007 = 2n ** (200n - 1n) - 1n;
var maxInt2087 = 2n ** (208n - 1n) - 1n;
var maxInt2167 = 2n ** (216n - 1n) - 1n;
var maxInt2247 = 2n ** (224n - 1n) - 1n;
var maxInt2327 = 2n ** (232n - 1n) - 1n;
var maxInt2407 = 2n ** (240n - 1n) - 1n;
var maxInt2487 = 2n ** (248n - 1n) - 1n;
var maxInt2567 = 2n ** (256n - 1n) - 1n;
var minInt87 = -(2n ** (8n - 1n));
var minInt167 = -(2n ** (16n - 1n));
var minInt247 = -(2n ** (24n - 1n));
var minInt327 = -(2n ** (32n - 1n));
var minInt407 = -(2n ** (40n - 1n));
var minInt487 = -(2n ** (48n - 1n));
var minInt567 = -(2n ** (56n - 1n));
var minInt647 = -(2n ** (64n - 1n));
var minInt727 = -(2n ** (72n - 1n));
var minInt807 = -(2n ** (80n - 1n));
var minInt887 = -(2n ** (88n - 1n));
var minInt967 = -(2n ** (96n - 1n));
var minInt1047 = -(2n ** (104n - 1n));
var minInt1127 = -(2n ** (112n - 1n));
var minInt1207 = -(2n ** (120n - 1n));
var minInt1287 = -(2n ** (128n - 1n));
var minInt1367 = -(2n ** (136n - 1n));
var minInt1447 = -(2n ** (144n - 1n));
var minInt1527 = -(2n ** (152n - 1n));
var minInt1607 = -(2n ** (160n - 1n));
var minInt1687 = -(2n ** (168n - 1n));
var minInt1767 = -(2n ** (176n - 1n));
var minInt1847 = -(2n ** (184n - 1n));
var minInt1927 = -(2n ** (192n - 1n));
var minInt2007 = -(2n ** (200n - 1n));
var minInt2087 = -(2n ** (208n - 1n));
var minInt2167 = -(2n ** (216n - 1n));
var minInt2247 = -(2n ** (224n - 1n));
var minInt2327 = -(2n ** (232n - 1n));
var minInt2407 = -(2n ** (240n - 1n));
var minInt2487 = -(2n ** (248n - 1n));
var minInt2567 = -(2n ** (256n - 1n));
var maxUint87 = 2n ** 8n - 1n;
var maxUint167 = 2n ** 16n - 1n;
var maxUint247 = 2n ** 24n - 1n;
var maxUint327 = 2n ** 32n - 1n;
var maxUint407 = 2n ** 40n - 1n;
var maxUint487 = 2n ** 48n - 1n;
var maxUint567 = 2n ** 56n - 1n;
var maxUint647 = 2n ** 64n - 1n;
var maxUint727 = 2n ** 72n - 1n;
var maxUint807 = 2n ** 80n - 1n;
var maxUint887 = 2n ** 88n - 1n;
var maxUint967 = 2n ** 96n - 1n;
var maxUint1047 = 2n ** 104n - 1n;
var maxUint1127 = 2n ** 112n - 1n;
var maxUint1207 = 2n ** 120n - 1n;
var maxUint1287 = 2n ** 128n - 1n;
var maxUint1367 = 2n ** 136n - 1n;
var maxUint1447 = 2n ** 144n - 1n;
var maxUint1527 = 2n ** 152n - 1n;
var maxUint1607 = 2n ** 160n - 1n;
var maxUint1687 = 2n ** 168n - 1n;
var maxUint1767 = 2n ** 176n - 1n;
var maxUint1847 = 2n ** 184n - 1n;
var maxUint1927 = 2n ** 192n - 1n;
var maxUint2007 = 2n ** 200n - 1n;
var maxUint2087 = 2n ** 208n - 1n;
var maxUint2167 = 2n ** 216n - 1n;
var maxUint2247 = 2n ** 224n - 1n;
var maxUint2327 = 2n ** 232n - 1n;
var maxUint2407 = 2n ** 240n - 1n;
var maxUint2487 = 2n ** 248n - 1n;
var maxUint2568 = 2n ** 256n - 1n;

// ../node_modules/ox/_esm/core/internal/cursor.js
var staticCursor4 = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError4({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError8({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError4({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError4({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length2, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length2 - 1);
    return this.bytes.subarray(position, position + length2);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length2, size14) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length2);
    this.position += size14 ?? length2;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError4 = class extends BaseError2 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError8 = class extends BaseError2 {
  constructor({ length: length2, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length2}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError4 = class extends BaseError2 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// ../node_modules/ox/_esm/core/AbiParameters.js
function encodePacked8(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError4({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i5 = 0; i5 < types.length; i5++) {
    const type = types[i5];
    const value = values[i5];
    data.push(encodePacked8.encode(type, value));
  }
  return concat(...data);
}
(function(encodePacked9) {
  function encode17(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert4(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString2(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex8);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size14 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size14,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex8);
    if (bytesMatch) {
      const [_type, size14] = bytesMatch;
      if (Number.parseInt(size14) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError8({
          expectedSize: Number.parseInt(size14),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex8);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i5 = 0; i5 < value.length; i5++) {
        data.push(encode17(childType, value[i5], true));
      }
      if (data.length === 0)
        return "0x";
      return concat(...data);
    }
    throw new InvalidTypeError4(type);
  }
  encodePacked9.encode = encode17;
})(encodePacked8 || (encodePacked8 = {}));
var BytesSizeMismatchError8 = class extends BaseError2 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size2(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError4 = class extends BaseError2 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError4 = class extends BaseError2 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/ERC7811Util.js
var ERC7811Utils = {
  /**
   * Creates a Balance object from an ERC7811 Asset object
   * @param asset - Asset object to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns Balance object
   */
  createBalance(asset, chainId) {
    const metadata = {
      name: asset.metadata["name"] || "",
      symbol: asset.metadata["symbol"] || "",
      decimals: asset.metadata["decimals"] || 0,
      value: asset.metadata["value"] || 0,
      price: asset.metadata["price"] || 0,
      iconUrl: asset.metadata["iconUrl"] || ""
    };
    return {
      name: metadata.name,
      symbol: metadata.symbol,
      chainId,
      address: asset.address === "native" ? void 0 : this.convertAddressToCAIP10Address(asset.address, chainId),
      value: metadata.value,
      price: metadata.price,
      quantity: {
        decimals: metadata.decimals.toString(),
        numeric: this.convertHexToBalance({
          hex: asset.balance,
          decimals: metadata.decimals
        })
      },
      iconUrl: metadata.iconUrl
    };
  },
  /**
   * Converts a hex string to a Balance object
   * @param hex - Hex string to convert
   * @param decimals - Number of decimals to use
   * @returns Balance object
   */
  convertHexToBalance({ hex, decimals }) {
    return formatUnits(BigInt(hex), decimals);
  },
  /**
   * Converts an address to a CAIP-10 address
   * @param address - Address to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns CAIP-10 address
   */
  convertAddressToCAIP10Address(address, chainId) {
    return `${chainId}:${address}`;
  },
  /**
   *  Creates a CAIP-2 Chain ID from a chain ID and namespace
   * @param chainId  - Chain ID in hex format
   * @param namespace  - Chain namespace
   * @returns
   */
  createCAIP2ChainId(chainId, namespace) {
    return `${namespace}:${parseInt(chainId, 16)}`;
  },
  /**
   * Gets the chain ID in hex format from a CAIP-2 Chain ID
   * @param caip2ChainId - CAIP-2 Chain ID
   * @returns Chain ID in hex format
   */
  getChainIdHexFromCAIP2ChainId(caip2ChainId) {
    const parts = caip2ChainId.split(":");
    if (parts.length < 2 || !parts[1]) {
      return "0x0";
    }
    const chainPart = parts[1];
    const parsed = parseInt(chainPart, 10);
    return isNaN(parsed) ? "0x0" : `0x${parsed.toString(16)}`;
  },
  /**
   * Checks if a response is a valid WalletGetAssetsResponse
   * @param response - The response to check
   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise
   */
  isWalletGetAssetsResponse(response) {
    if (typeof response !== "object" || response === null) {
      return false;
    }
    return Object.values(response).every((value) => Array.isArray(value) && value.every((asset) => this.isValidAsset(asset)));
  },
  /**
   * Checks if an asset object is valid.
   * @param asset - The asset object to check.
   * @returns True if the asset is valid, false otherwise.
   */
  isValidAsset(asset) {
    return typeof asset === "object" && asset !== null && typeof asset.address === "string" && typeof asset.balance === "string" && (asset.type === "ERC20" || asset.type === "NATIVE") && typeof asset.metadata === "object" && asset.metadata !== null && typeof asset.metadata["name"] === "string" && typeof asset.metadata["symbol"] === "string" && typeof asset.metadata["decimals"] === "number" && typeof asset.metadata["price"] === "number" && typeof asset.metadata["iconUrl"] === "string";
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SendApiUtil.js
var SendApiUtil = {
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!address || !caipNetwork) {
      return [];
    }
    if (caipNetwork.chainNamespace === "eip155") {
      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);
      if (eip155Balances) {
        return this.filterLowQualityTokens(eip155Balances);
      }
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    return this.filterLowQualityTokens(response.balances);
  },
  async getEIP155Balances(address, caipNetwork) {
    var _a, _b;
    try {
      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);
      const walletCapabilities = await ConnectionController.getCapabilities(address);
      if (!((_b = (_a = walletCapabilities == null ? void 0 : walletCapabilities[chainIdHex]) == null ? void 0 : _a["assetDiscovery"]) == null ? void 0 : _b.supported)) {
        return null;
      }
      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({
        account: address,
        chainFilter: [chainIdHex]
      });
      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {
        return null;
      }
      const assets = walletGetAssetsResponse[chainIdHex] || [];
      return assets.map((asset) => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));
    } catch (error) {
      return null;
    }
  },
  /**
   * The 1Inch API includes many low-quality tokens in the balance response,
   * which appear inconsistently. This filter prevents them from being displayed.
   */
  filterLowQualityTokens(balances) {
    return balances.filter((balance) => balance.quantity.decimals !== "0");
  },
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : ChainController.getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js
var state16 = proxy({
  tokenBalances: [],
  loading: false
});
var SendController = {
  state: state16,
  subscribe(callback) {
    return subscribe(state16, () => callback(state16));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state16, key, callback);
  },
  setToken(token) {
    if (token) {
      state16.token = ref(token);
    }
  },
  setTokenAmount(sendTokenAmount) {
    state16.sendTokenAmount = sendTokenAmount;
  },
  setReceiverAddress(receiverAddress) {
    state16.receiverAddress = receiverAddress;
  },
  setReceiverProfileImageUrl(receiverProfileImageUrl) {
    state16.receiverProfileImageUrl = receiverProfileImageUrl;
  },
  setReceiverProfileName(receiverProfileName) {
    state16.receiverProfileName = receiverProfileName;
  },
  setGasPrice(gasPrice) {
    state16.gasPrice = gasPrice;
  },
  setGasPriceInUsd(gasPriceInUSD) {
    state16.gasPriceInUSD = gasPriceInUSD;
  },
  setNetworkBalanceInUsd(networkBalanceInUSD) {
    state16.networkBalanceInUSD = networkBalanceInUSD;
  },
  setLoading(loading) {
    state16.loading = loading;
  },
  sendToken() {
    var _a;
    switch ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) {
      case "eip155":
        this.sendEvmToken();
        return;
      case "solana":
        this.sendSolanaToken();
        return;
      default:
        throw new Error("Unsupported chain");
    }
  },
  sendEvmToken() {
    var _a, _b, _c, _d, _e7;
    if (((_a = this.state.token) == null ? void 0 : _a.address) && this.state.sendTokenAmount && this.state.receiverAddress) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: this.state.token.address,
          amount: this.state.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      this.sendERC20Token({
        receiverAddress: this.state.receiverAddress,
        tokenAddress: this.state.token.address,
        sendTokenAmount: this.state.sendTokenAmount,
        decimals: this.state.token.quantity.decimals
      });
    } else if (this.state.receiverAddress && this.state.sendTokenAmount && this.state.gasPrice && ((_c = this.state.token) == null ? void 0 : _c.quantity.decimals)) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: (_d = this.state.token) == null ? void 0 : _d.symbol,
          amount: this.state.sendTokenAmount,
          network: ((_e7 = ChainController.state.activeCaipNetwork) == null ? void 0 : _e7.caipNetworkId) || ""
        }
      });
      this.sendNativeToken({
        receiverAddress: this.state.receiverAddress,
        sendTokenAmount: this.state.sendTokenAmount,
        gasPrice: this.state.gasPrice,
        decimals: this.state.token.quantity.decimals
      });
    }
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state16.loading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state16.lastRetry && !CoreHelperUtil.isAllowedRetry(state16.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state16.loading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const balances = await SendApiUtil.getMyTokensWithBalance();
        state16.tokenBalances = balances;
        state16.lastRetry = void 0;
        return balances;
      }
    } catch (error) {
      state16.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state16.loading = false;
    }
    return [];
  },
  fetchNetworkBalance() {
    if (state16.tokenBalances.length === 0) {
      return;
    }
    const networkTokenBalances = SendApiUtil.mapBalancesToSwapTokens(state16.tokenBalances);
    if (!networkTokenBalances) {
      return;
    }
    const networkToken = networkTokenBalances.find((token) => token.address === ChainController.getActiveNetworkTokenAddress());
    if (!networkToken) {
      return;
    }
    state16.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  hasInsufficientGasFunds() {
    let isInsufficientNetworkTokenForGas = true;
    if (AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT) {
      isInsufficientNetworkTokenForGas = false;
    } else if (state16.networkBalanceInUSD) {
      isInsufficientNetworkTokenForGas = this.isInsufficientNetworkTokenForGas(state16.networkBalanceInUSD, state16.gasPriceInUSD);
    }
    return isInsufficientNetworkTokenForGas;
  },
  async sendNativeToken(params) {
    var _a, _b, _c, _d;
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    const to3 = params.receiverAddress;
    const address = AccountController.state.address;
    const value = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    const data = "0x";
    try {
      await ConnectionController.sendTransaction({
        chainNamespace: "eip155",
        to: to3,
        address,
        data,
        value: value ?? BigInt(0),
        gasPrice: params.gasPrice
      });
      SnackController.showSuccess("Transaction started");
      EventsController.sendEvent({
        type: "track",
        event: "SEND_SUCCESS",
        properties: {
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_a = this.state.token) == null ? void 0 : _a.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      this.resetSend();
    } catch (error) {
      console.error("SendController:sendERC20Token - failed to send native token", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      EventsController.sendEvent({
        type: "track",
        event: "SEND_ERROR",
        properties: {
          message: errorMessage,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_c = this.state.token) == null ? void 0 : _c.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_d = ChainController.state.activeCaipNetwork) == null ? void 0 : _d.caipNetworkId) || ""
        }
      });
      SnackController.showError("Something went wrong");
    }
  },
  async sendERC20Token(params) {
    var _a, _b;
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    const amount = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    try {
      if (AccountController.state.address && params.sendTokenAmount && params.receiverAddress && params.tokenAddress) {
        const tokenAddress = CoreHelperUtil.getPlainAddress(params.tokenAddress);
        await ConnectionController.writeContract({
          fromAddress: AccountController.state.address,
          tokenAddress,
          args: [params.receiverAddress, amount ?? BigInt(0)],
          method: "transfer",
          abi: ContractUtil.getERC20Abi(tokenAddress),
          chainNamespace: "eip155"
        });
        SnackController.showSuccess("Transaction started");
        this.resetSend();
      }
    } catch (error) {
      console.error("SendController:sendERC20Token - failed to send erc20 token", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      EventsController.sendEvent({
        type: "track",
        event: "SEND_ERROR",
        properties: {
          message: errorMessage,
          isSmartAccount: AccountController.state.preferredAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: ((_a = this.state.token) == null ? void 0 : _a.symbol) || "",
          amount: params.sendTokenAmount,
          network: ((_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.caipNetworkId) || ""
        }
      });
      SnackController.showError("Something went wrong");
    }
  },
  sendSolanaToken() {
    if (!this.state.sendTokenAmount || !this.state.receiverAddress) {
      SnackController.showError("Please enter a valid amount and receiver address");
      return;
    }
    RouterController.pushTransactionStack({
      view: "Account",
      goBack: false
    });
    ConnectionController.sendTransaction({
      chainNamespace: "solana",
      to: this.state.receiverAddress,
      value: this.state.sendTokenAmount
    }).then(() => {
      this.resetSend();
      AccountController.fetchTokenBalance();
    }).catch((error) => {
      SnackController.showError("Failed to send transaction. Please try again.");
      console.error("SendController:sendToken - failed to send solana transaction", error);
    });
  },
  resetSend() {
    state16.token = void 0;
    state16.sendTokenAmount = void 0;
    state16.receiverAddress = void 0;
    state16.receiverProfileImageUrl = void 0;
    state16.receiverProfileName = void 0;
    state16.loading = false;
    state16.tokenBalances = [];
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js
var accountState = {
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: [],
  user: void 0
};
var networkState = {
  caipNetwork: void 0,
  supportsAllNetworks: true,
  smartAccountEnabledNetworks: []
};
var state17 = proxy({
  chains: proxyMap(),
  activeCaipAddress: void 0,
  activeChain: void 0,
  activeCaipNetwork: void 0,
  noAdapters: false,
  universalAdapter: {
    networkControllerClient: void 0,
    connectionControllerClient: void 0
  },
  isSwitchingNamespace: false
});
var ChainController = {
  state: state17,
  subscribe(callback) {
    return subscribe(state17, () => {
      callback(state17);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state17, key, callback);
  },
  subscribeChainProp(property, callback, chain) {
    let prev = void 0;
    return subscribe(state17.chains, () => {
      var _a;
      const activeChain = chain || state17.activeChain;
      if (activeChain) {
        const nextValue = (_a = state17.chains.get(activeChain)) == null ? void 0 : _a[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    });
  },
  initialize(adapters, caipNetworks, clients) {
    const { chainId: activeChainId, namespace: activeNamespace } = StorageUtil.getActiveNetworkProps();
    const activeCaipNetwork = caipNetworks == null ? void 0 : caipNetworks.find((network) => network.id.toString() === (activeChainId == null ? void 0 : activeChainId.toString()));
    const defaultAdapter = adapters.find((adapter) => (adapter == null ? void 0 : adapter.namespace) === activeNamespace);
    const adapterToActivate = defaultAdapter || (adapters == null ? void 0 : adapters[0]);
    const namespaces = /* @__PURE__ */ new Set([...(caipNetworks == null ? void 0 : caipNetworks.map((network) => network.chainNamespace)) ?? []]);
    if ((adapters == null ? void 0 : adapters.length) === 0 || !adapterToActivate) {
      state17.noAdapters = true;
    }
    if (!state17.noAdapters) {
      state17.activeChain = adapterToActivate == null ? void 0 : adapterToActivate.namespace;
      state17.activeCaipNetwork = activeCaipNetwork;
      this.setChainNetworkData(adapterToActivate == null ? void 0 : adapterToActivate.namespace, { caipNetwork: activeCaipNetwork });
      if (state17.activeChain) {
        PublicStateController.set({ activeChain: adapterToActivate == null ? void 0 : adapterToActivate.namespace });
      }
    }
    namespaces.forEach((namespace) => {
      const namespaceNetworks = caipNetworks == null ? void 0 : caipNetworks.filter((network) => network.chainNamespace === namespace);
      ChainController.state.chains.set(namespace, {
        namespace,
        networkState: proxy({
          ...networkState,
          caipNetwork: namespaceNetworks == null ? void 0 : namespaceNetworks[0]
        }),
        accountState: proxy(accountState),
        caipNetworks: namespaceNetworks ?? [],
        ...clients
      });
      this.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);
    });
  },
  removeAdapter(namespace) {
    var _a, _b;
    if (state17.activeChain === namespace) {
      const nextAdapter = Array.from(state17.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);
      if (nextAdapter) {
        const caipNetwork = (_b = (_a = nextAdapter[1]) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0];
        if (caipNetwork) {
          this.setActiveCaipNetwork(caipNetwork);
        }
      }
    }
    state17.chains.delete(namespace);
  },
  addAdapter(adapter, { networkControllerClient, connectionControllerClient }, caipNetworks) {
    state17.chains.set(adapter.namespace, {
      namespace: adapter.namespace,
      networkState: {
        ...networkState,
        caipNetwork: caipNetworks[0]
      },
      accountState,
      caipNetworks,
      connectionControllerClient,
      networkControllerClient
    });
    this.setRequestedCaipNetworks((caipNetworks == null ? void 0 : caipNetworks.filter((caipNetwork) => caipNetwork.chainNamespace === adapter.namespace)) ?? [], adapter.namespace);
  },
  addNetwork(network) {
    var _a;
    const chainAdapter = state17.chains.get(network.chainNamespace);
    if (chainAdapter) {
      const newNetworks = [...chainAdapter.caipNetworks || []];
      if (!((_a = chainAdapter.caipNetworks) == null ? void 0 : _a.find((caipNetwork) => caipNetwork.id === network.id))) {
        newNetworks.push(network);
      }
      state17.chains.set(network.chainNamespace, { ...chainAdapter, caipNetworks: newNetworks });
      this.setRequestedCaipNetworks(newNetworks, network.chainNamespace);
    }
  },
  removeNetwork(namespace, networkId) {
    var _a, _b, _c;
    const chainAdapter = state17.chains.get(namespace);
    if (chainAdapter) {
      const isActiveNetwork = ((_a = state17.activeCaipNetwork) == null ? void 0 : _a.id) === networkId;
      const newCaipNetworksOfAdapter = [
        ...((_b = chainAdapter.caipNetworks) == null ? void 0 : _b.filter((network) => network.id !== networkId)) || []
      ];
      if (isActiveNetwork && ((_c = chainAdapter == null ? void 0 : chainAdapter.caipNetworks) == null ? void 0 : _c[0])) {
        this.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);
      }
      state17.chains.set(namespace, { ...chainAdapter, caipNetworks: newCaipNetworksOfAdapter });
      this.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);
    }
  },
  setAdapterNetworkState(chain, props) {
    const chainAdapter = state17.chains.get(chain);
    if (chainAdapter) {
      chainAdapter.networkState = {
        ...chainAdapter.networkState || networkState,
        ...props
      };
      state17.chains.set(chain, chainAdapter);
    }
  },
  setChainAccountData(chain, accountProps, _unknown = true) {
    if (!chain) {
      throw new Error("Chain is required to update chain account data");
    }
    const chainAdapter = state17.chains.get(chain);
    if (chainAdapter) {
      const newAccountState = { ...chainAdapter.accountState || accountState, ...accountProps };
      state17.chains.set(chain, { ...chainAdapter, accountState: newAccountState });
      if (state17.chains.size === 1 || state17.activeChain === chain) {
        if (accountProps.caipAddress) {
          state17.activeCaipAddress = accountProps.caipAddress;
        }
        AccountController.replaceState(newAccountState);
      }
    }
  },
  setChainNetworkData(chain, networkProps) {
    if (!chain) {
      return;
    }
    const chainAdapter = state17.chains.get(chain);
    if (chainAdapter) {
      const newNetworkState = { ...chainAdapter.networkState || networkState, ...networkProps };
      state17.chains.set(chain, { ...chainAdapter, networkState: newNetworkState });
    }
  },
  // eslint-disable-next-line max-params
  setAccountProp(prop, value, chain, replaceState = true) {
    this.setChainAccountData(chain, { [prop]: value }, replaceState);
    if (prop === "status" && value === "disconnected" && chain) {
      ConnectorController.removeConnectorId(chain);
    }
  },
  setActiveNamespace(chain) {
    var _a, _b;
    state17.activeChain = chain;
    const newAdapter = chain ? state17.chains.get(chain) : void 0;
    const caipNetwork = (_a = newAdapter == null ? void 0 : newAdapter.networkState) == null ? void 0 : _a.caipNetwork;
    if ((caipNetwork == null ? void 0 : caipNetwork.id) && chain) {
      state17.activeCaipAddress = (_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.caipAddress;
      state17.activeCaipNetwork = caipNetwork;
      this.setChainNetworkData(chain, { caipNetwork });
      StorageUtil.setActiveCaipNetworkId(caipNetwork == null ? void 0 : caipNetwork.caipNetworkId);
      PublicStateController.set({
        activeChain: chain,
        selectedNetworkId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
      });
    }
  },
  setActiveCaipNetwork(caipNetwork) {
    var _a, _b, _c;
    if (!caipNetwork) {
      return;
    }
    if (state17.activeChain !== caipNetwork.chainNamespace) {
      this.setIsSwitchingNamespace(true);
    }
    const newAdapter = state17.chains.get(caipNetwork.chainNamespace);
    state17.activeChain = caipNetwork.chainNamespace;
    state17.activeCaipNetwork = caipNetwork;
    this.setChainNetworkData(caipNetwork.chainNamespace, { caipNetwork });
    if ((_a = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _a.address) {
      state17.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${(_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.address}`;
    } else {
      state17.activeCaipAddress = void 0;
    }
    this.setAccountProp("caipAddress", state17.activeCaipAddress, caipNetwork.chainNamespace);
    if (newAdapter) {
      AccountController.replaceState(newAdapter.accountState);
    }
    SendController.resetSend();
    PublicStateController.set({
      activeChain: state17.activeChain,
      selectedNetworkId: (_c = state17.activeCaipNetwork) == null ? void 0 : _c.caipNetworkId
    });
    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);
    const isSupported = this.checkIfSupportedNetwork(caipNetwork.chainNamespace);
    if (!isSupported && OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {
      this.showUnsupportedChainUI();
    }
  },
  addCaipNetwork(caipNetwork) {
    var _a;
    if (!caipNetwork) {
      return;
    }
    const chain = state17.chains.get(caipNetwork.chainNamespace);
    if (chain) {
      (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.push(caipNetwork);
    }
  },
  async switchActiveNamespace(namespace) {
    var _a;
    if (!namespace) {
      return;
    }
    const isDifferentChain = namespace !== ChainController.state.activeChain;
    const caipNetworkOfNamespace = (_a = ChainController.getNetworkData(namespace)) == null ? void 0 : _a.caipNetwork;
    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace == null ? void 0 : caipNetworkOfNamespace.id);
    if (isDifferentChain && firstNetworkWithChain) {
      await ChainController.switchActiveNetwork(firstNetworkWithChain);
    }
  },
  async switchActiveNetwork(network) {
    var _a;
    const activeAdapter = ChainController.state.chains.get(ChainController.state.activeChain);
    const unsupportedNetwork = !((_a = activeAdapter == null ? void 0 : activeAdapter.caipNetworks) == null ? void 0 : _a.some((caipNetwork) => {
      var _a2;
      return caipNetwork.id === ((_a2 = state17.activeCaipNetwork) == null ? void 0 : _a2.id);
    }));
    if (unsupportedNetwork) {
      RouterController.goBack();
    }
    const networkControllerClient = this.getNetworkControllerClient(network.chainNamespace);
    if (networkControllerClient) {
      await networkControllerClient.switchCaipNetwork(network);
      EventsController.sendEvent({
        type: "track",
        event: "SWITCH_NETWORK",
        properties: { network: network.caipNetworkId }
      });
    }
  },
  getNetworkControllerClient(chainNamespace) {
    const chain = chainNamespace || state17.activeChain;
    const chainAdapter = state17.chains.get(chain);
    if (!chainAdapter) {
      throw new Error("Chain adapter not found");
    }
    if (!chainAdapter.networkControllerClient) {
      throw new Error("NetworkController client not set");
    }
    return chainAdapter.networkControllerClient;
  },
  getConnectionControllerClient(_chain) {
    const chain = _chain || state17.activeChain;
    if (!chain) {
      throw new Error("Chain is required to get connection controller client");
    }
    const chainAdapter = state17.chains.get(chain);
    if (!(chainAdapter == null ? void 0 : chainAdapter.connectionControllerClient)) {
      throw new Error("ConnectionController client not set");
    }
    return chainAdapter.connectionControllerClient;
  },
  getAccountProp(key, _chain) {
    var _a;
    let chain = state17.activeChain;
    if (_chain) {
      chain = _chain;
    }
    if (!chain) {
      return void 0;
    }
    const chainAccountState = (_a = state17.chains.get(chain)) == null ? void 0 : _a.accountState;
    if (!chainAccountState) {
      return void 0;
    }
    return chainAccountState[key];
  },
  getNetworkProp(key, namespace) {
    var _a;
    const chainNetworkState = (_a = state17.chains.get(namespace)) == null ? void 0 : _a.networkState;
    if (!chainNetworkState) {
      return void 0;
    }
    return chainNetworkState[key];
  },
  getRequestedCaipNetworks(chainToFilter) {
    const adapter = state17.chains.get(chainToFilter);
    const { approvedCaipNetworkIds = [], requestedCaipNetworks = [] } = (adapter == null ? void 0 : adapter.networkState) || {};
    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);
    return sortedNetworks;
  },
  getAllRequestedCaipNetworks() {
    const requestedCaipNetworks = [];
    state17.chains.forEach((chainAdapter) => {
      const caipNetworks = this.getRequestedCaipNetworks(chainAdapter.namespace);
      requestedCaipNetworks.push(...caipNetworks);
    });
    return requestedCaipNetworks;
  },
  setRequestedCaipNetworks(requestedCaipNetworks, chain) {
    this.setAdapterNetworkState(chain, { requestedCaipNetworks });
  },
  getAllApprovedCaipNetworkIds() {
    const approvedCaipNetworkIds = [];
    state17.chains.forEach((chainAdapter) => {
      const approvedIds = this.getApprovedCaipNetworkIds(chainAdapter.namespace);
      approvedCaipNetworkIds.push(...approvedIds);
    });
    return approvedCaipNetworkIds;
  },
  getActiveCaipNetwork() {
    return state17.activeCaipNetwork;
  },
  getActiveCaipAddress() {
    return state17.activeCaipAddress;
  },
  getApprovedCaipNetworkIds(namespace) {
    var _a;
    const adapter = state17.chains.get(namespace);
    const approvedCaipNetworkIds = ((_a = adapter == null ? void 0 : adapter.networkState) == null ? void 0 : _a.approvedCaipNetworkIds) || [];
    return approvedCaipNetworkIds;
  },
  async setApprovedCaipNetworksData(namespace) {
    const networkControllerClient = this.getNetworkControllerClient();
    const data = await (networkControllerClient == null ? void 0 : networkControllerClient.getApprovedCaipNetworksData());
    this.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: data == null ? void 0 : data.approvedCaipNetworkIds,
      supportsAllNetworks: data == null ? void 0 : data.supportsAllNetworks
    });
  },
  checkIfSupportedNetwork(namespace, caipNetwork) {
    const activeCaipNetwork = caipNetwork || state17.activeCaipNetwork;
    const requestedCaipNetworks = this.getRequestedCaipNetworks(namespace);
    if (!requestedCaipNetworks.length) {
      return true;
    }
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === (activeCaipNetwork == null ? void 0 : activeCaipNetwork.id));
  },
  checkIfSupportedChainId(chainId) {
    if (!state17.activeChain) {
      return true;
    }
    const requestedCaipNetworks = this.getRequestedCaipNetworks(state17.activeChain);
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === chainId);
  },
  // Smart Account Network Handlers
  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain) {
    this.setAdapterNetworkState(chain, { smartAccountEnabledNetworks });
  },
  checkIfSmartAccountEnabled() {
    var _a;
    const networkId = NetworkUtil.caipNetworkIdToNumber((_a = state17.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    const activeChain = state17.activeChain;
    if (!activeChain || !networkId) {
      return false;
    }
    const smartAccountEnabledNetworks = this.getNetworkProp("smartAccountEnabledNetworks", activeChain);
    return Boolean(smartAccountEnabledNetworks == null ? void 0 : smartAccountEnabledNetworks.includes(Number(networkId)));
  },
  getActiveNetworkTokenAddress() {
    var _a, _b;
    const namespace = ((_a = state17.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) || "eip155";
    const chainId = ((_b = state17.activeCaipNetwork) == null ? void 0 : _b.id) || 1;
    const address = ConstantsUtil2.NATIVE_TOKEN_ADDRESS[namespace];
    return `${namespace}:${chainId}:${address}`;
  },
  showUnsupportedChainUI() {
    ModalController.open({ view: "UnsupportedChain" });
  },
  checkIfNamesSupported() {
    const activeCaipNetwork = state17.activeCaipNetwork;
    return Boolean((activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainNamespace) && ConstantsUtil2.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));
  },
  resetNetwork(namespace) {
    this.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: void 0,
      supportsAllNetworks: true,
      smartAccountEnabledNetworks: []
    });
  },
  resetAccount(chain) {
    const chainToWrite = chain;
    if (!chainToWrite) {
      throw new Error("Chain is required to set account prop");
    }
    state17.activeCaipAddress = void 0;
    this.setChainAccountData(chainToWrite, {
      smartAccountDeployed: false,
      currentTab: 0,
      caipAddress: void 0,
      address: void 0,
      balance: void 0,
      balanceSymbol: void 0,
      profileName: void 0,
      profileImage: void 0,
      addressExplorerUrl: void 0,
      tokenBalance: [],
      connectedWalletInfo: void 0,
      preferredAccountType: void 0,
      socialProvider: void 0,
      socialWindow: void 0,
      farcasterUrl: void 0,
      allAccounts: [],
      user: void 0,
      status: "disconnected"
    });
    ConnectorController.removeConnectorId(chainToWrite);
  },
  async disconnect(namespace) {
    const chainsToDisconnect = getChainsToDisconnect(namespace);
    try {
      SendController.resetSend();
      const disconnectResults = await Promise.allSettled(chainsToDisconnect.map(async ([ns, adapter]) => {
        var _a;
        try {
          const { caipAddress } = this.getAccountData(ns) || {};
          if (caipAddress && ((_a = adapter.connectionControllerClient) == null ? void 0 : _a.disconnect)) {
            await adapter.connectionControllerClient.disconnect(ns);
          }
          this.resetAccount(ns);
          this.resetNetwork(ns);
        } catch (error) {
          throw new Error(`Failed to disconnect chain ${ns}: ${error.message}`);
        }
      }));
      ConnectionController.resetWcConnection();
      const failures = disconnectResults.filter((result) => result.status === "rejected");
      if (failures.length > 0) {
        throw new Error(failures.map((f10) => f10.reason.message).join(", "));
      }
      StorageUtil.deleteConnectedSocialProvider();
      if (namespace) {
        ConnectorController.removeConnectorId(namespace);
      } else {
        ConnectorController.resetConnectorIds();
      }
      EventsController.sendEvent({
        type: "track",
        event: "DISCONNECT_SUCCESS",
        properties: {
          namespace: namespace || "all"
        }
      });
    } catch (error) {
      console.error(error.message || "Failed to disconnect chains");
      EventsController.sendEvent({
        type: "track",
        event: "DISCONNECT_ERROR",
        properties: {
          message: error.message || "Failed to disconnect chains"
        }
      });
    }
  },
  setIsSwitchingNamespace(isSwitchingNamespace) {
    state17.isSwitchingNamespace = isSwitchingNamespace;
  },
  getFirstCaipNetworkSupportsAuthConnector() {
    var _a, _b;
    const availableChains = [];
    let firstCaipNetwork = void 0;
    state17.chains.forEach((chain) => {
      if (ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((ns) => ns === chain.namespace)) {
        if (chain.namespace) {
          availableChains.push(chain.namespace);
        }
      }
    });
    if (availableChains.length > 0) {
      const firstAvailableChain = availableChains[0];
      firstCaipNetwork = firstAvailableChain ? (_b = (_a = state17.chains.get(firstAvailableChain)) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0] : void 0;
      return firstCaipNetwork;
    }
    return void 0;
  },
  getAccountData(chainNamespace) {
    var _a;
    if (!chainNamespace) {
      return AccountController.state;
    }
    return (_a = ChainController.state.chains.get(chainNamespace)) == null ? void 0 : _a.accountState;
  },
  getNetworkData(chainNamespace) {
    var _a;
    const namespace = chainNamespace || state17.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a = ChainController.state.chains.get(namespace)) == null ? void 0 : _a.networkState;
  },
  getCaipNetworkByNamespace(chainNamespace, chainId) {
    var _a, _b, _c;
    if (!chainNamespace) {
      return void 0;
    }
    const chain = ChainController.state.chains.get(chainNamespace);
    const byChainId = (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.find((network) => network.id === chainId);
    if (byChainId) {
      return byChainId;
    }
    return ((_b = chain == null ? void 0 : chain.networkState) == null ? void 0 : _b.caipNetwork) || ((_c = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _c[0]);
  },
  /**
   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned
   * @param namespace - The namespace to get the requested CaipNetwork IDs for
   * @returns The requested CaipNetwork IDs
   */
  getRequestedCaipNetworkIds() {
    const namespace = ConnectorController.state.filterByNamespace;
    const chains = namespace ? [state17.chains.get(namespace)] : Array.from(state17.chains.values());
    return chains.flatMap((chain) => (chain == null ? void 0 : chain.caipNetworks) || []).map((caipNetwork) => caipNetwork.caipNetworkId);
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js
var baseUrl3 = CoreHelperUtil.getApiUrl();
var api2 = new FetchUtil({ baseUrl: baseUrl3, clientId: null });
var entries = "40";
var recommendedEntries = "4";
var imageCountToFetch = 20;
var state18 = proxy({
  promises: {},
  page: 1,
  count: 0,
  featured: [],
  allFeatured: [],
  recommended: [],
  allRecommended: [],
  wallets: [],
  search: [],
  isAnalyticsEnabled: false,
  excludedWallets: [],
  isFetchingRecommendedWallets: false
});
var ApiController = {
  state: state18,
  subscribeKey(key, callback) {
    return subscribeKey(state18, key, callback);
  },
  _getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType || "appkit",
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  _filterOutExtensions(wallets) {
    if (OptionsController.state.isUniversalProvider) {
      return wallets.filter((w6) => Boolean(w6.mobile_link || w6.desktop_link || w6.webapp_link));
    }
    return wallets;
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api2.baseUrl}/getWalletImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api2.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchConnectorImage(imageId) {
    const imageUrl = `${api2.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchCurrencyImage(countryCode) {
    const imageUrl = `${api2.baseUrl}/public/getCurrencyImage/${countryCode}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));
  },
  async _fetchTokenImage(symbol) {
    const imageUrl = `${api2.baseUrl}/public/getTokenImage/${symbol}`;
    const blob = await api2.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));
  },
  async fetchNetworkImages() {
    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const ids = requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.map(({ assets }) => assets == null ? void 0 : assets.imageId).filter(Boolean).filter((imageId) => !AssetUtil.getNetworkImageById(imageId));
    if (ids) {
      await Promise.allSettled(ids.map((id) => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchConnectorImages() {
    const { connectors } = ConnectorController.state;
    const ids = connectors.map(({ imageId }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map((id) => ApiController._fetchConnectorImage(id)));
  },
  async fetchCurrencyImages(currencies = []) {
    await Promise.allSettled(currencies.map((currency) => ApiController._fetchCurrencyImage(currency)));
  },
  async fetchTokenImages(tokens = []) {
    await Promise.allSettled(tokens.map((token) => ApiController._fetchTokenImage(token)));
  },
  async fetchFeaturedWallets() {
    const { featuredWalletIds } = OptionsController.state;
    if (featuredWalletIds == null ? void 0 : featuredWalletIds.length) {
      const { data } = await api2.get({
        path: "/getWallets",
        params: {
          ...ApiController._getSdkProperties(),
          page: "1",
          entries: (featuredWalletIds == null ? void 0 : featuredWalletIds.length) ? String(featuredWalletIds.length) : recommendedEntries,
          include: featuredWalletIds == null ? void 0 : featuredWalletIds.join(",")
        }
      });
      data.sort((a3, b6) => featuredWalletIds.indexOf(a3.id) - featuredWalletIds.indexOf(b6.id));
      const images = data.map((d6) => d6.image_id).filter(Boolean);
      await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
      state18.featured = data;
      state18.allFeatured = data;
    }
  },
  async fetchRecommendedWallets() {
    try {
      state18.isFetchingRecommendedWallets = true;
      const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
      const exclude = [...excludeWalletIds ?? [], ...featuredWalletIds ?? []].filter(Boolean);
      const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
      const { data, count } = await api2.get({
        path: "/getWallets",
        params: {
          ...ApiController._getSdkProperties(),
          page: "1",
          chains: caipNetworkIds,
          entries: recommendedEntries,
          include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
          exclude: exclude == null ? void 0 : exclude.join(",")
        }
      });
      const recent = StorageUtil.getRecentWallets();
      const recommendedImages = data.map((d6) => d6.image_id).filter(Boolean);
      const recentImages = recent.map((r3) => r3.image_id).filter(Boolean);
      await Promise.allSettled([...recommendedImages, ...recentImages].map((id) => ApiController._fetchWalletImage(id)));
      state18.recommended = data;
      state18.allRecommended = data;
      state18.count = count ?? 0;
    } catch {
    } finally {
      state18.isFetchingRecommendedWallets = false;
    }
  },
  async fetchWallets({ page }) {
    const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const exclude = [
      ...state18.recommended.map(({ id }) => id),
      ...excludeWalletIds ?? [],
      ...featuredWalletIds ?? []
    ].filter(Boolean);
    const { data, count } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: String(page),
        entries,
        chains: caipNetworkIds,
        include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
        exclude: exclude.join(",")
      }
    });
    const images = data.slice(0, imageCountToFetch).map((w6) => w6.image_id).filter(Boolean);
    await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
    state18.wallets = CoreHelperUtil.uniqueBy([...state18.wallets, ...ApiController._filterOutExtensions(data)], "id");
    state18.count = count > state18.count ? count : state18.count;
    state18.page = page;
  },
  async initializeExcludedWallets({ ids }) {
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const { data } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: "1",
        entries: String(ids.length),
        chains: caipNetworkIds,
        include: ids == null ? void 0 : ids.join(",")
      }
    });
    if (data) {
      data.forEach((wallet) => {
        if (wallet == null ? void 0 : wallet.rdns) {
          state18.excludedWallets.push({ rdns: wallet.rdns, name: wallet.name });
        }
      });
    }
  },
  async searchWallet({ search, badge }) {
    const { includeWalletIds, excludeWalletIds } = OptionsController.state;
    state18.search = [];
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    const { data } = await api2.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        page: "1",
        entries: "100",
        search: search == null ? void 0 : search.trim(),
        badge_type: badge,
        chains: caipNetworkIds,
        include: includeWalletIds == null ? void 0 : includeWalletIds.join(","),
        exclude: excludeWalletIds == null ? void 0 : excludeWalletIds.join(",")
      }
    });
    EventsController.sendEvent({
      type: "track",
      event: "SEARCH_WALLET",
      properties: { badge: badge ?? "", search: search ?? "" }
    });
    const images = data.map((w6) => w6.image_id).filter(Boolean);
    await Promise.allSettled([
      ...images.map((id) => ApiController._fetchWalletImage(id)),
      CoreHelperUtil.wait(300)
    ]);
    state18.search = ApiController._filterOutExtensions(data);
  },
  initPromise(key, fetchFn) {
    const existingPromise = state18.promises[key];
    if (existingPromise) {
      return existingPromise;
    }
    return state18.promises[key] = fetchFn();
  },
  prefetch({ fetchConnectorImages = true, fetchFeaturedWallets = true, fetchRecommendedWallets = true, fetchNetworkImages = true } = {}) {
    const promises = [
      fetchConnectorImages && ApiController.initPromise("connectorImages", ApiController.fetchConnectorImages),
      fetchFeaturedWallets && ApiController.initPromise("featuredWallets", ApiController.fetchFeaturedWallets),
      fetchRecommendedWallets && ApiController.initPromise("recommendedWallets", ApiController.fetchRecommendedWallets),
      fetchNetworkImages && ApiController.initPromise("networkImages", ApiController.fetchNetworkImages)
    ].filter(Boolean);
    return Promise.allSettled(promises);
  },
  prefetchAnalyticsConfig() {
    var _a;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      ApiController.fetchAnalyticsConfig();
    }
  },
  async fetchAnalyticsConfig() {
    try {
      const { isAnalyticsEnabled } = await api2.get({
        path: "/getAnalyticsConfig",
        params: ApiController._getSdkProperties()
      });
      OptionsController.setFeatures({ analytics: isAnalyticsEnabled });
    } catch (error) {
      OptionsController.setFeatures({ analytics: false });
    }
  },
  setFilterByNamespace(namespace) {
    if (!namespace) {
      state18.featured = state18.allFeatured;
      state18.recommended = state18.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state18.featured = state18.allFeatured.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state18.recommended = state18.allRecommended.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state19 = proxy(defaultState);

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state20 = proxy(initialState);

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state21 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var TooltipController = {
  state: state21,
  subscribe(callback) {
    return subscribe(state21, () => callback(state21));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state21, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state21.open = true;
    state21.message = message;
    state21.triggerRect = triggerRect;
    state21.variant = variant;
  },
  hide() {
    state21.open = false;
    state21.message = "";
    state21.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state22 = proxy({
  suggestions: [],
  loading: false
});
var EnsController = {
  state: state22,
  subscribe(callback) {
    return subscribe(state22, () => callback(state22));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state22, key, callback);
  },
  async resolveName(name2) {
    var _a, _b;
    try {
      return await BlockchainApiController.lookupEnsName(name2);
    } catch (e3) {
      const error = e3;
      throw new Error(((_b = (_a = error == null ? void 0 : error.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || "Error resolving name");
    }
  },
  async isNameRegistered(name2) {
    try {
      await BlockchainApiController.lookupEnsName(name2);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state22.loading = true;
      state22.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state22.suggestions = response.suggestions.map((suggestion) => ({
        ...suggestion,
        name: suggestion.name
      })) || [];
      return state22.suggestions;
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state22.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name2) {
    const network = ChainController.state.activeCaipNetwork;
    if (!network) {
      throw new Error("Network not found");
    }
    const address = AccountController.state.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state22.loading = true;
    try {
      const message = JSON.stringify({
        name: name2,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        view: "RegisterAccountNameSuccess",
        goBack: false,
        replace: true,
        onCancel() {
          state22.loading = false;
        }
      });
      const signature = await ConnectionController.signMessage(message);
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      AccountController.setProfileName(name2, network.chainNamespace);
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e3) {
      const errorMessage = this.parseEnsApiError(e3, `Error registering name ${name2}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state22.loading = false;
    }
  },
  validateName(name2) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name2);
  },
  parseEnsApiError(error, defaultError) {
    var _a, _b;
    const ensError = error;
    return ((_b = (_a = ensError == null ? void 0 : ensError.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || defaultError;
  }
};

// ../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state23 = proxy({
  isLegalCheckboxChecked: false
});

// ../node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
function initializeTheming(themeVariables, themeMode) {
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  setColorTheme(themeMode);
}
function setColorTheme(themeMode) {
  if (darkModeTag && lightModeTag) {
    if (themeMode === "light") {
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(themeVariables) {
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  }
}
function createRootStyles(themeVariables) {
  return {
    core: css`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix-strength"]) ? `${themeVariables["--w3m-color-mix-strength"]}%` : "0%")};
        --w3m-font-family: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-family"]) || "Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-size-master"]) || "10px")};
        --w3m-border-radius-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-border-radius-master"]) || "4px")};
        --w3m-z-index: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-z-index"]) || 999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,
    light: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#fff")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,
    dark: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#000")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `
  };
}
var resetStyles = css`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;
var colorStyles = css`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`;

// ../node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var UiHelperUtil = {
  getSpacingStyles(spacing, index2) {
    if (Array.isArray(spacing)) {
      return spacing[index2] ? `var(--wui-spacing-${spacing[index2]})` : void 0;
    } else if (typeof spacing === "string") {
      return `var(--wui-spacing-${spacing})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string: string2, charsStart, charsEnd, truncate }) {
    if (string2.length <= charsStart + charsEnd) {
      return string2;
    }
    if (truncate === "end") {
      return `${string2.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string2.substring(string2.length - charsEnd)}`;
    }
    return `${string2.substring(0, Math.floor(charsStart))}...${string2.substring(string2.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius == null ? void 0 : masterBorderRadius.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors = [];
    for (let i5 = 0; i5 < 5; i5 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i5);
      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors[0]};
    --local-color-2: ${colors[1]};
    --local-color-3: ${colors[2]};
    --local-color-4: ${colors[3]};
    --local-color-5: ${colors[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex) {
    const bigint = parseInt(hex, 16);
    const r3 = bigint >> 16 & 255;
    const g5 = bigint >> 8 & 255;
    const b6 = bigint & 255;
    return [r3, g5, b6];
  },
  tintColor(rgb, tint) {
    const [r3, g5, b6] = rgb;
    const tintedR = Math.round(r3 + (255 - r3) * tint);
    const tintedG = Math.round(g5 + (255 - g5) * tint);
    const tintedB = Math.round(b6 + (255 - b6) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    var _a;
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia) {
      if ((_a = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  }
};

// ../node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create6(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

// ../node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil3 = {
  ACCOUNT_TABS: [{ label: "Tokens" }, { label: "NFTs" }, { label: "Activity" }],
  SECURE_SITE_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org",
  VIEW_DIRECTION: {
    Next: "next",
    Prev: "prev"
  },
  DEFAULT_CONNECT_METHOD_ORDER: ["email", "social", "wallet"],
  ANIMATION_DURATIONS: {
    HeaderText: 120,
    ModalHeight: 150,
    ViewTransition: 150
  }
};

export {
  require_cjs,
  IEvents,
  r,
  i2 as i,
  safeJsonParse,
  safeJsonStringify,
  h2 as h,
  import_pino2 as import_pino,
  k2 as k,
  y3 as y,
  E2 as E,
  A,
  Qe,
  sn,
  Po,
  Qo,
  detect,
  require_cjs2,
  require_cjs3,
  concat4 as concat,
  fromString6 as fromString,
  toString3 as toString,
  C2 as C,
  payloadId,
  getBigIntRpcId,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  formatJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  isJsonRpcError,
  esm_exports,
  o3 as o,
  f5 as f,
  f9 as f2,
  NetworkUtil,
  ConstantsUtil,
  ParseUtil,
  proxy,
  subscribe,
  ref,
  subscribeKey,
  ConstantsUtil2,
  StorageUtil,
  CoreHelperUtil,
  AssetController,
  AssetUtil,
  OptionsController,
  AlertController,
  EventsController,
  ApiController,
  RouterController,
  ThemeController,
  ConnectorController,
  x7 as x,
  SnackController,
  SIWXUtil,
  ConnectionController,
  PublicStateController,
  toRlp4 as toRlp,
  formatTransaction4 as formatTransaction,
  defineTransaction4 as defineTransaction,
  defineBlock4 as defineBlock,
  sha25615 as sha256,
  formatLog4 as formatLog,
  AccountNotFoundError4 as AccountNotFoundError,
  defineTransactionReceipt4 as defineTransactionReceipt,
  fallback4 as fallback,
  http4 as http,
  defineChain4 as defineChain,
  serializeAccessList4 as serializeAccessList,
  serializeTransaction4 as serializeTransaction,
  toYParitySignatureArray4 as toYParitySignatureArray,
  ChainController,
  BlockchainApiController,
  AccountController,
  ModalController,
  TooltipController,
  EnsController,
  ConstantsUtil3,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  colorStyles,
  UiHelperUtil,
  customElement
};
/*! Bundled license information:

@walletconnect/relay-auth/dist/index.es.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
@noble/hashes/esm/utils.js:
@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/utils.js:
@walletconnect/utils/dist/index.es.js:
@noble/curves/esm/utils.js:
@walletconnect/utils/dist/index.es.js:
@noble/curves/esm/utils.js:
@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-TAWCUWUR.js.map
